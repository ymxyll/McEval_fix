{"task_id": "Visual Basic/1", "prompt": "Module Module1\nFunction HasCloseElements(ByVal numbers As List(Of Double), ByVal threshold As Double) As Boolean\n' Check if in given list of numbers, are any two numbers closer to each other than\n' given threshold.\n' >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n' False\n' >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n' True", "canonical_solution": "For idx As Integer = 0 To numbers.Count - 2\nFor idx2 As Integer = idx + 1 To numbers.Count - 1\nDim distance As Double = Math.Abs(numbers(idx) - numbers(idx2))\nIf distance < threshold Then\nReturn True\nEnd If\nNext\nNext\nReturn False\nEnd Function", "test": "Sub Check(ByVal testFunction As Func(Of List(Of Double), Double, Boolean))\nDebug.Assert(testFunction(New List(Of Double) From {1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3) = True)\nDebug.Assert(testFunction(New List(Of Double) From {1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05) = False)\nDebug.Assert(testFunction(New List(Of Double) From {1.0, 2.0, 5.9, 4.0, 5.0}, 0.95) = True)\nDebug.Assert(testFunction(New List(Of Double) From {1.0, 2.0, 5.9, 4.0, 5.0}, 0.8) = False)\nDebug.Assert(testFunction(New List(Of Double) From {1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1) = True)\nDebug.Assert(testFunction(New List(Of Double) From {1.1, 2.2, 3.1, 4.1, 5.1}, 1.0) = True)\nDebug.Assert(testFunction(New List(Of Double) From {1.1, 2.2, 3.1, 4.1, 5.1}, 0.5) = False)\n\nConsole.WriteLine(\"pass\")\nEnd Sub\nSub Main()\n' \u6d4b\u8bd5\u51fd\u6570\nCheck(AddressOf HasCloseElements)\nEnd Sub\nEnd Module", "entry_point": "HasCloseElements", "signature": "Function HasCloseElements(ByVal numbers As List(Of Double), ByVal threshold As Double) As Boolean", "docstring": " Check if in given list of numbers, are any two numbers closer to each other than\n given threshold.\n >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n False\n >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n True", "instruction": "Write a Visual Basic function `Function HasCloseElements(ByVal numbers As List(Of Double), ByVal threshold As Double) As Boolean` to solve the following problem:\n Check if in given list of numbers, are any two numbers closer to each other than\n given threshold.\n >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n False\n >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n True", "level": "easy"}
{"task_id": "Visual Basic/2", "prompt": "Module Module1\nFunction IntersectAndSortArrays(ByVal nums1 As List(Of Integer), ByVal nums2 As List(Of Integer)) As List(Of Integer)\n' This function finds the intersection of two integer arrays, nums1 and nums2.\n' It returns a sorted array where each element appears as many times as it does in both arrays,\n' taking the smaller count if the counts differ. The result is sorted in ascending order.\n'\n' Example:\n' >>> intersect_and_sort_arrays([1, 2, 2, 1], [2, 2])\n' [2, 2]\n' >>> intersect_and_sort_arrays([4, 9, 5], [9, 4, 9, 8, 4])\n' [4, 9]\n' >>> intersect_and_sort_arrays([1, 2, 2, 1], [1, 1, 2, 3, 4])\n' [1, 1, 2]", "canonical_solution": "Dim counts As New Dictionary(Of Integer, Integer)()\nDim result As New List(Of Integer)()\n\n' Count elements in nums1\nFor Each num In nums1\nIf counts.ContainsKey(num) Then\ncounts(num) += 1\nElse\ncounts.Add(num, 1)\nEnd If\nNext\n\n' Find intersection and sort\nFor Each num In nums2\nIf counts.ContainsKey(num) AndAlso counts(num) > 0 Then\nresult.Add(num)\ncounts(num) -= 1\nEnd If\nNext\n\n' Sort the result\nresult.Sort()\n\nReturn result\nEnd Function", "test": "' Subroutine for testing the function's correctness\nSub Check()\nDebug.Assert(IntersectAndSortArrays(New List(Of Integer) From {1, 2, 2, 1}, New List(Of Integer) From {2, 2}).SequenceEqual(New List(Of Integer) From {2, 2}))\nDebug.Assert(IntersectAndSortArrays(New List(Of Integer) From {4, 9, 5}, New List(Of Integer) From {9, 4, 9, 8, 4}).SequenceEqual(New List(Of Integer) From {4, 9}))\nDebug.Assert(IntersectAndSortArrays(New List(Of Integer) From {1, 2, 2, 1}, New List(Of Integer) From {1, 1, 2, 3, 4}).SequenceEqual(New List(Of Integer) From {1, 1, 2}))\n\nConsole.WriteLine(\"Pass\")\nEnd Sub\n\nSub Main()\n' Test the function\nCheck()\nEnd Sub\nEnd Module", "entry_point": "IntersectAndSortArrays", "signature": "Function IntersectAndSortArrays(ByVal nums1 As List(Of Integer), ByVal nums2 As List(Of Integer)) As List(Of Integer)", "docstring": " This function finds the intersection of two integer arrays, nums1 and nums2.\n It returns a sorted array where each element appears as many times as it does in both arrays,\n taking the smaller count if the counts differ. The result is sorted in ascending order.\n\n Example:\n >>> intersect_and_sort_arrays([1, 2, 2, 1], [2, 2])\n [2, 2]\n >>> intersect_and_sort_arrays([4, 9, 5], [9, 4, 9, 8, 4])\n [4, 9]\n >>> intersect_and_sort_arrays([1, 2, 2, 1], [1, 1, 2, 3, 4])\n [1, 1, 2]", "instruction": "Write a Visual Basic function `Function IntersectAndSortArrays(ByVal nums1 As List(Of Integer), ByVal nums2 As List(Of Integer)) As List(Of Integer)` to solve the following problem:\n This function finds the intersection of two integer arrays, nums1 and nums2.\n It returns a sorted array where each element appears as many times as it does in both arrays,\n taking the smaller count if the counts differ. The result is sorted in ascending order.\n\n Example:\n >>> intersect_and_sort_arrays([1, 2, 2, 1], [2, 2])\n [2, 2]\n >>> intersect_and_sort_arrays([4, 9, 5], [9, 4, 9, 8, 4])\n [4, 9]\n >>> intersect_and_sort_arrays([1, 2, 2, 1], [1, 1, 2, 3, 4])\n [1, 1, 2]", "level": "middle"}
{"task_id": "Visual Basic/3", "prompt": "Module Module1\nFunction ThirdLargest(ByVal numbers As List(Of Integer)) As Integer\n' This function returns the third largest number in a non-empty array.\n' If the third largest number does not exist, it returns the largest number.\n' Assumes the input list is non-empty.\n'\n' Examples:\n' >>> third_largest([2, 3, 1])\n' 1\n' >>> third_largest([1])\n' 1\n' >>> third_largest([1, 2])\n' 2\n' >>> third_largest([2, 2, 3, 1])\n' 1", "canonical_solution": "numbers.Sort()\nnumbers.Reverse()\n\n' Eliminate duplicates\nDim uniqueNumbers As New HashSet(Of Integer)(numbers)\n\n' Return the third largest number if it exists, else the largest number\nReturn If(uniqueNumbers.Count >= 3, uniqueNumbers.ElementAt(2), uniqueNumbers.Max())\nEnd Function", "test": "Sub Check()\nDebug.Assert(ThirdLargest(New List(Of Integer) From {2, 3, 1}) = 1)\nDebug.Assert(ThirdLargest(New List(Of Integer) From {1}) = 1)\nDebug.Assert(ThirdLargest(New List(Of Integer) From {1, 2}) = 2)\nDebug.Assert(ThirdLargest(New List(Of Integer) From {2, 2, 3, 1}) = 1)\nDebug.Assert(ThirdLargest(New List(Of Integer) From {5, 2, 4}) = 2)\nDebug.Assert(ThirdLargest(New List(Of Integer) From {5, 5, 5, 1}) = 5)\nDebug.Assert(ThirdLargest(New List(Of Integer) From {10, 9, 8, 7, 6}) = 8)\n\nConsole.WriteLine(\"Pass\")\nEnd Sub\n\nSub Main()\n' Test the function\nCheck()\nEnd Sub\nEnd Module", "entry_point": "ThirdLargest", "signature": "Function ThirdLargest(ByVal numbers As List(Of Integer)) As Integer", "docstring": " This function returns the third largest number in a non-empty array.\n If the third largest number does not exist, it returns the largest number.\n Assumes the input list is non-empty.\n\n Examples:\n >>> third_largest([2, 3, 1])\n 1\n >>> third_largest([1])\n 1\n >>> third_largest([1, 2])\n 2\n >>> third_largest([2, 2, 3, 1])\n 1", "instruction": "Write a Visual Basic function `Function ThirdLargest(ByVal numbers As List(Of Integer)) As Integer` to solve the following problem:\n This function returns the third largest number in a non-empty array.\n If the third largest number does not exist, it returns the largest number.\n Assumes the input list is non-empty.\n\n Examples:\n >>> third_largest([2, 3, 1])\n 1\n >>> third_largest([1])\n 1\n >>> third_largest([1, 2])\n 2\n >>> third_largest([2, 2, 3, 1])\n 1", "level": "easy"}
{"task_id": "Visual Basic/4", "prompt": "Module Module1\nFunction FindMissingNumbers(ByVal nums As List(Of Integer)) As List(Of Integer)\n' This function finds all numbers in the range [1, n] that are not present in the array nums.\n' nums[i] is in the range [1, n], where n is the length of the array.\n'\n' Examples:\n' >>> find_missing_numbers([4,3,2,7,8,2,3,1])\n' [5, 6]\n' >>> find_missing_numbers([1,1])\n' [2]\n' >>> find_missing_numbers([1,2,3,4,5])\n' []", "canonical_solution": "Dim n As Integer = nums.Count\nDim result As New List(Of Integer)()\n\n' Create a HashSet for efficient lookup\nDim numSet As New HashSet(Of Integer)(nums)\n\n' Check for missing numbers\nFor i As Integer = 1 To n\nIf Not numSet.Contains(i) Then\nresult.Add(i)\nEnd If\nNext\n\nReturn result\nEnd Function", "test": "Sub Check()\nDebug.Assert(FindMissingNumbers(New List(Of Integer) From {4, 3, 2, 7, 8, 2, 3, 1}).SequenceEqual(New List(Of Integer) From {5, 6}))\nDebug.Assert(FindMissingNumbers(New List(Of Integer) From {1, 1}).SequenceEqual(New List(Of Integer) From {2}))\nDebug.Assert(FindMissingNumbers(New List(Of Integer) From {1, 2, 3, 4, 5}).Count = 0)\nDebug.Assert(FindMissingNumbers(New List(Of Integer) From {7, 8, 9, 11, 12}).SequenceEqual(New List(Of Integer) From {1, 2, 3, 4, 5}))\nDebug.Assert(FindMissingNumbers(New List(Of Integer) From {}).Count = 0)\nDebug.Assert(FindMissingNumbers(New List(Of Integer) From {2, 2, 2}).SequenceEqual(New List(Of Integer) From {1, 3}))\n\nConsole.WriteLine(\"Pass\")\nEnd Sub\n\nSub Main()\n' Test the function\nCheck()\nEnd Sub\nEnd Module", "entry_point": "FindMissingNumbers", "signature": "Function FindMissingNumbers(ByVal nums As List(Of Integer)) As List(Of Integer)", "docstring": " This function finds all numbers in the range [1, n] that are not present in the array nums.\n nums[i] is in the range [1, n], where n is the length of the array.\n\n Examples:\n >>> find_missing_numbers([4,3,2,7,8,2,3,1])\n [5, 6]\n >>> find_missing_numbers([1,1])\n [2]\n >>> find_missing_numbers([1,2,3,4,5])\n []", "instruction": "Write a Visual Basic function `Function FindMissingNumbers(ByVal nums As List(Of Integer)) As List(Of Integer)` to solve the following problem:\n This function finds all numbers in the range [1, n] that are not present in the array nums.\n nums[i] is in the range [1, n], where n is the length of the array.\n\n Examples:\n >>> find_missing_numbers([4,3,2,7,8,2,3,1])\n [5, 6]\n >>> find_missing_numbers([1,1])\n [2]\n >>> find_missing_numbers([1,2,3,4,5])\n []", "level": "easy"}
{"task_id": "Visual Basic/5", "prompt": "Module Module1\nFunction MaxSatisfiedChildren(ByVal g As List(Of Integer), ByVal s As List(Of Integer)) As Integer\n' This function determines the maximum number of children that can be satisfied with given cookies.\n' Each child has an appetite value g[i], and each cookie has a size s[j].\n' A child i is satisfied if s[j] >= g[i]. The goal is to satisfy as many children as possible.\n'\n' Examples:\n' >>> max_satisfied_children([1, 2, 3], [1, 1])\n' 1\n' >>> max_satisfied_children([1, 2], [1, 2, 3])\n' 2\n' >>> max_satisfied_children([1, 2, 3], [3])\n' 1", "canonical_solution": "g.Sort()\ns.Sort()\n\nDim childIndex As Integer = 0\n\n' Distribute cookies\nFor Each size In s\nIf childIndex < g.Count AndAlso size >= g(childIndex) Then\nchildIndex += 1\nEnd If\nNext\n\nReturn childIndex\nEnd Function", "test": "Sub Check()\nDebug.Assert(MaxSatisfiedChildren(New List(Of Integer) From {1, 2, 3}, New List(Of Integer) From {1, 1}) = 1)\nDebug.Assert(MaxSatisfiedChildren(New List(Of Integer) From {1, 2}, New List(Of Integer) From {1, 2, 3}) = 2)\nDebug.Assert(MaxSatisfiedChildren(New List(Of Integer) From {1, 2, 3}, New List(Of Integer) From {3}) = 1)\nDebug.Assert(MaxSatisfiedChildren(New List(Of Integer) From {10, 9, 8, 7}, New List(Of Integer) From {5, 6, 7, 8}) = 2)\nDebug.Assert(MaxSatisfiedChildren(New List(Of Integer) From {}, New List(Of Integer) From {1, 2, 3}) = 0)\nDebug.Assert(MaxSatisfiedChildren(New List(Of Integer) From {1, 2, 3}, New List(Of Integer) From {}) = 0)\n\nConsole.WriteLine(\"Pass\")\nEnd Sub\n\nSub Main()\n' Test the function\nCheck()\nEnd Sub\nEnd Module", "entry_point": "MaxSatisfiedChildren", "signature": "Function MaxSatisfiedChildren(ByVal g As List(Of Integer), ByVal s As List(Of Integer)) As Integer", "docstring": " This function determines the maximum number of children that can be satisfied with given cookies.\n Each child has an appetite value g[i], and each cookie has a size s[j].\n A child i is satisfied if s[j] >= g[i]. The goal is to satisfy as many children as possible.\n\n Examples:\n >>> max_satisfied_children([1, 2, 3], [1, 1])\n 1\n >>> max_satisfied_children([1, 2], [1, 2, 3])\n 2\n >>> max_satisfied_children([1, 2, 3], [3])\n 1", "instruction": "Write a Visual Basic function `Function MaxSatisfiedChildren(ByVal g As List(Of Integer), ByVal s As List(Of Integer)) As Integer` to solve the following problem:\n This function determines the maximum number of children that can be satisfied with given cookies.\n Each child has an appetite value g[i], and each cookie has a size s[j].\n A child i is satisfied if s[j] >= g[i]. The goal is to satisfy as many children as possible.\n\n Examples:\n >>> max_satisfied_children([1, 2, 3], [1, 1])\n 1\n >>> max_satisfied_children([1, 2], [1, 2, 3])\n 2\n >>> max_satisfied_children([1, 2, 3], [3])\n 1", "level": "easy"}
{"task_id": "Visual Basic/6", "prompt": "Module Module1\nFunction IslandPerimeter(ByVal grid As List(Of List(Of Integer))) As Integer\n' This function calculates the perimeter of an island in a 2D grid.\n' In the grid, 1 represents land and 0 represents water.\n' Cells are connected horizontally and vertically (not diagonally).\n' The grid is surrounded by water and contains exactly one island without any lakes.\n' The grid is a rectangle and its width and height do not exceed 100.\n'\n' Examples:\n' >>> island_perimeter([[0,1,0,0], [1,1,1,0], [0,1,0,0], [1,1,0,0]])\n' 16\n' >>> island_perimeter([[1]])\n' 4\n' >>> island_perimeter([[1,0]])\n' 4", "canonical_solution": "Dim perimeter As Integer = 0\nDim rows As Integer = grid.Count\nDim cols As Integer = If(rows > 0, grid(0).Count, 0)\n\nFor i As Integer = 0 To rows - 1\nFor j As Integer = 0 To cols - 1\nIf grid(i)(j) = 1 Then\nperimeter += 4\nIf i > 0 AndAlso grid(i - 1)(j) = 1 Then\nperimeter -= 2\nEnd If\nIf j > 0 AndAlso grid(i)(j - 1) = 1 Then\nperimeter -= 2\nEnd If\nEnd If\nNext\nNext\n\nReturn perimeter\nEnd Function", "test": "Sub Check()\nDebug.Assert(IslandPerimeter(New List(Of List(Of Integer)) From {New List(Of Integer) From {0, 1, 0, 0}, New List(Of Integer) From {1, 1, 1, 0}, New List(Of Integer) From {0, 1, 0, 0}, New List(Of Integer) From {1, 1, 0, 0}}) = 16)\nDebug.Assert(IslandPerimeter(New List(Of List(Of Integer)) From {New List(Of Integer) From {1}}) = 4)\nDebug.Assert(IslandPerimeter(New List(Of List(Of Integer)) From {New List(Of Integer) From {1, 0}}) = 4)\n\nConsole.WriteLine(\"Pass\")\nEnd Sub\n\nSub Main()\n' Test the function\nCheck()\nEnd Sub\nEnd Module", "entry_point": "IslandPerimeter", "signature": "Function IslandPerimeter(ByVal grid As List(Of List(Of Integer))) As Integer", "docstring": " This function calculates the perimeter of an island in a 2D grid.\n In the grid, 1 represents land and 0 represents water.\n Cells are connected horizontally and vertically (not diagonally).\n The grid is surrounded by water and contains exactly one island without any lakes.\n The grid is a rectangle and its width and height do not exceed 100.\n\n Examples:\n >>> island_perimeter([[0,1,0,0], [1,1,1,0], [0,1,0,0], [1,1,0,0]])\n 16\n >>> island_perimeter([[1]])\n 4\n >>> island_perimeter([[1,0]])\n 4", "instruction": "Write a Visual Basic function `Function IslandPerimeter(ByVal grid As List(Of List(Of Integer))) As Integer` to solve the following problem:\n This function calculates the perimeter of an island in a 2D grid.\n In the grid, 1 represents land and 0 represents water.\n Cells are connected horizontally and vertically (not diagonally).\n The grid is surrounded by water and contains exactly one island without any lakes.\n The grid is a rectangle and its width and height do not exceed 100.\n\n Examples:\n >>> island_perimeter([[0,1,0,0], [1,1,1,0], [0,1,0,0], [1,1,0,0]])\n 16\n >>> island_perimeter([[1]])\n 4\n >>> island_perimeter([[1,0]])\n 4", "level": "middle"}
{"task_id": "Visual Basic/7", "prompt": "Module Module1\nFunction MaxConsecutiveOnes(ByVal nums As List(Of Integer)) As Integer\n' This function calculates the maximum number of consecutive 1s in a binary array.\n' The array nums contains only 0s and 1s.\n'\n' Examples:\n' >>> max_consecutive_ones([1, 1, 0, 1, 1, 1])\n' 3\n' >>> max_consecutive_ones([1, 0, 1, 1, 0, 1])\n' 2\n' >>> max_consecutive_ones([0, 0, 0])\n' 0", "canonical_solution": "Dim maxCount As Integer = 0\nDim currentCount As Integer = 0\n\nFor Each num In nums\nIf num = 1 Then\ncurrentCount += 1\nmaxCount = Math.Max(maxCount, currentCount)\nElse\ncurrentCount = 0\nEnd If\nNext\n\nReturn maxCount\nEnd Function", "test": "Sub Check()\nDebug.Assert(MaxConsecutiveOnes(New List(Of Integer) From {1, 1, 0, 1, 1, 1}) = 3)\nDebug.Assert(MaxConsecutiveOnes(New List(Of Integer) From {1, 0, 1, 1, 0, 1}) = 2)\nDebug.Assert(MaxConsecutiveOnes(New List(Of Integer) From {0, 0, 0}) = 0)\nDebug.Assert(MaxConsecutiveOnes(New List(Of Integer) From {1, 1, 1, 1, 1}) = 5)\nDebug.Assert(MaxConsecutiveOnes(New List(Of Integer) From {}) = 0)\nDebug.Assert(MaxConsecutiveOnes(New List(Of Integer) From {0, 1, 1, 0, 1, 1, 1, 0, 1}) = 3)\n\nConsole.WriteLine(\"Pass\")\nEnd Sub\n\nSub Main()\n' Test the function\nCheck()\nEnd Sub\nEnd Module", "entry_point": "MaxConsecutiveOnes", "signature": "Function MaxConsecutiveOnes(ByVal nums As List(Of Integer)) As Integer", "docstring": " This function calculates the maximum number of consecutive 1s in a binary array.\n The array nums contains only 0s and 1s.\n\n Examples:\n >>> max_consecutive_ones([1, 1, 0, 1, 1, 1])\n 3\n >>> max_consecutive_ones([1, 0, 1, 1, 0, 1])\n 2\n >>> max_consecutive_ones([0, 0, 0])\n 0", "instruction": "Write a Visual Basic function `Function MaxConsecutiveOnes(ByVal nums As List(Of Integer)) As Integer` to solve the following problem:\n This function calculates the maximum number of consecutive 1s in a binary array.\n The array nums contains only 0s and 1s.\n\n Examples:\n >>> max_consecutive_ones([1, 1, 0, 1, 1, 1])\n 3\n >>> max_consecutive_ones([1, 0, 1, 1, 0, 1])\n 2\n >>> max_consecutive_ones([0, 0, 0])\n 0", "level": "easy"}
{"task_id": "Visual Basic/8", "prompt": "Module Module1\nFunction TotalPoisonedDuration(ByVal timeSeries As List(Of Integer), ByVal duration As Integer) As Integer\n' This function calculates the total duration that Ashe is poisoned by Teemo's attacks.\n' timeSeries is a non-decreasing array where timeSeries[i] is the time Teemo attacks Ashe.\n' duration is the number of seconds Ashe remains poisoned after each attack.\n' If Teemo attacks before the previous poison effect ends, the poison timer is reset.\n'\n' Examples:\n' >>> total_poisoned_duration([1, 4], 2)\n' 4\n' >>> total_poisoned_duration([1, 2], 2)\n' 3\n' >>> total_poisoned_duration([1, 2, 3, 4, 5], 5)\n' 9", "canonical_solution": "Dim totalDuration As Integer = 0\nDim endTime As Integer = 0\n\nFor Each attackTime In timeSeries\nIf attackTime >= endTime Then\ntotalDuration += duration\nElse\ntotalDuration += attackTime + duration - endTime\nEnd If\nendTime = attackTime + duration\nNext\n\nReturn totalDuration\nEnd Function", "test": "Sub Check()\nDebug.Assert(TotalPoisonedDuration(New List(Of Integer) From {1, 4}, 2) = 4)\nDebug.Assert(TotalPoisonedDuration(New List(Of Integer) From {1, 2}, 2) = 3)\nDebug.Assert(TotalPoisonedDuration(New List(Of Integer) From {1, 2, 3, 4, 5}, 5) = 9)\nDebug.Assert(TotalPoisonedDuration(New List(Of Integer) From {}, 5) = 0)\nDebug.Assert(TotalPoisonedDuration(New List(Of Integer) From {1, 2, 3, 10, 11}, 4) = 11)\nDebug.Assert(TotalPoisonedDuration(New List(Of Integer) From {1, 1, 1, 1}, 3) = 3)\n\nConsole.WriteLine(\"Pass\")\nEnd Sub\nSub Main()\n' Test the function\nCheck()\nEnd Sub\nEnd Module", "entry_point": "TotalPoisonedDuration", "signature": "Function TotalPoisonedDuration(ByVal timeSeries As List(Of Integer), ByVal duration As Integer) As Integer", "docstring": " This function calculates the total duration that Ashe is poisoned by Teemos attacks.\n timeSeries is a non-decreasing array where timeSeries[i] is the time Teemo attacks Ashe.\n duration is the number of seconds Ashe remains poisoned after each attack.\n If Teemo attacks before the previous poison effect ends, the poison timer is reset.\n\n Examples:\n >>> total_poisoned_duration([1, 4], 2)\n 4\n >>> total_poisoned_duration([1, 2], 2)\n 3\n >>> total_poisoned_duration([1, 2, 3, 4, 5], 5)\n 9", "instruction": "Write a Visual Basic function `Function TotalPoisonedDuration(ByVal timeSeries As List(Of Integer), ByVal duration As Integer) As Integer` to solve the following problem:\n This function calculates the total duration that Ashe is poisoned by Teemos attacks.\n timeSeries is a non-decreasing array where timeSeries[i] is the time Teemo attacks Ashe.\n duration is the number of seconds Ashe remains poisoned after each attack.\n If Teemo attacks before the previous poison effect ends, the poison timer is reset.\n\n Examples:\n >>> total_poisoned_duration([1, 4], 2)\n 4\n >>> total_poisoned_duration([1, 2], 2)\n 3\n >>> total_poisoned_duration([1, 2, 3, 4, 5], 5)\n 9", "level": "easy"}
{"task_id": "Visual Basic/9", "prompt": "Module Module1\nFunction NextGreaterElement(ByVal nums1 As List(Of Integer), ByVal nums2 As List(Of Integer)) As List(Of Integer)\n' This function finds the next greater element for each element in nums1 from nums2.\n' For each element x in nums1, the next greater element is the first element greater than x\n' to the right of x in nums2. If no such element exists, the answer is -1.\n'\n' Examples:\n' >>> next_greater_element([4,1,2], [1,3,4,2])\n' [-1,3,-1]\n' >>> next_greater_element([2,4], [1,2,3,4])\n' [3,-1]", "canonical_solution": "Dim ans As New List(Of Integer)\nDim nextGreaterMap As New Dictionary(Of Integer, Integer)\n\n' Create a map for each element in nums2 and its next greater element\nDim stack As New Stack(Of Integer)\nFor Each num In nums2\nWhile stack.Count > 0 AndAlso stack.Peek() < num\nnextGreaterMap(stack.Pop()) = num\nEnd While\nstack.Push(num)\nNext \n\n' Find the next greater element for each element in nums1\nFor Each num In nums1\nIf nextGreaterMap.ContainsKey(num) Then\nans.Add(nextGreaterMap(num))\nElse\nans.Add(-1)\nEnd If\nNext\n\nReturn ans\nEnd Function", "test": "Sub Check()\nDebug.Assert(NextGreaterElement(New List(Of Integer) From {4, 1, 2}, New List(Of Integer) From {1, 3, 4, 2}).SequenceEqual(New List(Of Integer) From {-1, 3, -1}))\nDebug.Assert(NextGreaterElement(New List(Of Integer) From {2, 4}, New List(Of Integer) From {1, 2, 3, 4}).SequenceEqual(New List(Of Integer) From {3, -1}))\nDebug.Assert(NextGreaterElement(New List(Of Integer) From {1, 3}, New List(Of Integer) From {3, 1}).SequenceEqual(New List(Of Integer) From {-1, -1}))\nDebug.Assert(NextGreaterElement(New List(Of Integer) From {}, New List(Of Integer) From {1, 2, 3, 4}).Count = 0)\nDebug.Assert(NextGreaterElement(New List(Of Integer) From {1, 2}, New List(Of Integer) From {1, 2, 3}).SequenceEqual(New List(Of Integer) From {2, 3}))\n\nConsole.WriteLine(\"Pass\")\nEnd Sub\n\nSub Main()\n' Test the function\nCheck()\nEnd Sub\nEnd Module", "entry_point": "NextGreaterElement", "signature": "Function NextGreaterElement(ByVal nums1 As List(Of Integer), ByVal nums2 As List(Of Integer)) As List(Of Integer)", "docstring": " This function finds the next greater element for each element in nums1 from nums2.\n For each element x in nums1, the next greater element is the first element greater than x\n to the right of x in nums2. If no such element exists, the answer is -1.\n\n Examples:\n >>> next_greater_element([4,1,2], [1,3,4,2])\n [-1,3,-1]\n >>> next_greater_element([2,4], [1,2,3,4])\n [3,-1]", "instruction": "Write a Visual Basic function `Function NextGreaterElement(ByVal nums1 As List(Of Integer), ByVal nums2 As List(Of Integer)) As List(Of Integer)` to solve the following problem:\n This function finds the next greater element for each element in nums1 from nums2.\n For each element x in nums1, the next greater element is the first element greater than x\n to the right of x in nums2. If no such element exists, the answer is -1.\n\n Examples:\n >>> next_greater_element([4,1,2], [1,3,4,2])\n [-1,3,-1]\n >>> next_greater_element([2,4], [1,2,3,4])\n [3,-1]", "level": "hard"}
{"task_id": "Visual Basic/10", "prompt": "Module Module1\nFunction FindWordsSameRow(ByVal words As List(Of String)) As List(Of String)\n' This function returns words that can be typed using letters from the same row of an American keyboard.\n' The keyboard has three rows of characters:\n' 1st row: \"qwertyuiop\"\n' 2nd row: \"asdfghjkl\"\n' 3rd row: \"zxcvbnm\"\n'\n' Examples:\n' >>> find_words_same_row([\"Hello\", \"Alaska\", \"Dad\", \"Peace\"])\n' [\"Alaska\", \"Dad\"]\n' >>> find_words_same_row([\"omk\"])\n' []\n' >>> find_words_same_row([\"adsdf\", \"sfd\"])\n' [\"adsdf\", \"sfd\"]", "canonical_solution": "Dim rows As New Dictionary(Of Char, Integer) From { {\"q\", 1}, {\"w\", 1}, {\"e\", 1}, {\"r\", 1}, {\"t\", 1}, {\"y\", 1}, {\"u\", 1}, {\"i\", 1}, {\"o\", 1}, {\"p\", 1},{\"a\", 2}, {\"s\", 2}, {\"d\", 2}, {\"f\", 2}, {\"g\", 2}, {\"h\", 2}, {\"j\", 2}, {\"k\", 2}, {\"l\", 2}, {\"z\", 3}, {\"x\", 3}, {\"c\", 3}, {\"v\", 3}, {\"b\", 3}, {\"n\", 3}, {\"m\", 3}\n}\nDim result As New List(Of String)\n\nFor Each word In words\nDim lowerWord As String = word.ToLower()\nDim firstRow As Integer = rows(lowerWord(0))\nDim canType As Boolean = True\n\nFor Each ch In lowerWord\nIf rows(ch) <> firstRow Then\ncanType = False\nExit For\nEnd If\nNext\n\nIf canType Then\nresult.Add(word)\nEnd If\nNext\n\nReturn result\nEnd Function", "test": "Sub Check()\nDebug.Assert(FindWordsSameRow(New List(Of String) From {\"Hello\", \"Alaska\", \"Dad\", \"Peace\"}).SequenceEqual(New List(Of String) From {\"Alaska\", \"Dad\"}))\nDebug.Assert(FindWordsSameRow(New List(Of String) From {\"omk\"}).Count = 0)\nDebug.Assert(FindWordsSameRow(New List(Of String) From {\"adsdf\", \"sfd\"}).SequenceEqual(New List(Of String) From {\"adsdf\", \"sfd\"}))\n\nConsole.WriteLine(\"Pass\")\nEnd Sub\n\nSub Main()\n' Test the function\nCheck()\nEnd Sub\nEnd Module", "entry_point": "FindWordsSameRow", "signature": "Function FindWordsSameRow(ByVal words As List(Of String)) As List(Of String)", "docstring": " This function returns words that can be typed using letters from the same row of an American keyboard.\n The keyboard has three rows of characters:\n 1st row: \"qwertyuiop\"\n 2nd row: \"asdfghjkl\"\n 3rd row: \"zxcvbnm\"\n\n Examples:\n >>> find_words_same_row([\"Hello\", \"Alaska\", \"Dad\", \"Peace\"])\n [\"Alaska\", \"Dad\"]\n >>> find_words_same_row([\"omk\"])\n []\n >>> find_words_same_row([\"adsdf\", \"sfd\"])\n [\"adsdf\", \"sfd\"]", "instruction": "Write a Visual Basic function `Function FindWordsSameRow(ByVal words As List(Of String)) As List(Of String)` to solve the following problem:\n This function returns words that can be typed using letters from the same row of an American keyboard.\n The keyboard has three rows of characters:\n 1st row: \"qwertyuiop\"\n 2nd row: \"asdfghjkl\"\n 3rd row: \"zxcvbnm\"\n\n Examples:\n >>> find_words_same_row([\"Hello\", \"Alaska\", \"Dad\", \"Peace\"])\n [\"Alaska\", \"Dad\"]\n >>> find_words_same_row([\"omk\"])\n []\n >>> find_words_same_row([\"adsdf\", \"sfd\"])\n [\"adsdf\", \"sfd\"]", "level": "hard"}
{"task_id": "Visual Basic/11", "prompt": "Module Module1\nFunction MaxSumOfMinPairs(ByVal nums As List(Of Integer)) As Integer\n' This function maximizes the sum of min(ai, bi) for pairs in an array of 2n integers.\n' The array is paired into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum\n' of min(ai, bi) for all i from 1 to n is maximized.\n'\n' Examples:\n' >>> max_sum_of_min_pairs([1,4,3,2])\n' 4\n' >>> max_sum_of_min_pairs([6,2,6,5,1,2])\n' 9", "canonical_solution": "nums.Sort()\n\nDim maxSum As Integer = 0\n\n' Sum the elements at even indices\nFor i As Integer = 0 To nums.Count - 1 Step 2\nmaxSum += nums(i)\nNext\n\nReturn maxSum\nEnd Function", "test": "Sub Check()\nDebug.Assert(MaxSumOfMinPairs(New List(Of Integer) From {1, 4, 3, 2}) = 4)\nDebug.Assert(MaxSumOfMinPairs(New List(Of Integer) From {6, 2, 6, 5, 1, 2}) = 9)\nDebug.Assert(MaxSumOfMinPairs(New List(Of Integer) From {1, 2, 3, 4, 5, 6}) = 9)\nDebug.Assert(MaxSumOfMinPairs(New List(Of Integer) From {}) = 0)\nDebug.Assert(MaxSumOfMinPairs(New List(Of Integer) From {7, 3, 1, 0, 0, 6}) = 7)\n\nConsole.WriteLine(\"Pass\")\nEnd Sub\n\nSub Main()\n' Test the function\nCheck()\nEnd Sub\nEnd Module", "entry_point": "MaxSumOfMinPairs", "signature": "Function MaxSumOfMinPairs(ByVal nums As List(Of Integer)) As Integer", "docstring": " This function maximizes the sum of min(ai, bi) for pairs in an array of 2n integers.\n The array is paired into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum\n of min(ai, bi) for all i from 1 to n is maximized.\n\n Examples:\n >>> max_sum_of_min_pairs([1,4,3,2])\n 4\n >>> max_sum_of_min_pairs([6,2,6,5,1,2])\n 9", "instruction": "Write a Visual Basic function `Function MaxSumOfMinPairs(ByVal nums As List(Of Integer)) As Integer` to solve the following problem:\n This function maximizes the sum of min(ai, bi) for pairs in an array of 2n integers.\n The array is paired into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum\n of min(ai, bi) for all i from 1 to n is maximized.\n\n Examples:\n >>> max_sum_of_min_pairs([1,4,3,2])\n 4\n >>> max_sum_of_min_pairs([6,2,6,5,1,2])\n 9", "level": "easy"}
{"task_id": "Visual Basic/12", "prompt": "Module Module1\nFunction MaxCandyTypes(ByVal candyType As List(Of Integer)) As Integer\n' This function calculates the maximum number of different candy types Alice can eat,\n' given she can only eat half of the total candies.\n' The input candyType is an array where candyType[i] represents the type of the i-th candy.\n'\n' Examples:\n' >>> max_candy_types([1,1,2,2,3,3])\n' 3\n' >>> max_candy_types([1,1,2,3])\n' 2\n' >>> max_candy_types([6,6,6,6])\n' 1", "canonical_solution": "Dim totalCandies As Integer = candyType.Count\nDim uniqueCandies As Integer = New HashSet(Of Integer)(candyType).Count\n\nReturn Math.Min(uniqueCandies, totalCandies \\ 2)\nEnd Function", "test": "Sub Check()\nDebug.Assert(MaxCandyTypes(New List(Of Integer) From {1, 1, 2, 2, 3, 3}) = 3)\nDebug.Assert(MaxCandyTypes(New List(Of Integer) From {1, 1, 2, 3}) = 2)\nDebug.Assert(MaxCandyTypes(New List(Of Integer) From {6, 6, 6, 6}) = 1)\nDebug.Assert(MaxCandyTypes(New List(Of Integer) From {}) = 0)\nDebug.Assert(MaxCandyTypes(New List(Of Integer) From {1, 2, 3, 4, 5, 6, 7, 8}) = 4)\n\nConsole.WriteLine(\"Pass\")\nEnd Sub\n\nSub Main()\n' Test the function\nCheck()\nEnd Sub\nEnd Module", "entry_point": "MaxCandyTypes", "signature": "Function MaxCandyTypes(ByVal candyType As List(Of Integer)) As Integer", "docstring": " This function calculates the maximum number of different candy types Alice can eat,\n given she can only eat half of the total candies.\n The input candyType is an array where candyType[i] represents the type of the i-th candy.\n\n Examples:\n >>> max_candy_types([1,1,2,2,3,3])\n 3\n >>> max_candy_types([1,1,2,3])\n 2\n >>> max_candy_types([6,6,6,6])\n 1", "instruction": "Write a Visual Basic function `Function MaxCandyTypes(ByVal candyType As List(Of Integer)) As Integer` to solve the following problem:\n This function calculates the maximum number of different candy types Alice can eat,\n given she can only eat half of the total candies.\n The input candyType is an array where candyType[i] represents the type of the i-th candy.\n\n Examples:\n >>> max_candy_types([1,1,2,2,3,3])\n 3\n >>> max_candy_types([1,1,2,3])\n 2\n >>> max_candy_types([6,6,6,6])\n 1", "level": "easy"}
{"task_id": "Visual Basic/13", "prompt": "Module Module1\nFunction MaximizeMinimumDistance(ByVal positions As List(Of Integer), ByVal cows As Integer) As Integer\n' This function finds the largest minimum distance that can be maintained between any two cows\n' given a list of positions of cowsheds and the number of cows. The positions list contains\n' integers representing the location of each cowshed along a straight line.\n' \n' Args:\n' positions (List(Of Integer)): A list of integers representing the positions of cowsheds.\n' cows (Integer): The number of cows to be placed in the cowsheds.\n'\n' Returns:\n' Integer: The maximum possible minimum distance between any two cows.\n'\n' Examples:\n' >>> MaximizeMinimumDistance(New List(Of Integer) From {1, 2, 4, 8, 9}, 3)\n' 3\n' >>> MaximizeMinimumDistance(New List(Of Integer) From {1, 3, 5, 7, 9, 11}, 4)\n' 2", "canonical_solution": "positions.Sort()\nDim left As Integer = 1\nDim right As Integer = positions(positions.Count - 1) - positions(0)\nDim result As Integer = 0\n\nWhile left <= right\nDim mid As Integer = left + (right - left) \\ 2\nIf CanPlaceCows(positions, cows, mid) Then\nresult = mid\nleft = mid + 1\nElse\nright = mid - 1\nEnd If\nEnd While\n\nReturn result\nEnd Function\n\nPrivate Function CanPlaceCows(ByVal positions As List(Of Integer), ByVal cows As Integer, ByVal minDist As Integer) As Boolean\nDim count As Integer = 1\nDim lastPos As Integer = positions(0)\n\nFor i As Integer = 1 To positions.Count - 1\nIf positions(i) - lastPos >= minDist Then\ncount += 1\nlastPos = positions(i)\nEnd If\nIf count = cows Then\nReturn True\nEnd If\nNext\n\nReturn False\nEnd Function", "test": "Sub Check(ByVal testFunction As Func(Of List(Of Integer), Integer, Integer))\nDebug.Assert(testFunction(New List(Of Integer) From {1, 3, 5, 7, 9, 11}, 2) = 10)\nDebug.Assert(testFunction(New List(Of Integer) From {1, 2, 4, 8, 9}, 3) = 3)\nDebug.Assert(testFunction(New List(Of Integer) From {1, 2, 3, 4, 5}, 3) = 2)\nDebug.Assert(testFunction(New List(Of Integer) From {1, 5, 9, 14, 20}, 4) = 5)\nDebug.Assert(testFunction(New List(Of Integer) From {10, 20, 30, 40, 50}, 2) = 40)\nDebug.Assert(testFunction(New List(Of Integer) From {5, 6, 7, 8, 9, 10}, 3) = 2)\nDebug.Assert(testFunction(New List(Of Integer) From {3, 4, 5, 6, 10, 12}, 4) = 2)\n\nConsole.WriteLine(\"All test cases passed\")\nEnd Sub\n\nSub Main()\n' Run test function\nCheck(AddressOf MaximizeMinimumDistance)\nEnd Sub\nEnd Module", "entry_point": "MaximizeMinimumDistance", "signature": "Function MaximizeMinimumDistance(ByVal positions As List(Of Integer), ByVal cows As Integer) As Integer", "docstring": " This function finds the largest minimum distance that can be maintained between any two cows\n given a list of positions of cowsheds and the number of cows. The positions list contains\n integers representing the location of each cowshed along a straight line.\n \n Args:\n positions (List(Of Integer)): A list of integers representing the positions of cowsheds.\n cows (Integer): The number of cows to be placed in the cowsheds.\n\n Returns:\n Integer: The maximum possible minimum distance between any two cows.\n\n Examples:\n >>> MaximizeMinimumDistance(New List(Of Integer) From {1, 2, 4, 8, 9}, 3)\n 3\n >>> MaximizeMinimumDistance(New List(Of Integer) From {1, 3, 5, 7, 9, 11}, 4)\n 2", "instruction": "Write a Visual Basic function `Function MaximizeMinimumDistance(ByVal positions As List(Of Integer), ByVal cows As Integer) As Integer` to solve the following problem:\n This function finds the largest minimum distance that can be maintained between any two cows\n given a list of positions of cowsheds and the number of cows. The positions list contains\n integers representing the location of each cowshed along a straight line.\n \n Args:\n positions (List(Of Integer)): A list of integers representing the positions of cowsheds.\n cows (Integer): The number of cows to be placed in the cowsheds.\n\n Returns:\n Integer: The maximum possible minimum distance between any two cows.\n\n Examples:\n >>> MaximizeMinimumDistance(New List(Of Integer) From {1, 2, 4, 8, 9}, 3)\n 3\n >>> MaximizeMinimumDistance(New List(Of Integer) From {1, 3, 5, 7, 9, 11}, 4)\n 2", "level": "hard"}
{"task_id": "Visual Basic/14", "prompt": "Module Module1\nFunction ConvertToLowercase(ByVal inputString As String) As String\n' This function takes a string and converts all lowercase letters in the string to uppercase.\n' It does not modify digits or special characters.\n' Examples:\n' >>> ConvertToLowercase(\"HelloWorld123!\")\n' \"HELLOWORLD123!\"", "canonical_solution": "Return inputString.ToUpper()\nEnd Function", "test": "Sub Check(ByVal testFunction As Func(Of String, String))\nDebug.Assert(testFunction(\"VisualBasic4\") = \"VISUALBASIC4\")\nDebug.Assert(testFunction(\"Test123!\") = \"TEST123!\")\nDebug.Assert(testFunction(\"helloWorld\") = \"HELLOWORLD\")\nDebug.Assert(testFunction(\"BUAA-4\") = \"BUAA-4\")\n\nConsole.WriteLine(\"All tests passed successfully!\")\nEnd Sub\n\nSub Main()\n' Test the function\nCheck(AddressOf ConvertToLowercase)\nEnd Sub\nEnd Module", "entry_point": "ConvertToLowercase", "signature": "Function ConvertToLowercase(ByVal inputString As String) As String", "docstring": " This function takes a string and converts all lowercase letters in the string to uppercase.\n It does not modify digits or special characters.\n Examples:\n >>> ConvertToLowercase(\"HelloWorld123!\")\n \"HELLOWORLD123!\"", "instruction": "Write a Visual Basic function `Function ConvertToLowercase(ByVal inputString As String) As String` to solve the following problem:\n This function takes a string and converts all lowercase letters in the string to uppercase.\n It does not modify digits or special characters.\n Examples:\n >>> ConvertToLowercase(\"HelloWorld123!\")\n \"HELLOWORLD123!\"", "level": "easy"}
{"task_id": "Visual Basic/15", "prompt": "Module Module1\nFunction TrianglePerimeter(ByVal x1 As Double, ByVal y1 As Double, ByVal x2 As Double, ByVal y2 As Double, ByVal x3 As Double, ByVal y3 As Double) As Double\n' Calculates the perimeter of a triangle given the coordinates of its vertices.\n' The distance between two points (x1, y1) and (x2, y2) is calculated using the formula:\n' distance = Sqrt((x2 - x1)^2 + (y2 - y1)^2)\n' The perimeter is the sum of the distances of all three sides.\n'\n' Example 1:\n' >>> TrianglePerimeter(0, 0, 0, 4, 3, 0)\n' 12.0\n'\n' Example 2:\n' >>> TrianglePerimeter(-1, -1, 1, -1, 0, 1)\n' 6.47", "canonical_solution": "Dim side1 As Double = Math.Sqrt((x2 - x1) ^ 2 + (y2 - y1) ^ 2)\nDim side2 As Double = Math.Sqrt((x3 - x2) ^ 2 + (y3 - y2) ^ 2)\nDim side3 As Double = Math.Sqrt((x1 - x3) ^ 2 + (y1 - y3) ^ 2)\nReturn Math.Round((side1 + side2 + side3), 2)\nEnd Function", "test": "Sub Main()\n' Test the TrianglePerimeter function\nDebug.Assert(TrianglePerimeter(0, 0, 0, 4, 3, 0) = 12.0)\nDebug.Assert(TrianglePerimeter(-1, -1, 1, -1, 0, 1) = 6.47)\nDebug.Assert(TrianglePerimeter(1, 2, 3, 4, 5, 6) = 11.31)\nDebug.Assert(TrianglePerimeter(2, 2, 2, 5, 5, 2) = 10.24)\nDebug.Assert(TrianglePerimeter(0, 0, 1, 0, 0, 1) = 3.41)\nDebug.Assert(TrianglePerimeter(-2, -3, 4, -3, 1, 2) = 17.66)\nDebug.Assert(TrianglePerimeter(0.5, 0.5, 2.5, 0.5, 1.5, 2) = 5.61)\n\nConsole.WriteLine(\"All test cases passed\")\nEnd Sub\n\nEnd Module", "entry_point": "TrianglePerimeter", "signature": "Function TrianglePerimeter(ByVal x1 As Double, ByVal y1 As Double, ByVal x2 As Double, ByVal y2 As Double, ByVal x3 As Double, ByVal y3 As Double) As Double", "docstring": " Calculates the perimeter of a triangle given the coordinates of its vertices.\n The distance between two points (x1, y1) and (x2, y2) is calculated using the formula:\n distance = Sqrt((x2 - x1)^2 + (y2 - y1)^2)\n The perimeter is the sum of the distances of all three sides.\n\n Example 1:\n >>> TrianglePerimeter(0, 0, 0, 4, 3, 0)\n 12.0\n\n Example 2:\n >>> TrianglePerimeter(-1, -1, 1, -1, 0, 1)\n 6.47", "instruction": "Write a Visual Basic function `Function TrianglePerimeter(ByVal x1 As Double, ByVal y1 As Double, ByVal x2 As Double, ByVal y2 As Double, ByVal x3 As Double, ByVal y3 As Double) As Double` to solve the following problem:\n Calculates the perimeter of a triangle given the coordinates of its vertices.\n The distance between two points (x1, y1) and (x2, y2) is calculated using the formula:\n distance = Sqrt((x2 - x1)^2 + (y2 - y1)^2)\n The perimeter is the sum of the distances of all three sides.\n\n Example 1:\n >>> TrianglePerimeter(0, 0, 0, 4, 3, 0)\n 12.0\n\n Example 2:\n >>> TrianglePerimeter(-1, -1, 1, -1, 0, 1)\n 6.47", "level": "easy"}
{"task_id": "Visual Basic/16", "prompt": "Module Module1\nFunction CountLeapYears(ByVal startYear As Integer, ByVal endYear As Integer) As Integer\n' Counts the number of leap years in the given range [startYear, endYear].\n' A year is a leap year if it is divisible by 4 but not by 100, or if it is divisible by 400.\n' Example:\n' >>> CountLeapYears(2000, 2020)\n' 6\n' >>> CountLeapYears(1900, 2000)\n' 25", "canonical_solution": "Dim leapYearCount As Integer = 0\nFor year As Integer = startYear To endYear\nIf (year Mod 4 = 0 AndAlso year Mod 100 <> 0) OrElse (year Mod 400 = 0) Then\nleapYearCount += 1\nEnd If\nNext\nReturn leapYearCount\nEnd Function", "test": "Sub Check(ByVal testFunction As Func(Of Integer, Integer, Integer))\nDebug.Assert(testFunction(2000, 2020) = 6) ' Includes 2000, 2004, 2008, 2012, 2016, 2020\nDebug.Assert(testFunction(1900, 2000) = 25) ' Includes 1904, 1908, ..., 1996, 2000\nDebug.Assert(testFunction(1980, 1990) = 3) ' Includes 1980, 1984, 1988\nDebug.Assert(testFunction(1800, 1900) = 24) ' Includes 1804, 1808, ..., 1896\nDebug.Assert(testFunction(1600, 1700) = 25) ' Includes 1600, 1604, ..., 1696\n\nConsole.WriteLine(\"pass\")\nEnd Sub\n\nSub Main()\n' Test the function\nCheck(AddressOf CountLeapYears)\nEnd Sub\nEnd Module", "entry_point": "CountLeapYears", "signature": "Function CountLeapYears(ByVal startYear As Integer, ByVal endYear As Integer) As Integer", "docstring": " Counts the number of leap years in the given range [startYear, endYear].\n A year is a leap year if it is divisible by 4 but not by 100, or if it is divisible by 400.\n Example:\n >>> CountLeapYears(2000, 2020)\n 6\n >>> CountLeapYears(1900, 2000)\n 25", "instruction": "Write a Visual Basic function `Function CountLeapYears(ByVal startYear As Integer, ByVal endYear As Integer) As Integer` to solve the following problem:\n Counts the number of leap years in the given range [startYear, endYear].\n A year is a leap year if it is divisible by 4 but not by 100, or if it is divisible by 400.\n Example:\n >>> CountLeapYears(2000, 2020)\n 6\n >>> CountLeapYears(1900, 2000)\n 25", "level": "easy"}
{"task_id": "Visual Basic/17", "prompt": "Module Module1\nFunction CalculatePeaches(ByVal days As Integer) As Integer\n' The function's purpose is to calculate the number of peaches a monkey originally bought, given the pattern of its eating habit and the remaining peaches after a certain number of days. The monkey eats half of the peaches plus one extra each day, and only one peach is left on the last day.\n\n' Examples:\n\n' CalculatePeaches(3) should return 10, as the monkey would eat 5 (half of 10 + 1) on the first day, 2 on the second day (half of 5 + 1), leaving 1 for the third day.\n' CalculatePeaches(5) should return 46, as the pattern of eating would result in 1 peach left on the 5th day.", "canonical_solution": "Dim peaches As Integer = 1 ' Start with 1 peach on the last day\nFor i As Integer = 1 To days - 1\npeaches = (peaches + 1) * 2 ' Reverse the eating process\nNext\nReturn peaches\nEnd Function", "test": "Sub Main()\n    ' Test the CalculatePeaches function with various scenarios\n    Debug.Assert(CalculatePeaches(3) = 10)\n    Debug.Assert(CalculatePeaches(5) = 46)\n    Debug.Assert(CalculatePeaches(6) = 94)\n    Debug.Assert(CalculatePeaches(2) = 4)\n    Debug.Assert(CalculatePeaches(7) = 190)\n\n    Console.WriteLine(\"All test cases passed\")\nEnd Sub\nEnd Module", "entry_point": "CalculatePeaches", "signature": "Function CalculatePeaches(ByVal days As Integer) As Integer", "docstring": " The functions purpose is to calculate the number of peaches a monkey originally bought, given the pattern of its eating habit and the remaining peaches after a certain number of days. The monkey eats half of the peaches plus one extra each day, and only one peach is left on the last day.\n\n Examples:\n\n CalculatePeaches(3) should return 10, as the monkey would eat 5 (half of 10 + 1) on the first day, 2 on the second day (half of 5 + 1), leaving 1 for the third day.\n CalculatePeaches(5) should return 46, as the pattern of eating would result in 1 peach left on the 5th day.", "instruction": "Write a Visual Basic function `Function CalculatePeaches(ByVal days As Integer) As Integer` to solve the following problem:\n The functions purpose is to calculate the number of peaches a monkey originally bought, given the pattern of its eating habit and the remaining peaches after a certain number of days. The monkey eats half of the peaches plus one extra each day, and only one peach is left on the last day.\n\n Examples:\n\n CalculatePeaches(3) should return 10, as the monkey would eat 5 (half of 10 + 1) on the first day, 2 on the second day (half of 5 + 1), leaving 1 for the third day.\n CalculatePeaches(5) should return 46, as the pattern of eating would result in 1 peach left on the 5th day.", "level": "easy"}
{"task_id": "Visual Basic/18", "prompt": "Module Module1\nFunction MaxRectangleArea(ByVal lengths As List(Of Integer)) As Integer\n' Calculates the maximum rectangle area that can be formed from four given lengths\n' representing the sides of a path walked by Kornislav. The path consists of four\n' segments where each segment is one of the four given lengths and each turn is 90 degrees.\n' The function assumes that the input is a list of exactly four positive integers.\n' Examples:\n' >>> max_rectangle_area([1, 1, 1, 1])\n' 1\n' >>> max_rectangle_area([2, 5, 3, 5])\n' 10", "canonical_solution": "lengths.Sort()\nReturn lengths(0) * lengths(2)\nEnd Function", "test": "Sub Check(ByVal testFunction As Func(Of List(Of Integer), Integer))\n' Test with a square\nDebug.Assert(testFunction(New List(Of Integer) From {1, 1, 1, 1}) = 1)\n' Test with a rectangle\nDebug.Assert(testFunction(New List(Of Integer) From {2, 5, 3, 5}) = 10)\n' Test with different lengths\nDebug.Assert(testFunction(New List(Of Integer) From {4, 7, 4, 5}) = 20)\n' Test with one side very small\nDebug.Assert(testFunction(New List(Of Integer) From {1, 2, 10, 10}) = 10)\n' Test with all sides different\nDebug.Assert(testFunction(New List(Of Integer) From {2, 3, 6, 7}) = 12)\n\nConsole.WriteLine(\"pass\")\nEnd Sub\nSub Main()\n' Testing the function\nCheck(AddressOf MaxRectangleArea)\nEnd Sub\nEnd Module", "entry_point": "MaxRectangleArea", "signature": "Function MaxRectangleArea(ByVal lengths As List(Of Integer)) As Integer", "docstring": " Calculates the maximum rectangle area that can be formed from four given lengths\n representing the sides of a path walked by Kornislav. The path consists of four\n segments where each segment is one of the four given lengths and each turn is 90 degrees.\n The function assumes that the input is a list of exactly four positive integers.\n Examples:\n >>> max_rectangle_area([1, 1, 1, 1])\n 1\n >>> max_rectangle_area([2, 5, 3, 5])\n 10", "instruction": "Write a Visual Basic function `Function MaxRectangleArea(ByVal lengths As List(Of Integer)) As Integer` to solve the following problem:\n Calculates the maximum rectangle area that can be formed from four given lengths\n representing the sides of a path walked by Kornislav. The path consists of four\n segments where each segment is one of the four given lengths and each turn is 90 degrees.\n The function assumes that the input is a list of exactly four positive integers.\n Examples:\n >>> max_rectangle_area([1, 1, 1, 1])\n 1\n >>> max_rectangle_area([2, 5, 3, 5])\n 10", "level": "easy"}
{"task_id": "Visual Basic/19", "prompt": "Module Module1\nFunction MaxKangarooMoves(ByVal positions As List(Of Integer)) As Integer\n' Calculates the maximum number of moves three kangaroos can make on a number line,\n' such that no two kangaroos occupy the same position and only outer kangaroos can move.\n' Kangaroos can only move to a position between the other two kangaroos.\n' positions: List of three integers representing the initial positions of the kangaroos.\n' Returns an integer representing the maximum number of moves.\n' Example:\n' >>> max_kangaroo_moves({1, 4, 7})\n' 2\n' >>> max_kangaroo_moves({3, 5, 8})\n' 2", "canonical_solution": "Dim maxMoves As Integer = 0\n' Sorting the positions for easier calculation\npositions.Sort()\n' Calculating the number of possible moves for each side\nDim leftMoves As Integer = positions(1) - positions(0) - 1\nDim rightMoves As Integer = positions(2) - positions(1) - 1\n' The maximum number of moves is the sum of moves from both sides, \n' minus the side with the least possible moves (as they will meet in the middle)\nmaxMoves = leftMoves + rightMoves - Math.Min(leftMoves, rightMoves)\nReturn maxMoves\nEnd Function", "test": "Sub Check(ByVal testFunction As Func(Of List(Of Integer), Integer))\nDebug.Assert(testFunction(New List(Of Integer) From {1, 4, 7}) = 2)\nDebug.Assert(testFunction(New List(Of Integer) From {3, 5, 8}) = 2)\nDebug.Assert(testFunction(New List(Of Integer) From {2, 3, 6}) = 2)\nDebug.Assert(testFunction(New List(Of Integer) From {1, 2, 5}) = 2)\nDebug.Assert(testFunction(New List(Of Integer) From {10, 13, 19}) = 5)\nDebug.Assert(testFunction(New List(Of Integer) From {4, 7, 10}) = 2)\nDebug.Assert(testFunction(New List(Of Integer) From {5, 9, 12}) = 3)\n\nConsole.WriteLine(\"pass\")\nEnd Sub\nSub Main()\n' Testing the function\nCheck(AddressOf MaxKangarooMoves)\nEnd Sub\nEnd Module", "entry_point": "MaxKangarooMoves", "signature": "Function MaxKangarooMoves(ByVal positions As List(Of Integer)) As Integer", "docstring": " Calculates the maximum number of moves three kangaroos can make on a number line,\n such that no two kangaroos occupy the same position and only outer kangaroos can move.\n Kangaroos can only move to a position between the other two kangaroos.\n positions: List of three integers representing the initial positions of the kangaroos.\n Returns an integer representing the maximum number of moves.\n Example:\n >>> max_kangaroo_moves({1, 4, 7})\n 2\n >>> max_kangaroo_moves({3, 5, 8})\n 2", "instruction": "Write a Visual Basic function `Function MaxKangarooMoves(ByVal positions As List(Of Integer)) As Integer` to solve the following problem:\n Calculates the maximum number of moves three kangaroos can make on a number line,\n such that no two kangaroos occupy the same position and only outer kangaroos can move.\n Kangaroos can only move to a position between the other two kangaroos.\n positions: List of three integers representing the initial positions of the kangaroos.\n Returns an integer representing the maximum number of moves.\n Example:\n >>> max_kangaroo_moves({1, 4, 7})\n 2\n >>> max_kangaroo_moves({3, 5, 8})\n 2", "level": "middle"}
{"task_id": "Visual Basic/20", "prompt": "Module Module1\nFunction MaxTeams(ByVal femalePlayers As Integer, ByVal malePlayers As Integer, ByVal internships As Integer) As Integer\n' Calculates the maximum number of teams that can be formed given the number of female and\n' male players, considering some players might be sent for internships. Each team consists\n' of 1 male and 2 females.\n' >>> MaxTeams(6, 3, 2)\n' 2\n' >>> MaxTeams(10, 5, 4)\n' 3\n' >>> MaxTeams(5, 3, 1)\n' 2", "canonical_solution": "Dim teams As Integer = 0\nWhile femalePlayers >= 2 AndAlso malePlayers >= 1\nIf internships > 0 Then\nIf femalePlayers > malePlayers * 2 Then\nfemalePlayers -= 1\nElse\nmalePlayers -= 1\nEnd If\ninternships -= 1\nElse\nteams += 1\nfemalePlayers -= 2\nmalePlayers -= 1\nEnd If\nEnd While\nReturn teams\nEnd Function", "test": "Sub Check(ByVal testFunction As Func(Of Integer, Integer, Integer, Integer))\nDebug.Assert(testFunction(6, 3, 2) = 2)\nDebug.Assert(testFunction(10, 5, 4) = 3)\nDebug.Assert(testFunction(5, 3, 1) = 2)\nDebug.Assert(testFunction(4, 2, 0) = 2)\nDebug.Assert(testFunction(3, 2, 2) = 1)\nDebug.Assert(testFunction(8, 4, 3) = 3)\nDebug.Assert(testFunction(7, 3, 2) = 2)\n\nConsole.WriteLine(\"pass\")\nEnd Sub\nSub Main()\n' Test the function\nCheck(AddressOf MaxTeams)\nEnd Sub\nEnd Module", "entry_point": "MaxTeams", "signature": "Function MaxTeams(ByVal femalePlayers As Integer, ByVal malePlayers As Integer, ByVal internships As Integer) As Integer", "docstring": " Calculates the maximum number of teams that can be formed given the number of female and\n male players, considering some players might be sent for internships. Each team consists\n of 1 male and 2 females.\n >>> MaxTeams(6, 3, 2)\n 2\n >>> MaxTeams(10, 5, 4)\n 3\n >>> MaxTeams(5, 3, 1)\n 2", "instruction": "Write a Visual Basic function `Function MaxTeams(ByVal femalePlayers As Integer, ByVal malePlayers As Integer, ByVal internships As Integer) As Integer` to solve the following problem:\n Calculates the maximum number of teams that can be formed given the number of female and\n male players, considering some players might be sent for internships. Each team consists\n of 1 male and 2 females.\n >>> MaxTeams(6, 3, 2)\n 2\n >>> MaxTeams(10, 5, 4)\n 3\n >>> MaxTeams(5, 3, 1)\n 2", "level": "easy"}
{"task_id": "Visual Basic/21", "prompt": "Module Module1\nFunction FindBallPosition(ByVal operations As String) As Integer\n' This function determines the final position of a ball under one of three cups after a series of swap operations.\n' The operations are represented by a string consisting of the characters 'A', 'B', and 'C' which denote different swap operations:\n' A: Swap the first and second cups.\n' B: Swap the second and third cups.\n' C: Swap the first and third cups.\n' The function returns an integer representing the final position of the ball (1 for left, 2 for middle, 3 for right).\n'\n' Example:\n' >>> FindBallPosition(\"A\")\n' 2\n' >>> FindBallPosition(\"BC\")\n' 3", "canonical_solution": "Dim ballPosition As Integer = 1 ' Initial position is 1 (left cup)\n\nFor Each op As Char In operations\nSelect Case op\nCase \"A\"\nIf ballPosition <> 3 Then ballPosition = 3 - ballPosition\nCase \"B\"\nIf ballPosition <> 1 Then ballPosition = 5 - ballPosition\nCase \"C\"\nIf ballPosition <> 2 Then ballPosition = 4 - ballPosition\nEnd Select\nNext\n\nReturn ballPosition\nEnd Function", "test": "Sub Check(ByVal testFunction As Func(Of String, Integer))\nDebug.Assert(testFunction(\"A\") = 2)\nDebug.Assert(testFunction(\"BC\") = 3)\nDebug.Assert(testFunction(\"AB\") = 3)\nDebug.Assert(testFunction(\"C\") = 3)\nDebug.Assert(testFunction(\"BAC\") = 2)\nDebug.Assert(testFunction(\"CBA\") = 1)\nDebug.Assert(testFunction(\"ABCACBA\") = 3)\n\nConsole.WriteLine(\"All test cases passed\")\nEnd Sub\nSub Main()\n' Testing the function\nCheck(AddressOf FindBallPosition)\nEnd Sub\nEnd Module", "entry_point": "FindBallPosition", "signature": "Function FindBallPosition(ByVal operations As String) As Integer", "docstring": " This function determines the final position of a ball under one of three cups after a series of swap operations.\n The operations are represented by a string consisting of the characters A, B, and C which denote different swap operations:\n A: Swap the first and second cups.\n B: Swap the second and third cups.\n C: Swap the first and third cups.\n The function returns an integer representing the final position of the ball (1 for left, 2 for middle, 3 for right).\n\n Example:\n >>> FindBallPosition(\"A\")\n 2\n >>> FindBallPosition(\"BC\")\n 3", "instruction": "Write a Visual Basic function `Function FindBallPosition(ByVal operations As String) As Integer` to solve the following problem:\n This function determines the final position of a ball under one of three cups after a series of swap operations.\n The operations are represented by a string consisting of the characters A, B, and C which denote different swap operations:\n A: Swap the first and second cups.\n B: Swap the second and third cups.\n C: Swap the first and third cups.\n The function returns an integer representing the final position of the ball (1 for left, 2 for middle, 3 for right).\n\n Example:\n >>> FindBallPosition(\"A\")\n 2\n >>> FindBallPosition(\"BC\")\n 3", "level": "middle"}
{"task_id": "Visual Basic/22", "prompt": "Module Module1\nFunction CalculateAttendanceDifferences(ByVal area As Integer, ByVal peoplePerSquareMeter As Integer, ByVal reportedNumbers As List(Of Integer)) As List(Of Integer)\n' This function calculates the differences between the reported attendance numbers in newspapers\n' and the actual attendance based on the area of the venue and the average number of people per square meter.\n' area: An integer representing the total area of the venue in square meters.\n' peoplePerSquareMeter: An integer representing the average number of people per square meter.\n' reportedNumbers: A list of integers representing the reported number of attendees by different newspapers.\n'\n' Returns: A list of integers representing the difference between each reported number and the actual number.\n'\n' Example:\n' >>> calculate_attendance_differences(10, 5, [50, 55, 45, 60, 50])\n' [0, 5, -5, 10, 0]\n' >>> calculate_attendance_differences(20, 10, [200, 195, 205, 210, 190])\n' [0, -5, 5, 10, -10]", "canonical_solution": "Dim actualNumber As Integer = area * peoplePerSquareMeter\nDim differences As New List(Of Integer)\n\nFor Each reportedNumber In reportedNumbers\ndifferences.Add(reportedNumber - actualNumber)\nNext\n\nReturn differences\nEnd Function", "test": "Sub Check(ByVal testFunction As Func(Of Integer, Integer, List(Of Integer), List(Of Integer)))\nDebug.Assert(testFunction(15, 10, New List(Of Integer) From {150, 155, 145, 160, 150}).SequenceEqual(New List(Of Integer) From {0, 5, -5, 10, 0}))\nDebug.Assert(testFunction(8, 12, New List(Of Integer) From {96, 100, 90, 104, 92}).SequenceEqual(New List(Of Integer) From {0, 4, -6, 8, -4}))\nDebug.Assert(testFunction(25, 4, New List(Of Integer) From {100, 95, 105, 110, 90}).SequenceEqual(New List(Of Integer) From {0, -5, 5, 10, -10}))\n\nConsole.WriteLine(\"All test cases passed\")\nEnd Sub\nSub Main()\n' Testing the function\nCheck(AddressOf CalculateAttendanceDifferences)\nEnd Sub\n\nEnd Module", "entry_point": "CalculateAttendanceDifferences", "signature": "Function CalculateAttendanceDifferences(ByVal area As Integer, ByVal peoplePerSquareMeter As Integer, ByVal reportedNumbers As List(Of Integer)) As List(Of Integer)", "docstring": " This function calculates the differences between the reported attendance numbers in newspapers\n and the actual attendance based on the area of the venue and the average number of people per square meter.\n area: An integer representing the total area of the venue in square meters.\n peoplePerSquareMeter: An integer representing the average number of people per square meter.\n reportedNumbers: A list of integers representing the reported number of attendees by different newspapers.\n\n Returns: A list of integers representing the difference between each reported number and the actual number.\n\n Example:\n >>> calculate_attendance_differences(10, 5, [50, 55, 45, 60, 50])\n [0, 5, -5, 10, 0]\n >>> calculate_attendance_differences(20, 10, [200, 195, 205, 210, 190])\n [0, -5, 5, 10, -10]", "instruction": "Write a Visual Basic function `Function CalculateAttendanceDifferences(ByVal area As Integer, ByVal peoplePerSquareMeter As Integer, ByVal reportedNumbers As List(Of Integer)) As List(Of Integer)` to solve the following problem:\n This function calculates the differences between the reported attendance numbers in newspapers\n and the actual attendance based on the area of the venue and the average number of people per square meter.\n area: An integer representing the total area of the venue in square meters.\n peoplePerSquareMeter: An integer representing the average number of people per square meter.\n reportedNumbers: A list of integers representing the reported number of attendees by different newspapers.\n\n Returns: A list of integers representing the difference between each reported number and the actual number.\n\n Example:\n >>> calculate_attendance_differences(10, 5, [50, 55, 45, 60, 50])\n [0, 5, -5, 10, 0]\n >>> calculate_attendance_differences(20, 10, [200, 195, 205, 210, 190])\n [0, -5, 5, 10, -10]", "level": "easy"}
{"task_id": "Visual Basic/23", "prompt": "Module Module1\nFunction PrimeNumbersSumWithinLimit(ByVal limit As Integer) As List(Of Integer)\n' This function calculates the sum of consecutive prime numbers starting from 2 and checks how many\n' prime numbers can be added together without exceeding the given limit. It returns a list of these\n' prime numbers followed by their count.\n' \n' Example 1:\n' >>> PrimeNumbersSumWithinLimit(10)\n' [2, 3, 5, 3]", "canonical_solution": "Dim primes As New List(Of Integer)\nDim sum As Integer = 0\nDim num As Integer = 2\n\nWhile sum + num <= limit\nIf IsPrime(num) Then\nsum += num\nprimes.Add(num)\nEnd If\nnum += 1\nEnd While\n\nprimes.Add(primes.Count)\nReturn primes\nEnd Function\n\nPrivate Function IsPrime(ByVal number As Integer) As Boolean\nIf number <= 1 Then\nReturn False\nEnd If\nFor i As Integer = 2 To Math.Sqrt(number)\nIf number Mod i = 0 Then\nReturn False\nEnd If\nNext\nReturn True\nEnd Function", "test": "Sub Check(ByVal testFunction As Func(Of Integer, List(Of Integer)))\nDim result As List(Of Integer)\n\nresult = testFunction(10)\nDebug.Assert(result.SequenceEqual(New List(Of Integer) From {2, 3, 5,3}))\n\nresult = testFunction(20)\nDebug.Assert(result.SequenceEqual(New List(Of Integer) From {2, 3, 5, 7, 4}))\n\nresult = testFunction(30)\nDebug.Assert(result.SequenceEqual(New List(Of Integer) From {2, 3, 5, 7, 11, 5}))\n\nresult = testFunction(50)\nDebug.Assert(result.SequenceEqual(New List(Of Integer) From {2, 3, 5, 7, 11, 13, 6}))\n\nConsole.WriteLine(\"Tests passed\")\nEnd Sub\n\nSub Main()\n' Testing function\nCheck(AddressOf PrimeNumbersSumWithinLimit)\nEnd Sub\n\nEnd Module", "entry_point": "PrimeNumbersSumWithinLimit", "signature": "Function PrimeNumbersSumWithinLimit(ByVal limit As Integer) As List(Of Integer)", "docstring": " This function calculates the sum of consecutive prime numbers starting from 2 and checks how many\n prime numbers can be added together without exceeding the given limit. It returns a list of these\n prime numbers followed by their count.\n \n Example 1:\n >>> PrimeNumbersSumWithinLimit(10)\n [2, 3, 5, 3]", "instruction": "Write a Visual Basic function `Function PrimeNumbersSumWithinLimit(ByVal limit As Integer) As List(Of Integer)` to solve the following problem:\n This function calculates the sum of consecutive prime numbers starting from 2 and checks how many\n prime numbers can be added together without exceeding the given limit. It returns a list of these\n prime numbers followed by their count.\n \n Example 1:\n >>> PrimeNumbersSumWithinLimit(10)\n [2, 3, 5, 3]", "level": "middle"}
{"task_id": "Visual Basic/24", "prompt": "Module Module1\nFunction FindPalindromePrimes(ByVal a As Integer, ByVal b As Integer) As List(Of Integer)\n' This function finds all the numbers within a given range [a, b] that are both prime and palindromes.\n' A number is a palindrome if it remains the same when its digits are reversed.\n' A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n'\n' Args:\n' a (Integer): The lower bound of the range (inclusive).\n' b (Integer): The upper bound of the range (inclusive).\n'\n' Returns:\n' List(Of Integer): A list containing all palindrome prime numbers within the range.\n'\n' Example:\n' >>> FindPalindromePrimes(10, 100)\n' [11, 101]", "canonical_solution": "Dim result As New List(Of Integer)\nFor num As Integer = a To b\nIf IsPalindrome(num) AndAlso IsPrime(num) Then\nresult.Add(num)\nEnd If\nNext\nReturn result\nEnd Function\n\nPrivate Function IsPalindrome(ByVal num As Integer) As Boolean\nDim str As String = num.ToString()\nReturn str = StrReverse(str)\nEnd Function\n\nPrivate Function IsPrime(ByVal num As Integer) As Boolean\nIf num <= 1 Then Return False\nFor i As Integer = 2 To Math.Sqrt(num)\nIf num Mod i = 0 Then Return False\nNext\nReturn True\nEnd Function", "test": "Sub Check(ByVal testFunction As Func(Of Integer, Integer, List(Of Integer)))\nDebug.Assert(testFunction(10, 100).SequenceEqual(New List(Of Integer) From {11}))\nDebug.Assert(testFunction(300, 400).SequenceEqual(New List(Of Integer) From {313,353,373,383}))\nDebug.Assert(testFunction(500, 600).SequenceEqual(New List(Of Integer) From {}))\nDebug.Assert(testFunction(800, 900).SequenceEqual(New List(Of Integer) From {}))\n\nConsole.WriteLine(\"Tests passed\")\nEnd Sub\n\nSub Main()\n' Test the function\nCheck(AddressOf FindPalindromePrimes)\nEnd Sub\nEnd Module", "entry_point": "FindPalindromePrimes", "signature": "Function FindPalindromePrimes(ByVal a As Integer, ByVal b As Integer) As List(Of Integer)", "docstring": " This function finds all the numbers within a given range [a, b] that are both prime and palindromes.\n A number is a palindrome if it remains the same when its digits are reversed.\n A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\n Args:\n a (Integer): The lower bound of the range (inclusive).\n b (Integer): The upper bound of the range (inclusive).\n\n Returns:\n List(Of Integer): A list containing all palindrome prime numbers within the range.\n\n Example:\n >>> FindPalindromePrimes(10, 100)\n [11, 101]", "instruction": "Write a Visual Basic function `Function FindPalindromePrimes(ByVal a As Integer, ByVal b As Integer) As List(Of Integer)` to solve the following problem:\n This function finds all the numbers within a given range [a, b] that are both prime and palindromes.\n A number is a palindrome if it remains the same when its digits are reversed.\n A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\n Args:\n a (Integer): The lower bound of the range (inclusive).\n b (Integer): The upper bound of the range (inclusive).\n\n Returns:\n List(Of Integer): A list containing all palindrome prime numbers within the range.\n\n Example:\n >>> FindPalindromePrimes(10, 100)\n [11, 101]", "level": "middle"}
{"task_id": "Visual Basic/25", "prompt": "Module Module1\nFunction CalculateFinalScore(ByVal scores As List(Of Integer)) As Double\n' Calculates the final score for a contestant by removing the highest and lowest score from the judges,\n' and then calculating the average of the remaining scores. The result is rounded to two decimal places.\n' Args:\n' scores (List(Of Integer)): A list of scores given by judges, each score ranges from 0 to 10.\n' Returns:\n' Double: The final score of the contestant, rounded to two decimal places.\n'\n' Examples:\n' >>> CalculateFinalScore(New List(Of Integer) From {8, 9, 7, 6, 5})\n' 7.00\n' >>> CalculateFinalScore(New List(Of Integer) From {10, 10, 9, 8, 7, 7})\n' 8.50", "canonical_solution": "If scores.Count < 3 Then\nThrow New ArgumentException(\"There must be at least 3 scores.\")\nEnd If\n\nDim maxScore As Integer = scores.Max()\nDim minScore As Integer = scores.Min()\n\nDim total As Integer = scores.Sum() - maxScore - minScore\nDim averageScore As Double = total / (scores.Count - 2)\n\nReturn Math.Round(averageScore, 2)\nEnd Function", "test": "Sub Check(ByVal testFunction As Func(Of List(Of Integer), Double))\nDebug.Assert(testFunction(New List(Of Integer) From {8, 9, 7, 6, 5}) = 7.00)\nDebug.Assert(testFunction(New List(Of Integer) From {10, 10, 9, 8, 7, 7}) = 8.50)\nDebug.Assert(testFunction(New List(Of Integer) From {5, 5, 5, 5, 5}) = 5)\nDebug.Assert(testFunction(New List(Of Integer) From {0, 10, 5, 5, 5}) = 5)\nDebug.Assert(testFunction(New List(Of Integer) From {10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}) = 5)\nDebug.Assert(testFunction(New List(Of Integer) From {6, 6, 6, 6, 6, 6, 7}) = 6)\n\nConsole.WriteLine(\"All test cases passed.\")\nEnd Sub\nSub Main()\n' Test the function\nCheck(AddressOf CalculateFinalScore)\nEnd Sub\nEnd Module", "entry_point": "CalculateFinalScore", "signature": "Function CalculateFinalScore(ByVal scores As List(Of Integer)) As Double", "docstring": " Calculates the final score for a contestant by removing the highest and lowest score from the judges,\n and then calculating the average of the remaining scores. The result is rounded to two decimal places.\n Args:\n scores (List(Of Integer)): A list of scores given by judges, each score ranges from 0 to 10.\n Returns:\n Double: The final score of the contestant, rounded to two decimal places.\n\n Examples:\n >>> CalculateFinalScore(New List(Of Integer) From {8, 9, 7, 6, 5})\n 7.00\n >>> CalculateFinalScore(New List(Of Integer) From {10, 10, 9, 8, 7, 7})\n 8.50", "instruction": "Write a Visual Basic function `Function CalculateFinalScore(ByVal scores As List(Of Integer)) As Double` to solve the following problem:\n Calculates the final score for a contestant by removing the highest and lowest score from the judges,\n and then calculating the average of the remaining scores. The result is rounded to two decimal places.\n Args:\n scores (List(Of Integer)): A list of scores given by judges, each score ranges from 0 to 10.\n Returns:\n Double: The final score of the contestant, rounded to two decimal places.\n\n Examples:\n >>> CalculateFinalScore(New List(Of Integer) From {8, 9, 7, 6, 5})\n 7.00\n >>> CalculateFinalScore(New List(Of Integer) From {10, 10, 9, 8, 7, 7})\n 8.50", "level": "easy"}
{"task_id": "Visual Basic/26", "prompt": "Module Module1\nFunction GenerateMagicSquare(ByVal n As Integer) As Integer(,)\n' Generates an N x N magic square for a given odd integer N. A magic square is a square\n' matrix where the sums of the numbers in each row, each column, and the two main diagonals\n' are all equal. The function fills the square with distinct numbers from 1 to N*N.\n' The method used is valid only for odd integers.\n'\n' Example Usage:\n' >>> GenerateMagicSquare(3)\n' 2 7 6\n' 9 5 1\n' 4 3 8\n' >>> GenerateMagicSquare(5)\n' 9 3 22 16 15\n' 2 21 20 14 8\n' 25 19 13 7 1\n' 18 12 6 5 24\n' 11 10 4 23 17", "canonical_solution": "Dim magicSquare(n - 1, n - 1) As Integer\n\nDim num As Integer = 1\nDim i As Integer = 0\nDim j As Integer = n \\ 2\n\nWhile num <= n * n\nIf i < 0 And j = n Then\ni += 2\nj -= 1\nElse\nIf i < 0 Then\ni = n - 1\nEnd If\nIf j = n Then\nj = 0\nEnd If\nEnd If\n\nIf magicSquare(i, j) <> 0 Then\ni += 2\nj -= 1\nContinue While\nElse\nmagicSquare(i, j) = num\nnum += 1\nEnd If\n\ni -= 1\nj += 1\nEnd While\n\nReturn magicSquare\nEnd Function", "test": "Sub CheckMagicSquare(ByVal testFunction As Func(Of Integer, Integer(,)))\nDim magicSquare3x3 As Integer(,) = testFunction(3)\nDebug.Assert(magicSquare3x3.GetLength(0) = 3 And magicSquare3x3.GetLength(1) = 3)\nDebug.Assert(magicSquare3x3.Cast(Of Integer)().Sum() = 45)\n\nDim magicSquare5x5 As Integer(,) = testFunction(5)\nDebug.Assert(magicSquare5x5.GetLength(0) = 5 And magicSquare5x5.GetLength(1) = 5)\nDebug.Assert(magicSquare5x5.Cast(Of Integer)().Sum() = 325)\n\nConsole.WriteLine(\"Test cases passed.\")\nEnd Sub\n\nSub Main()\nCheckMagicSquare(AddressOf GenerateMagicSquare)\nEnd Sub\nEnd Module", "entry_point": "GenerateMagicSquare", "signature": "Function GenerateMagicSquare(ByVal n As Integer) As Integer(,)", "docstring": " Generates an N x N magic square for a given odd integer N. A magic square is a square\n matrix where the sums of the numbers in each row, each column, and the two main diagonals\n are all equal. The function fills the square with distinct numbers from 1 to N*N.\n The method used is valid only for odd integers.\n\n Example Usage:\n >>> GenerateMagicSquare(3)\n 2 7 6\n 9 5 1\n 4 3 8\n >>> GenerateMagicSquare(5)\n 9 3 22 16 15\n 2 21 20 14 8\n 25 19 13 7 1\n 18 12 6 5 24\n 11 10 4 23 17", "instruction": "Write a Visual Basic function `Function GenerateMagicSquare(ByVal n As Integer) As Integer(,)` to solve the following problem:\n Generates an N x N magic square for a given odd integer N. A magic square is a square\n matrix where the sums of the numbers in each row, each column, and the two main diagonals\n are all equal. The function fills the square with distinct numbers from 1 to N*N.\n The method used is valid only for odd integers.\n\n Example Usage:\n >>> GenerateMagicSquare(3)\n 2 7 6\n 9 5 1\n 4 3 8\n >>> GenerateMagicSquare(5)\n 9 3 22 16 15\n 2 21 20 14 8\n 25 19 13 7 1\n 18 12 6 5 24\n 11 10 4 23 17", "level": "middle"}
{"task_id": "Visual Basic/27", "prompt": "Module Module1\nFunction IsLuckyWord(ByVal word As String) As Tuple(Of String, Integer)\n' Determines if the provided word is a \"Lucky Word\". A word is considered a Lucky Word if\n' the difference between the maximum and minimum letter frequencies is a prime number.\n' The function returns a Tuple with a string and an integer. The string is \"Lucky Word\" if \n' the condition is met, otherwise \"No Answer\". The integer is the difference if it's a Lucky Word, \n' otherwise 0.\n' Examples:\n' >>> IsLuckyWord(\"apple\")\n' (\"No Answer\", 0)", "canonical_solution": "Dim frequency As New Dictionary(Of Char, Integer)\nFor Each c As Char In word\nIf frequency.ContainsKey(c) Then\nfrequency(c) += 1\nElse\nfrequency.Add(c, 1)\nEnd If\nNext\n\nDim maxn As Integer = frequency.Values.Max()\nDim minn As Integer = frequency.Values.Min()\nDim difference As Integer = maxn - minn\n\nIf IsPrime(difference) Then\nReturn New Tuple(Of String, Integer)(\"Lucky Word\", difference)\nElse\nReturn New Tuple(Of String, Integer)(\"No Answer\", 0)\nEnd If\nEnd Function\n\nPrivate Function IsPrime(ByVal number As Integer) As Boolean\nIf number <= 1 Then Return False\nFor i As Integer = 2 To Math.Sqrt(number)\nIf number Mod i = 0 Then Return False\nNext\nReturn True\nEnd Function", "test": "Sub Main()\nTestIsLuckyWord()\nEnd Sub\n\nSub TestIsLuckyWord()\nConsole.WriteLine(\"Test Case 1: 'apple'\")\nDebug.Assert(IsLuckyWord(\"apple\").Equals(New Tuple(Of String, Integer)(\"No Answer\", 0)))\n\nConsole.WriteLine(\"Test Case 2: 'banana'\")\nDebug.Assert(IsLuckyWord(\"banana\").Equals(New Tuple(Of String, Integer)(\"Lucky Word\", 2)))\n\nConsole.WriteLine(\"Test Case 3: 'character'\")\nDebug.Assert(IsLuckyWord(\"character\").Equals(New Tuple(Of String, Integer)(\"No Answer\", 0)))\n\nConsole.WriteLine(\"Test Case 4: 'foundation'\")\nDebug.Assert(IsLuckyWord(\"foundation\").Equals(New Tuple(Of String, Integer)(\"No Answer\", 0)))\n\nConsole.WriteLine(\"Test Case 5: 'zebra'\")\nDebug.Assert(IsLuckyWord(\"zebra\").Equals(New Tuple(Of String, Integer)(\"No Answer\", 0)))\n\nConsole.WriteLine(\"All tests passed.\")\nEnd Sub\nEnd Module", "entry_point": "IsLuckyWord", "signature": "Function IsLuckyWord(ByVal word As String) As Tuple(Of String, Integer)", "docstring": " Determines if the provided word is a \"Lucky Word\". A word is considered a Lucky Word if\n the difference between the maximum and minimum letter frequencies is a prime number.\n The function returns a Tuple with a string and an integer. The string is \"Lucky Word\" if \n the condition is met, otherwise \"No Answer\". The integer is the difference if its a Lucky Word, \n otherwise 0.\n Examples:\n >>> IsLuckyWord(\"apple\")\n (\"No Answer\", 0)", "instruction": "Write a Visual Basic function `Function IsLuckyWord(ByVal word As String) As Tuple(Of String, Integer)` to solve the following problem:\n Determines if the provided word is a \"Lucky Word\". A word is considered a Lucky Word if\n the difference between the maximum and minimum letter frequencies is a prime number.\n The function returns a Tuple with a string and an integer. The string is \"Lucky Word\" if \n the condition is met, otherwise \"No Answer\". The integer is the difference if its a Lucky Word, \n otherwise 0.\n Examples:\n >>> IsLuckyWord(\"apple\")\n (\"No Answer\", 0)", "level": "hard"}
{"task_id": "Visual Basic/28", "prompt": "Module Module1\nFunction GenerateArithmeticExpressions(ByVal operations As List(Of Tuple(Of Char, Integer, Integer))) As List(Of String)\n' This function takes a list of operations, where each operation is represented by a tuple.\n' The first element of the tuple is a character representing the operation ('a' for addition,\n' 'b' for subtraction, 'c' for multiplication). The second and third elements are integers\n' representing the operands. The function generates a list of strings, each string representing\n' the arithmetic expression and its result, followed by its length.\n' Example:\n' >>> GenerateArithmeticExpressions(New List(Of Tuple(Of Char, Integer, Integer)) From {\n' Tuple.Create(\"a\"c, 10, 20), Tuple.Create(\"b\"c, 30, 15), Tuple.Create(\"c\"c, 5, 5)})\n' Returns: {\"10+20=30\", \"5\", \"30-15=15\", \"7\", \"5*5=25\", \"6\"}", "canonical_solution": "Dim results As New List(Of String)\nDim lastOperation As Char = \" \"c\n\nFor Each op In operations\nDim operationType As Char = If(op.Item1 = \" \"c, lastOperation, op.Item1)\nlastOperation = operationType\nDim result As Integer\n\nSelect Case operationType\nCase \"a\"c\nresult = op.Item2 + op.Item3\nresults.Add($\"{op.Item2}+{op.Item3}={result}\")\nCase \"b\"c\nresult = op.Item2 - op.Item3\nresults.Add($\"{op.Item2}-{op.Item3}={result}\")\nCase \"c\"c\nresult = op.Item2 * op.Item3\nresults.Add($\"{op.Item2}*{op.Item3}={result}\")\nEnd Select\n\nresults.Add(results.Last().Length.ToString())\nNext\n\nReturn results\nEnd Function", "test": "Sub Check(testFunction As Func(Of List(Of Tuple(Of Char, Integer, Integer)), List(Of String)))\nDim testOperations As New List(Of Tuple(Of Char, Integer, Integer)) From {\nTuple.Create(\"a\"c, 15, 25),\nTuple.Create(\" \"c, 35, 15),\nTuple.Create(\"b\"c, 50, 20),\nTuple.Create(\" \"c, 30, 10),\nTuple.Create(\"c\"c, 4, 6)\n}\n\nDim expectedResult As New List(Of String) From {\n\"15+25=40\", \"8\", \"35+15=50\", \"8\", \"50-20=30\", \"8\", \"30-10=20\", \"8\", \"4*6=24\", \"6\"\n}\n\nDim results = testFunction(testOperations)\n\nFor i As Integer = 0 To expectedResult.Count - 1\nDebug.Assert(results(i) = expectedResult(i), $\"Test case {i + 1} failed\")\nNext\n\nConsole.WriteLine(\"All test cases passed\")\nEnd Sub\n\nSub Main()\n' Testing the function\nCheck(AddressOf GenerateArithmeticExpressions)\nEnd Sub\nEnd Module", "entry_point": "GenerateArithmeticExpressions", "signature": "Function GenerateArithmeticExpressions(ByVal operations As List(Of Tuple(Of Char, Integer, Integer))) As List(Of String)", "docstring": " This function takes a list of operations, where each operation is represented by a tuple.\n The first element of the tuple is a character representing the operation (a for addition,\n b for subtraction, c for multiplication). The second and third elements are integers\n representing the operands. The function generates a list of strings, each string representing\n the arithmetic expression and its result, followed by its length.\n Example:\n >>> GenerateArithmeticExpressions(New List(Of Tuple(Of Char, Integer, Integer)) From {\n Tuple.Create(\"a\"c, 10, 20), Tuple.Create(\"b\"c, 30, 15), Tuple.Create(\"c\"c, 5, 5)})\n Returns: {\"10+20=30\", \"5\", \"30-15=15\", \"7\", \"5*5=25\", \"6\"}", "instruction": "Write a Visual Basic function `Function GenerateArithmeticExpressions(ByVal operations As List(Of Tuple(Of Char, Integer, Integer))) As List(Of String)` to solve the following problem:\n This function takes a list of operations, where each operation is represented by a tuple.\n The first element of the tuple is a character representing the operation (a for addition,\n b for subtraction, c for multiplication). The second and third elements are integers\n representing the operands. The function generates a list of strings, each string representing\n the arithmetic expression and its result, followed by its length.\n Example:\n >>> GenerateArithmeticExpressions(New List(Of Tuple(Of Char, Integer, Integer)) From {\n Tuple.Create(\"a\"c, 10, 20), Tuple.Create(\"b\"c, 30, 15), Tuple.Create(\"c\"c, 5, 5)})\n Returns: {\"10+20=30\", \"5\", \"30-15=15\", \"7\", \"5*5=25\", \"6\"}", "level": "hard"}
{"task_id": "Visual Basic/29", "prompt": "Module Module1\nFunction CalculateMatchScores(ByVal matchResults As String) As Tuple(Of List(Of String), List(Of String))\n' This function analyzes a string of table tennis match results and calculates the scores\n' under both 11-point and 21-point systems. The match results are represented as a string\n' with 'W' indicating a point won by the player, 'L' indicating a point lost, and 'E' marking\n' the end of the input. The function returns a Tuple, with the first item being a list of\n' strings representing scores in the 11-point system and the second item for the 21-point system.\n'\n' Example:\n' >>> CalculateMatchScores(\"WWLWLWE\")\n' ([\"4:2\"], [\"4:2\"])", "canonical_solution": "Dim scores11 As New List(Of String)\nDim scores21 As New List(Of String)\nDim playerScore As Integer = 0, opponentScore As Integer = 0\n\nFor Each ch As Char In matchResults\nIf ch = \"E\" Then Exit For\nIf ch = \"W\" Then\nplayerScore += 1\nElseIf ch = \"L\" Then\nopponentScore += 1\nEnd If\n\n' Check for 11-point system\nIf playerScore >= 11 Or opponentScore >= 11 Then\nIf Math.Abs(playerScore - opponentScore) >= 2 Then\nscores11.Add($\"{playerScore}:{opponentScore}\")\nplayerScore = 0\nopponentScore = 0\nEnd If\nEnd If\n\n' Check for 21-point system\nIf playerScore >= 21 Or opponentScore >= 21 Then\nIf Math.Abs(playerScore - opponentScore) >= 2 Then\nscores21.Add($\"{playerScore}:{opponentScore}\")\nplayerScore = 0\nopponentScore = 0\nEnd If\nEnd If\nNext\n\n' Add the last game if not already added\nIf playerScore > 0 Or opponentScore > 0 Then\nscores11.Add($\"{playerScore}:{opponentScore}\")\nscores21.Add($\"{playerScore}:{opponentScore}\")\nEnd If\n\nReturn New Tuple(Of List(Of String), List(Of String))(scores11, scores21)\nEnd Function", "test": "Sub Main()\n' Testing function\nCheck(AddressOf CalculateMatchScores)\nEnd Sub\n\nSub Check(ByVal testFunction As Func(Of String, Tuple(Of List(Of String), List(Of String))))\nDim result As Tuple(Of List(Of String), List(Of String))\n\nresult = testFunction(\"WWLWE\")\nDebug.Assert(result.Item1.SequenceEqual(New List(Of String) From {\"3:1\"}) AndAlso result.Item2.SequenceEqual(New List(Of String) From {\"3:1\"}))\n\nresult = testFunction(\"LWWWWLWE\")\nDebug.Assert(result.Item1.SequenceEqual(New List(Of String) From {\"5:2\"}) AndAlso result.Item2.SequenceEqual(New List(Of String) From {\"5:2\"}))\n\nresult = testFunction(\"WWWLWLWLWLWE\")\nDebug.Assert(result.Item1.SequenceEqual(New List(Of String) From {\"7:4\"}) AndAlso result.Item2.SequenceEqual(New List(Of String) From {\"7:4\"}))\n\nConsole.WriteLine(\"All test cases passed\")\nEnd Sub\nEnd Module", "entry_point": "CalculateMatchScores", "signature": "Function CalculateMatchScores(ByVal matchResults As String) As Tuple(Of List(Of String), List(Of String))", "docstring": " This function analyzes a string of table tennis match results and calculates the scores\n under both 11-point and 21-point systems. The match results are represented as a string\n with W indicating a point won by the player, L indicating a point lost, and E marking\n the end of the input. The function returns a Tuple, with the first item being a list of\n strings representing scores in the 11-point system and the second item for the 21-point system.\n\n Example:\n >>> CalculateMatchScores(\"WWLWLWE\")\n ([\"4:2\"], [\"4:2\"])", "instruction": "Write a Visual Basic function `Function CalculateMatchScores(ByVal matchResults As String) As Tuple(Of List(Of String), List(Of String))` to solve the following problem:\n This function analyzes a string of table tennis match results and calculates the scores\n under both 11-point and 21-point systems. The match results are represented as a string\n with W indicating a point won by the player, L indicating a point lost, and E marking\n the end of the input. The function returns a Tuple, with the first item being a list of\n strings representing scores in the 11-point system and the second item for the 21-point system.\n\n Example:\n >>> CalculateMatchScores(\"WWLWLWE\")\n ([\"4:2\"], [\"4:2\"])", "level": "hard"}
{"task_id": "Visual Basic/30", "prompt": "Imports System.Text\nModule Module1\nFunction FormatPolynomial(ByVal degree As Integer, ByVal coefficients As List(Of Integer)) As String\n' Formats a polynomial of a given degree with given coefficients into a string representation.\n' The polynomial is represented as f(x) = a_nx^n + a_{n-1}x^{n-1} + ... + a_1x + a_0, where a_i are the coefficients.\n' Rules:\n' 1. Variable is x, terms are in decreasing order of degree.\n' 2. Only non-zero coefficients are included.\n' 3. The polynomial starts with a minus sign if the leading coefficient is negative; otherwise, no sign.\n' 4. Non-leading terms are prefixed with + or - based on the sign of the coefficient. If the absolute value of the coefficient is 1 and the degree is greater than 0, the coefficient is omitted.\n' 5. For coefficients with degree > 1, the term is followed by x^degree. If degree = 1, it's followed by x. If degree = 0, only the coefficient is shown.\n' Examples:\n' >>> FormatPolynomial(2, New List(Of Integer) From {1, -2, 1})\n' \"x^2-2x+1\"\n' >>> FormatPolynomial(3, New List(Of Integer) From {-3, 0, 4, -2})\n' \"-3x^3+4x-2\"", "canonical_solution": "Dim result As New StringBuilder()\n\nFor i As Integer = 0 To degree\nDim coeff As Integer = coefficients(i)\nIf coeff <> 0 Then\nIf i <> 0 AndAlso coeff > 0 Then\nresult.Append(\"+\")\nEnd If\n\nIf Not (coeff = 1 AndAlso i < degree) AndAlso Not (coeff = -1 AndAlso i < degree) Then\nresult.Append(coeff.ToString())\nElseIf coeff = -1 Then\nresult.Append(\"-\")\nEnd If\n\nIf i < degree - 1 Then\nresult.Append(\"x^\" & (degree - i).ToString())\nElseIf i = degree - 1 Then\nresult.Append(\"x\")\nEnd If\nEnd If\nNext\n\nReturn result.ToString()\nEnd Function", "test": "Sub Check(ByVal testFunction As Func(Of Integer, List(Of Integer), String))\nDebug.Assert(testFunction(2, New List(Of Integer) From {1, -2, 1}) = \"x^2-2x+1\")\nDebug.Assert(testFunction(3, New List(Of Integer) From {-3, 0, 4, -2}) = \"-3x^3+4x-2\")\nDebug.Assert(testFunction(4, New List(Of Integer) From {0, -1, 1, 0, -3}) = \"-x^3+x^2-3\")\nDebug.Assert(testFunction(1, New List(Of Integer) From {3, -2}) = \"3x-2\")\nDebug.Assert(testFunction(0, New List(Of Integer) From {5}) = \"5\")\n\nConsole.WriteLine(\"All test cases passed\")\nEnd Sub\nSub Main()\nCheck(AddressOf FormatPolynomial)\nEnd Sub\nEnd Module", "entry_point": "FormatPolynomial", "signature": "Function FormatPolynomial(ByVal degree As Integer, ByVal coefficients As List(Of Integer)) As String", "docstring": " Formats a polynomial of a given degree with given coefficients into a string representation.\n The polynomial is represented as f(x) = a_nx^n + a_{n-1}x^{n-1} + ... + a_1x + a_0, where a_i are the coefficients.\n Rules:\n 1. Variable is x, terms are in decreasing order of degree.\n 2. Only non-zero coefficients are included.\n 3. The polynomial starts with a minus sign if the leading coefficient is negative; otherwise, no sign.\n 4. Non-leading terms are prefixed with + or - based on the sign of the coefficient. If the absolute value of the coefficient is 1 and the degree is greater than 0, the coefficient is omitted.\n 5. For coefficients with degree > 1, the term is followed by x^degree. If degree = 1, its followed by x. If degree = 0, only the coefficient is shown.\n Examples:\n >>> FormatPolynomial(2, New List(Of Integer) From {1, -2, 1})\n \"x^2-2x+1\"\n >>> FormatPolynomial(3, New List(Of Integer) From {-3, 0, 4, -2})\n \"-3x^3+4x-2\"", "instruction": "Write a Visual Basic function `Function FormatPolynomial(ByVal degree As Integer, ByVal coefficients As List(Of Integer)) As String` to solve the following problem:\n Formats a polynomial of a given degree with given coefficients into a string representation.\n The polynomial is represented as f(x) = a_nx^n + a_{n-1}x^{n-1} + ... + a_1x + a_0, where a_i are the coefficients.\n Rules:\n 1. Variable is x, terms are in decreasing order of degree.\n 2. Only non-zero coefficients are included.\n 3. The polynomial starts with a minus sign if the leading coefficient is negative; otherwise, no sign.\n 4. Non-leading terms are prefixed with + or - based on the sign of the coefficient. If the absolute value of the coefficient is 1 and the degree is greater than 0, the coefficient is omitted.\n 5. For coefficients with degree > 1, the term is followed by x^degree. If degree = 1, its followed by x. If degree = 0, only the coefficient is shown.\n Examples:\n >>> FormatPolynomial(2, New List(Of Integer) From {1, -2, 1})\n \"x^2-2x+1\"\n >>> FormatPolynomial(3, New List(Of Integer) From {-3, 0, 4, -2})\n \"-3x^3+4x-2\"", "level": "hard"}
{"task_id": "Visual Basic/31", "prompt": "Module Module1\nFunction SortVotes(ByVal n As Integer, ByVal m As Integer, ByVal votes As List(Of Integer)) As List(Of Integer)\n' Sorts a list of votes based on candidate numbers in ascending order.\n' Given the number of candidates (n) and the total number of votes (m),\n' this function returns the sorted list of votes.\n'\n' Args:\n' n (Integer): The number of candidates (n <= 999).\n' m (Integer): The total number of votes (m <= 2000000).\n' votes (List(Of Integer)): A list of integers representing the votes.\n'\n' Returns:\n' List(Of Integer): A list of integers representing the sorted votes.\n'\n' Examples:\n' >>> sort_votes(3, 5, [3, 1, 2, 3, 2])\n' [1, 2, 2, 3, 3]\n' >>> sort_votes(4, 6, [4, 4, 2, 1, 3, 2])\n' [1, 2, 2, 3, 4, 4]", "canonical_solution": "votes.Sort()\nReturn votes\nEnd Function", "test": "Sub Check(ByVal testFunction As Func(Of Integer, Integer, List(Of Integer), List(Of Integer)))\nDebug.Assert(testFunction(3, 5, New List(Of Integer) From {3, 1, 2, 3, 2}).SequenceEqual(New List(Of Integer) From {1, 2, 2, 3, 3}))\nDebug.Assert(testFunction(4, 6, New List(Of Integer) From {4, 4, 2, 1, 3, 2}).SequenceEqual(New List(Of Integer) From {1, 2, 2, 3, 4, 4}))\nDebug.Assert(testFunction(2, 4, New List(Of Integer) From {2, 1, 2, 1}).SequenceEqual(New List(Of Integer) From {1, 1, 2, 2}))\nDebug.Assert(testFunction(5, 3, New List(Of Integer) From {5, 3, 4}).SequenceEqual(New List(Of Integer) From {3, 4, 5}))\n\nConsole.WriteLine(\"All test cases passed\")\nEnd Sub\n\nSub Main()\n' Test the SortVotes function\nCheck(AddressOf SortVotes)\nEnd Sub\n\nEnd Module", "entry_point": "SortVotes", "signature": "Function SortVotes(ByVal n As Integer, ByVal m As Integer, ByVal votes As List(Of Integer)) As List(Of Integer)", "docstring": " Sorts a list of votes based on candidate numbers in ascending order.\n Given the number of candidates (n) and the total number of votes (m),\n this function returns the sorted list of votes.\n\n Args:\n n (Integer): The number of candidates (n <= 999).\n m (Integer): The total number of votes (m <= 2000000).\n votes (List(Of Integer)): A list of integers representing the votes.\n\n Returns:\n List(Of Integer): A list of integers representing the sorted votes.\n\n Examples:\n >>> sort_votes(3, 5, [3, 1, 2, 3, 2])\n [1, 2, 2, 3, 3]\n >>> sort_votes(4, 6, [4, 4, 2, 1, 3, 2])\n [1, 2, 2, 3, 4, 4]", "instruction": "Write a Visual Basic function `Function SortVotes(ByVal n As Integer, ByVal m As Integer, ByVal votes As List(Of Integer)) As List(Of Integer)` to solve the following problem:\n Sorts a list of votes based on candidate numbers in ascending order.\n Given the number of candidates (n) and the total number of votes (m),\n this function returns the sorted list of votes.\n\n Args:\n n (Integer): The number of candidates (n <= 999).\n m (Integer): The total number of votes (m <= 2000000).\n votes (List(Of Integer)): A list of integers representing the votes.\n\n Returns:\n List(Of Integer): A list of integers representing the sorted votes.\n\n Examples:\n >>> sort_votes(3, 5, [3, 1, 2, 3, 2])\n [1, 2, 2, 3, 3]\n >>> sort_votes(4, 6, [4, 4, 2, 1, 3, 2])\n [1, 2, 2, 3, 4, 4]", "level": "easy"}
{"task_id": "Visual Basic/32", "prompt": "Module Module1\nFunction MinimumSwapsToSort(ByVal carriages As List(Of Integer)) As Integer\n' This function takes a list of integers representing the initial order of train carriages\n' and returns the minimum number of 180-degree bridge rotations required to sort the carriages\n' in ascending order. The bridge can hold a maximum of two carriages at a time.\n'\n' Example:\n' >>> MinimumSwapsToSort(New List(Of Integer) From {3, 1, 2})\n' 2 (Explanation: Rotate carriages 3 and 1, then 3 and 2)\n' \n' >>> MinimumSwapsToSort(New List(Of Integer) From {4, 3, 2, 1})\n' 6 (Explanation: Requires six rotations to sort the list in ascending order)", "canonical_solution": "Dim swaps As Integer = 0\nFor i As Integer = 0 To carriages.Count - 1\nFor j As Integer = 0 To carriages.Count - 2\nIf carriages(j) > carriages(j + 1) Then\nDim temp As Integer = carriages(j)\ncarriages(j) = carriages(j + 1)\ncarriages(j + 1) = temp\nswaps += 1\nEnd If\nNext\nNext\nReturn swaps\nEnd Function", "test": "Sub Check(ByVal testFunction As Func(Of List(Of Integer), Integer))\nDebug.Assert(testFunction(New List(Of Integer) From {3, 1, 2}) = 2)\nDebug.Assert(testFunction(New List(Of Integer) From {4, 3, 2, 1}) = 6)\nDebug.Assert(testFunction(New List(Of Integer) From {1, 5, 4, 3, 2}) = 6)\nDebug.Assert(testFunction(New List(Of Integer) From {1, 2, 3, 4, 5}) = 0)\nDebug.Assert(testFunction(New List(Of Integer) From {5, 4, 3, 2, 1}) = 10)\nDebug.Assert(testFunction(New List(Of Integer) From {2, 3, 4, 5, 1}) = 4)\nDebug.Assert(testFunction(New List(Of Integer) From {6, 5, 4, 3, 2, 1}) = 15)\n\nConsole.WriteLine(\"Pass\")\nEnd Sub\nSub Main()\n' Test the function\nCheck(AddressOf MinimumSwapsToSort)\nEnd Sub\nEnd Module", "entry_point": "MinimumSwapsToSort", "signature": "Function MinimumSwapsToSort(ByVal carriages As List(Of Integer)) As Integer", "docstring": " This function takes a list of integers representing the initial order of train carriages\n and returns the minimum number of 180-degree bridge rotations required to sort the carriages\n in ascending order. The bridge can hold a maximum of two carriages at a time.\n\n Example:\n >>> MinimumSwapsToSort(New List(Of Integer) From {3, 1, 2})\n 2 (Explanation: Rotate carriages 3 and 1, then 3 and 2)\n \n >>> MinimumSwapsToSort(New List(Of Integer) From {4, 3, 2, 1})\n 6 (Explanation: Requires six rotations to sort the list in ascending order)", "instruction": "Write a Visual Basic function `Function MinimumSwapsToSort(ByVal carriages As List(Of Integer)) As Integer` to solve the following problem:\n This function takes a list of integers representing the initial order of train carriages\n and returns the minimum number of 180-degree bridge rotations required to sort the carriages\n in ascending order. The bridge can hold a maximum of two carriages at a time.\n\n Example:\n >>> MinimumSwapsToSort(New List(Of Integer) From {3, 1, 2})\n 2 (Explanation: Rotate carriages 3 and 1, then 3 and 2)\n \n >>> MinimumSwapsToSort(New List(Of Integer) From {4, 3, 2, 1})\n 6 (Explanation: Requires six rotations to sort the list in ascending order)", "level": "easy"}
{"task_id": "Visual Basic/33", "prompt": "Module Module1\n\n    Function FindAutomorphicNumbers(ByVal start As Integer, ByVal endVal As Integer) As List(Of Integer)\n    ' This function finds and returns all automorphic numbers within a specified range, inclusive.\n    ' An automorphic number is a number whose square ends in the same digits as the number itself.\n    ' The function takes two integers as input: start and endVal, representing the range to search for automorphic numbers.\n    '\n    ' Examples:\n    ' >>> FindAutomorphicNumbers(1, 10)\n    ' {1, 5, 6}\n    ' >>> FindAutomorphicNumbers(1, 25)\n    ' {1, 5, 6, 25}\n    ' >>> FindAutomorphicNumbers(50, 100)\n    ' {}\n    ' >>> FindAutomorphicNumbers(1, 5)\n    ' {1, 5}", "canonical_solution": "        Dim automorphicNumbers As New List(Of Integer)\n        For number As Integer = start To endVal\n            If IsAutomorphic(number) Then\n                automorphicNumbers.Add(number)\n            End If\n        Next\n        Return automorphicNumbers\n    End Function\n\n    Function IsAutomorphic(ByVal number As Integer) As Boolean\n        Dim square As Long = CLng(number) * number\n        Return square.ToString.EndsWith(number.ToString)\n    End Function", "test": "    Sub CheckAutomorphic(ByVal testFunction As Func(Of Integer, Integer, List(Of Integer)))\n        ' Test cases\n        Debug.Assert(testFunction(0, 10).SequenceEqual(New List(Of Integer) From {0, 1, 5, 6}))\n        Debug.Assert(testFunction(25, 30).SequenceEqual(New List(Of Integer) From {25}))\n        Debug.Assert(testFunction(75, 100).SequenceEqual(New List(Of Integer) From {76}))\n\n        Console.WriteLine(\"FindAutomorphicNumbers function passed all tests\")\n    End Sub\n\n    Sub Main()\n        ' Testing the FindAutomorphicNumbers function\n        CheckAutomorphic(AddressOf FindAutomorphicNumbers)\n    End Sub\nEnd Module", "entry_point": "FindAutomorphicNumbers", "signature": "Function FindAutomorphicNumbers(ByVal start As Integer, ByVal endVal As Integer) As List(Of Integer)", "docstring": " This function finds and returns all automorphic numbers within a specified range, inclusive.\n An automorphic number is a number whose square ends in the same digits as the number itself.\n The function takes two integers as input: start and endVal, representing the range to search for automorphic numbers.\n\n Examples:\n >>> FindAutomorphicNumbers(1, 10)\n {1, 5, 6}\n >>> FindAutomorphicNumbers(1, 25)\n {1, 5, 6, 25}\n >>> FindAutomorphicNumbers(50, 100)\n {}\n >>> FindAutomorphicNumbers(1, 5)\n {1, 5}", "instruction": "Write a Visual Basic function `Function FindAutomorphicNumbers(ByVal start As Integer, ByVal endVal As Integer) As List(Of Integer)` to solve the following problem: This function finds and returns all automorphic numbers within a specified range, inclusive.\n An automorphic number is a number whose square ends in the same digits as the number itself.\n The function takes two integers as input: start and endVal, representing the range to search for automorphic numbers.\n\n Examples:\n >>> FindAutomorphicNumbers(1, 10)\n {1, 5, 6}\n >>> FindAutomorphicNumbers(1, 25)\n {1, 5, 6, 25}\n >>> FindAutomorphicNumbers(50, 100)\n {}\n >>> FindAutomorphicNumbers(1, 5)\n {1, 5}", "level": "middle"}
{"task_id": "Visual Basic/34", "prompt": "Module Module1\n    ' Function to reverse an integer\n    Function ReverseInteger(ByVal number As Integer) As Integer\n    ' This function reverses an integer and returns the reversed integer.\n    ' If the input integer is negative, the function maintains its sign and reverses the digits.\n    ' The function handles zero as input, returning zero.\n    '\n    ' Examples:\n    ' >>> ReverseInteger(123)\n    ' 321", "canonical_solution": "        Dim reversed As Integer = 0\n        Dim tempNumber As Integer = Math.Abs(number)\n        While tempNumber > 0\n            Dim digit As Integer = tempNumber Mod 10\n            reversed = reversed * 10 + digit\n            tempNumber \\= 10\n        End While\n        Return If(number >= 0, reversed, -reversed)\n    End Function", "test": "    Sub CheckReverse(ByVal testFunction As Func(Of Integer, Integer))\n        ' Test cases\n        Debug.Assert(testFunction(123) = 321)\n        Debug.Assert(testFunction(-123) = -321)\n        Debug.Assert(testFunction(1000) = 1)\n        Debug.Assert(testFunction(0) = 0)\n        Debug.Assert(testFunction(-5050) = -505)\n\n        Console.WriteLine(\"ReverseInteger function passed all tests\")\n    End Sub\n\n    Sub Main()\n        ' Testing the ReverseInteger function\n        CheckReverse(AddressOf ReverseInteger)\n    End Sub\nEnd Module", "entry_point": "ReverseInteger", "signature": "Function ReverseInteger(ByVal number As Integer) As Integer", "docstring": " This function reverses an integer and returns the reversed integer.\n If the input integer is negative, the function maintains its sign and reverses the digits.\n The function handles zero as input, returning zero.\n\n Examples:\n >>> ReverseInteger(123)\n 321", "instruction": "Write a Visual Basic function `Function ReverseInteger(ByVal number As Integer) As Integer` to solve the following problem: This function reverses an integer and returns the reversed integer.\n If the input integer is negative, the function maintains its sign and reverses the digits.\n The function handles zero as input, returning zero.\n\n Examples:\n >>> ReverseInteger(123)\n 321", "level": "easy"}
{"task_id": "Visual Basic/35", "prompt": "Module Module1\n    ' Function to find the minimal ordered interval ranges that cover all numbers in the array\n    Function FindIntervals(ByVal nums As List(Of Integer)) As List(Of String)\n    ' This function takes a sorted list of integers as input and returns a list of strings representing consecutive intervals.\n    ' For each consecutive sequence of numbers, the interval is formatted as \"start->end\". \n    ' If the sequence consists of a single number, the interval is represented by that number alone.\n    ' The input list is assumed to be sorted and does not contain duplicates.\n    '\n    ' Examples:\n    ' >>> FindIntervals(New List(Of Integer) From {1, 2, 3})\n    ' {\"1->3\"}", "canonical_solution": "        Dim intervals As New List(Of String)\n        If nums.Count = 0 Then\n            Return intervals\n        End If\n\n        Dim start As Integer = nums(0)\n        Dim endVal As Integer = start\n\n        For i As Integer = 1 To nums.Count\n            If i < nums.Count AndAlso nums(i) = nums(i - 1) + 1 Then\n                endVal = nums(i)\n            Else\n                If start = endVal Then\n                    intervals.Add(start.ToString())\n                Else\n                    intervals.Add(start.ToString() & \"->\" & endVal.ToString())\n                End If\n                If i < nums.Count Then\n                    start = nums(i)\n                    endVal = start\n                End If\n            End If\n        Next\n\n        Return intervals\n    End Function", "test": "    Sub Check(ByVal testFunction As Func(Of List(Of Integer), List(Of String)))\n        ' Test cases\n        Debug.Assert(testFunction(New List(Of Integer) From {0, 1, 2, 4, 5, 7}).SequenceEqual(New List(Of String) From {\"0->2\", \"4->5\", \"7\"}))\n        Debug.Assert(testFunction(New List(Of Integer) From {0, 2, 3, 4, 6, 8, 9}).SequenceEqual(New List(Of String) From {\"0\", \"2->4\", \"6\", \"8->9\"}))\n        Debug.Assert(testFunction(New List(Of Integer) From {}).SequenceEqual(New List(Of String) From {}))\n        Debug.Assert(testFunction(New List(Of Integer) From {1}).SequenceEqual(New List(Of String) From {\"1\"}))\n\n        Console.WriteLine(\"FindIntervals function passed all tests\")\n    End Sub\n\n    Sub Main()\n        ' Testing the FindIntervals function\n        Check(AddressOf FindIntervals)\n    End Sub\nEnd Module", "entry_point": "FindIntervals", "signature": "Function FindIntervals(ByVal nums As List(Of Integer)) As List(Of String)", "docstring": " This function takes a sorted list of integers as input and returns a list of strings representing consecutive intervals.\n For each consecutive sequence of numbers, the interval is formatted as \"start->end\". \n If the sequence consists of a single number, the interval is represented by that number alone.\n The input list is assumed to be sorted and does not contain duplicates.\n\n Examples:\n >>> FindIntervals(New List(Of Integer) From {1, 2, 3})\n {\"1->3\"}", "instruction": "Write a Visual Basic function `Function FindIntervals(ByVal nums As List(Of Integer)) As List(Of String)` to solve the following problem: This function takes a sorted list of integers as input and returns a list of strings representing consecutive intervals.\n For each consecutive sequence of numbers, the interval is formatted as \"start->end\". \n If the sequence consists of a single number, the interval is represented by that number alone.\n The input list is assumed to be sorted and does not contain duplicates.\n\n Examples:\n >>> FindIntervals(New List(Of Integer) From {1, 2, 3})\n {\"1->3\"}", "level": "hard"}
{"task_id": "Visual Basic/36", "prompt": "Module Module1\n\n    Function FindMissingNumber(ByVal nums As List(Of Integer)) As Integer\n\n        ' Function to find the missing number in the range [0, n]\n        ' Examples:\n        ' >>> testFunction(New List(Of Integer) From {3, 0, 1})\n        ' 2", "canonical_solution": "        Dim n As Integer = nums.Count\n        Dim expectedSum As Integer = n * (n + 1) \\ 2\n\n        ' Calculate the actual sum of numbers in the array\n        Dim actualSum As Integer = 0\n        For Each num In nums\n            actualSum += num\n        Next\n\n        ' The missing number is the difference between the expected and actual sums\n        Return expectedSum - actualSum\n    End Function", "test": "    Sub Check(ByVal testFunction As Func(Of List(Of Integer), Integer))\n        ' Test cases\n        Debug.Assert(testFunction(New List(Of Integer) From {3, 0, 1}) = 2)\n        Debug.Assert(testFunction(New List(Of Integer) From {0, 1}) = 2)\n        Debug.Assert(testFunction(New List(Of Integer) From {9,6,4,2,3,5,7,0,1}) = 8)\n        Debug.Assert(testFunction(New List(Of Integer) From {0}) = 1)\n\n        Console.WriteLine(\"FindMissingNumber function passed all tests\")\n    End Sub\n\n    Sub Main()\n        ' Testing the FindMissingNumber function\n        Check(AddressOf FindMissingNumber)\n    End Sub\nEnd Module", "entry_point": "FindMissingNumber", "signature": "Function FindMissingNumber(ByVal nums As List(Of Integer)) As Integer", "docstring": "\n Function to find the missing number in the range [0, n]\n Examples:\n >>> testFunction(New List(Of Integer) From {3, 0, 1})\n 2", "instruction": "Write a Visual Basic function `Function FindMissingNumber(ByVal nums As List(Of Integer)) As Integer` to solve the following problem:\n Function to find the missing number in the range [0, n]\n Examples:\n >>> testFunction(New List(Of Integer) From {3, 0, 1})\n 2", "level": "middle"}
{"task_id": "Visual Basic/37", "prompt": "Module Module1\n    Sub MoveZerosToEnd(ByVal nums As List(Of Integer))\n        ' Function to move all zeros in the array to the end\n        ' Examples:\n        ' >>> SequenceEqual(New List(Of Integer) From {3, 0, 1})\n        ' (1,3,0)", "canonical_solution": "        Dim lastNonZeroFoundAt As Integer = 0 ' Keep track of the position to place the next non-zero element\n        For i As Integer = 0 To nums.Count - 1\n            If nums(i) <> 0 Then\n                ' Swap the elements if needed\n                If i <> lastNonZeroFoundAt Then\n                    Dim temp As Integer = nums(i)\n                    nums(i) = nums(lastNonZeroFoundAt)\n                    nums(lastNonZeroFoundAt) = temp\n                End If\n                lastNonZeroFoundAt += 1\n            End If\n        Next\n    End Sub", "test": "    ' Subroutine to check the correctness of the MoveZerosToEnd function\n    Sub Check(ByVal testProcedure As Action(Of List(Of Integer)))\n        Dim testList As New List(Of Integer) From {0, 1, 0, 3, 12}\n        testProcedure(testList)\n        Debug.Assert(testList.SequenceEqual(New List(Of Integer) From {1, 3, 12, 0, 0}))\n\n        testList = New List(Of Integer) From {0, 0, 1}\n        testProcedure(testList)\n        Debug.Assert(testList.SequenceEqual(New List(Of Integer) From {1, 0, 0}))\n\n        Console.WriteLine(\"MoveZerosToEnd function passed all tests\")\n    End Sub\n\n    Sub Main()\n        ' Testing the MoveZerosToEnd function\n        Check(AddressOf MoveZerosToEnd)\n    End Sub\nEnd Module", "entry_point": "MoveZerosToEnd", "signature": "Sub MoveZerosToEnd(ByVal nums As List(Of Integer))", "docstring": "Function to move all zeros in the array to the end\nExamples:\n>>> SequenceEqual(New List(Of Integer) From {3, 0, 1})\n    (1,3,0)", "instruction": "Write a Visual Basic function `nan` to solve the following problem:nan", "level": "hard"}
{"task_id": "Visual Basic/38", "prompt": "Module Module1\n    Function SumBetweenIndices(ByVal nums As List(Of Integer), ByVal left As Integer, ByVal right As Integer) As Integer\n    ' Function to calculate the sum of elements between left and right indices\n    ' Examples:\n    ' >>> SumBetweenIndices([1, 2, 3, 4], 1, 3)\n    ' 9", "canonical_solution": "        Dim sum As Integer = 0\n        For i As Integer = left To right\n            sum += nums(i)\n        Next\n        Return sum\n    End Function", "test": "    Sub Check(ByVal testFunction As Func(Of List(Of Integer), Integer, Integer, Integer))\n        ' Test cases\n        ' Check if the sum of elements between indices 1 and 3 in [1, 2, 3, 4] is 9\n        ' >>> SumBetweenIndices([1, 2, 3, 4], 1, 3)\n        ' 9\n        Debug.Assert(testFunction(New List(Of Integer) From {1, 2, 3, 4}, 1, 3) = 9)\n\n        ' Check if the sum of elements between indices 0 and 2 in [5, 10, 15, 20] is 30\n        ' >>> SumBetweenIndices([5, 10, 15, 20], 0, 2)\n        ' 30\n        Debug.Assert(testFunction(New List(Of Integer) From {5, 10, 15, 20}, 0, 2) = 30)\n\n        ' Check if the sum of all elements in [1, 1, 1, 1, 1] is 5\n        ' >>> SumBetweenIndices([1, 1, 1, 1, 1], 0, 4)\n        ' 5\n        Debug.Assert(testFunction(New List(Of Integer) From {1, 1, 1, 1, 1}, 0, 4) = 5)\n\n        Console.WriteLine(\"SumBetweenIndices function passed all tests\")\n    End Sub\n\n    Sub Main()\n        ' Testing the SumBetweenIndices function\n        Check(AddressOf SumBetweenIndices)\n    End Sub\nEnd Module", "entry_point": "SumBetweenIndices", "signature": "Function SumBetweenIndices(ByVal nums As List(Of Integer), ByVal left As Integer, ByVal right As Integer) As Integer", "docstring": " Function to calculate the sum of elements between left and right indices\n Examples:\n >>> SumBetweenIndices([1, 2, 3, 4], 1, 3)\n 9", "instruction": "Write a Visual Basic function `Function SumBetweenIndices(ByVal nums As List(Of Integer), ByVal left As Integer, ByVal right As Integer) As Integer` to solve the following problem: Function to calculate the sum of elements between left and right indices\n Examples:\n >>> SumBetweenIndices([1, 2, 3, 4], 1, 3)\n 9", "level": "easy"}
{"task_id": "Visual Basic/39", "prompt": "Module Module1\n    Function FindIntersection(ByVal nums1 As List(Of Integer), ByVal nums2 As List(Of Integer)) As List(Of Integer)\n        ' Function to find the intersection of two arrays\n        ' example\n        ' Check if the intersection of [1, 2, 2, 1] and [2, 2] is [2]\n        ' >>> FindIntersection([1, 2, 2, 1], [2, 2])\n        ' [2]", "canonical_solution": "        Dim setNums1 As HashSet(Of Integer) = New HashSet(Of Integer)(nums1)\n\n        Dim intersection As HashSet(Of Integer) = New HashSet(Of Integer)\n        For Each num In nums2\n            If setNums1.Contains(num) Then\n                intersection.Add(num)\n            End If\n        Next\n\n        Return New List(Of Integer)(intersection)\n    End Function", "test": "    Sub Check(ByVal testFunction As Func(Of List(Of Integer), List(Of Integer), List(Of Integer)))\n        ' Test cases\n        ' Check if the intersection of [1, 2, 2, 1] and [2, 2] is [2]\n        ' >>> FindIntersection([1, 2, 2, 1], [2, 2])\n        ' [2]\n        Debug.Assert(testFunction(New List(Of Integer) From {1, 2, 2, 1}, New List(Of Integer) From {2, 2}).SequenceEqual(New List(Of Integer) From {2}))\n\n        ' Check if the intersection of [4, 9, 5] and [9, 4, 9, 8, 4] is [9, 4] or [4, 9]\n        ' >>> FindIntersection([4, 9, 5], [9, 4, 9, 8, 4])\n        ' [4, 9] or [9, 4]\n        Debug.Assert(New HashSet(Of Integer)(testFunction(New List(Of Integer) From {4, 9, 5}, New List(Of Integer) From {9, 4, 9, 8, 4})).SetEquals(New HashSet(Of Integer) From {4, 9}))\n\n        Console.WriteLine(\"FindIntersection function passed all tests\")\n    End Sub\n\n    Sub Main()\n        ' Testing the FindIntersection function\n        Check(AddressOf FindIntersection)\n    End Sub\nEnd Module", "entry_point": "FindIntersection", "signature": "Function FindIntersection(ByVal nums1 As List(Of Integer), ByVal nums2 As List(Of Integer)) As List(Of Integer)", "docstring": " Function to find the intersection of two arrays\n example\n Check if the intersection of [1, 2, 2, 1] and [2, 2] is [2]\n >>> FindIntersection([1, 2, 2, 1], [2, 2])\n [2]", "instruction": "Write a Visual Basic function `Function FindIntersection(ByVal nums1 As List(Of Integer), ByVal nums2 As List(Of Integer)) As List(Of Integer)` to solve the following problem: Function to find the intersection of two arrays\n example\n Check if the intersection of [1, 2, 2, 1] and [2, 2] is [2]\n >>> FindIntersection([1, 2, 2, 1], [2, 2])\n [2]", "level": "middle"}
{"task_id": "Visual Basic/40", "prompt": "Module Module1\n    ' Function to reverse the elements of an array\n    Function ReverseArray(ByVal array As Double()) As Double()\n        ' This function reverses the elements of an array and returns the reversed array.\n        ' It takes an array of doubles as input and returns a new array of doubles with elements in reverse order.\n        '\n        ' Examples:\n        ' >>> ReverseArray({1.0, 2.0, 3.0})\n        ' {3.0, 2.0, 1.0}\n        ' >>> ReverseArray({5.5, 4.4, 3.3, 2.2, 1.1})\n        ' {1.1, 2.2, 3.3, 4.4, 5.5}\n        ' >>> ReverseArray({-1.1, 0.0, 1.1})\n        ' {1.1, 0.0, -1.1}\n        ' >>> ReverseArray({})\n        ' {}", "canonical_solution": "        Dim reversedArray(array.Length - 1) As Double\n        For idx As Integer = 0 To array.Length - 1\n            reversedArray(idx) = array(array.Length - 1 - idx)\n        Next\n        Return reversedArray\n    End Function", "test": "    Sub CheckReverse(ByVal testFunction As Func(Of Double(), Double()))\n        ' Test cases\n        Debug.Assert(testFunction(New Double() {1.0, 2.0, 3.0}).SequenceEqual(New Double() {3.0, 2.0, 1.0}))\n        Debug.Assert(testFunction(New Double() {4.5, 6.7, 8.9, 2.3}).SequenceEqual(New Double() {2.3, 8.9, 6.7, 4.5}))\n        Debug.Assert(testFunction(New Double() {}).SequenceEqual(New Double() {}))\n        Debug.Assert(testFunction(New Double() {7.0}).SequenceEqual(New Double() {7.0}))\n\n        Console.WriteLine(\"ReverseArray function passed all tests\")\n    End Sub\n\n    Sub Main()\n        ' Testing the ReverseArray function\n        CheckReverse(AddressOf ReverseArray)\n    End Sub\nEnd Module", "entry_point": "ReverseArray", "signature": "Function ReverseArray(ByVal array As Double()) As Double()", "docstring": " This function reverses the elements of an array and returns the reversed array.\n It takes an array of doubles as input and returns a new array of doubles with elements in reverse order.\n\n Examples:\n >>> ReverseArray({1.0, 2.0, 3.0})\n {3.0, 2.0, 1.0}\n >>> ReverseArray({5.5, 4.4, 3.3, 2.2, 1.1})\n {1.1, 2.2, 3.3, 4.4, 5.5}\n >>> ReverseArray({-1.1, 0.0, 1.1})\n {1.1, 0.0, -1.1}\n >>> ReverseArray({})\n {}", "instruction": "Write a Visual Basic function `Function ReverseArray(ByVal array As Double()) As Double()` to solve the following problem: This function reverses the elements of an array and returns the reversed array.\n It takes an array of doubles as input and returns a new array of doubles with elements in reverse order.\n\n Examples:\n >>> ReverseArray({1.0, 2.0, 3.0})\n {3.0, 2.0, 1.0}\n >>> ReverseArray({5.5, 4.4, 3.3, 2.2, 1.1})\n {1.1, 2.2, 3.3, 4.4, 5.5}\n >>> ReverseArray({-1.1, 0.0, 1.1})\n {1.1, 0.0, -1.1}\n >>> ReverseArray({})\n {}", "level": "easy"}
{"task_id": "Visual Basic/41", "prompt": "Module Module1\n    Function AbsoluteValue(ByVal n As Integer) As Integer\n    ' Calculates the absolute value of a given integer.\n    ' The function takes an integer n and returns its absolute value.\n    ' The absolute value of an integer is its distance from zero on the number line,\n    ' disregarding its sign.\n    ' \n    ' Examples:\n    ' >>> AbsoluteValue(-5)\n    ' 5\n    ' >>> AbsoluteValue(3)\n    ' 3\n    ' >>> AbsoluteValue(0)\n    ' 0", "canonical_solution": "        Return Math.Abs(n)\n    End Function", "test": "    Sub Main()\n        ' Test the AbsoluteValue function\n        Debug.Assert(AbsoluteValue(-5) = 5)\n        Debug.Assert(AbsoluteValue(3) = 3)\n        Debug.Assert(AbsoluteValue(0) = 0)\n        Debug.Assert(AbsoluteValue(-100) = 100)\n        Debug.Assert(AbsoluteValue(50) = 50)\n        Debug.Assert(AbsoluteValue(-9999) = 9999)\n        Debug.Assert(AbsoluteValue(9999) = 9999)\n\n    End Sub\nEnd Module", "entry_point": "AbsoluteValue", "signature": "Function AbsoluteValue(ByVal n As Integer) As Integer", "docstring": " Calculates the absolute value of a given integer.\n The function takes an integer n and returns its absolute value.\n The absolute value of an integer is its distance from zero on the number line,\n disregarding its sign.\n \n Examples:\n >>> AbsoluteValue(-5)\n 5\n >>> AbsoluteValue(3)\n 3\n >>> AbsoluteValue(0)\n 0", "instruction": "Write a Visual Basic function `Function AbsoluteValue(ByVal n As Integer) As Integer` to solve the following problem: Calculates the absolute value of a given integer.\n The function takes an integer n and returns its absolute value.\n The absolute value of an integer is its distance from zero on the number line,\n disregarding its sign.\n \n Examples:\n >>> AbsoluteValue(-5)\n 5\n >>> AbsoluteValue(3)\n 3\n >>> AbsoluteValue(0)\n 0", "level": "easy"}
{"task_id": "Visual Basic/42", "prompt": "Module Module1\n    Function DetermineSign(ByVal N As Integer) As String\n    ' Determines the sign of a given integer N.\n    ' The function returns \"positive\" if N is greater than zero,\n    ' \"zero\" if N is exactly zero, and \"negative\" if N is less than zero.\n    '\n    ' Examples:\n    ' >>> DetermineSign(10)\n    ' \"positive\"\n    ' >>> DetermineSign(0)\n    ' \"zero\"\n    ' >>> DetermineSign(-1)\n    ' \"negative\"", "canonical_solution": "        If N > 0 Then\n            Return \"positive\"\n        ElseIf N = 0 Then\n            Return \"zero\"\n        Else\n            Return \"negative\"\n        End If\n    End Function", "test": "\n    Sub Main()\n        ' Test the DetermineSign function\n        Debug.Assert(DetermineSign(10) = \"positive\")\n        Debug.Assert(DetermineSign(0) = \"zero\")\n        Debug.Assert(DetermineSign(-5) = \"negative\")\n        Debug.Assert(DetermineSign(1000000000) = \"positive\")\n        Debug.Assert(DetermineSign(-1000000000) = \"negative\")\n        Debug.Assert(DetermineSign(1) = \"positive\")\n        Debug.Assert(DetermineSign(-1) = \"negative\")\n    End Sub\nEnd Module", "entry_point": "DetermineSign", "signature": "Function DetermineSign(ByVal N As Integer) As String", "docstring": " Determines the sign of a given integer N.\n The function returns \"positive\" if N is greater than zero,\n \"zero\" if N is exactly zero, and \"negative\" if N is less than zero.\n\n Examples:\n >>> DetermineSign(10)\n \"positive\"\n >>> DetermineSign(0)\n \"zero\"\n >>> DetermineSign(-1)\n \"negative\"", "instruction": "Write a Visual Basic function `Function DetermineSign(ByVal N As Integer) As String` to solve the following problem: Determines the sign of a given integer N.\n The function returns \"positive\" if N is greater than zero,\n \"zero\" if N is exactly zero, and \"negative\" if N is less than zero.\n\n Examples:\n >>> DetermineSign(10)\n \"positive\"\n >>> DetermineSign(0)\n \"zero\"\n >>> DetermineSign(-1)\n \"negative\"", "level": "easy"}
{"task_id": "Visual Basic/43", "prompt": "Module Module1\n    Function PowerOfTwo(ByVal n As Integer) As Integer\n    ' Calculates the power of two for a given non-negative integer n.\n    ' This function returns 2 raised to the power of n.\n    ' The input n must satisfy the condition: 0 <= n < 31, to prevent integer overflow.\n    '\n    ' Examples:\n    ' >>> PowerOfTwo(2)\n    ' 4\n    ' >>> PowerOfTwo(5)\n    ' 32\n    ' >>> PowerOfTwo(0)\n    ' 1", "canonical_solution": "        Return 2 ^ n\n    End Function", "test": "    Sub Main()\n        ' Test the PowerOfTwo function\n        Debug.Assert(PowerOfTwo(2) = 4)\n        Debug.Assert(PowerOfTwo(5) = 32)\n        Debug.Assert(PowerOfTwo(0) = 1)\n        Debug.Assert(PowerOfTwo(10) = 1024)\n        Debug.Assert(PowerOfTwo(15) = 32768)\n        Debug.Assert(PowerOfTwo(30) = 1073741824)\n    End Sub\nEnd Module", "entry_point": "PowerOfTwo", "signature": "Function PowerOfTwo(ByVal n As Integer) As Integer", "docstring": " Calculates the power of two for a given non-negative integer n.\n This function returns 2 raised to the power of n.\n The input n must satisfy the condition: 0 <= n < 31, to prevent integer overflow.\n\n Examples:\n >>> PowerOfTwo(2)\n 4\n >>> PowerOfTwo(5)\n 32\n >>> PowerOfTwo(0)\n 1", "instruction": "Write a Visual Basic function `Function PowerOfTwo(ByVal n As Integer) As Integer` to solve the following problem: Calculates the power of two for a given non-negative integer n.\n This function returns 2 raised to the power of n.\n The input n must satisfy the condition: 0 <= n < 31, to prevent integer overflow.\n\n Examples:\n >>> PowerOfTwo(2)\n 4\n >>> PowerOfTwo(5)\n 32\n >>> PowerOfTwo(0)\n 1", "level": "easy"}
{"task_id": "Visual Basic/44", "prompt": "Module Module1\n    Function MultiplyNumbers(ByVal A As Integer, ByVal B As Integer) As Integer\n    ' Calculates the product of two given positive integers A and B.\n    ' This function takes two integers A and B as input and returns their product.\n    ' It is designed to work with positive integers in the range 1 to 50000.\n    '\n    ' Examples:\n    ' >>> MultiplyNumbers(2, 3)\n    ' 6\n    ' >>> MultiplyNumbers(10, 20)\n    ' 200\n    ' >>> MultiplyNumbers(1, 50000)\n    ' 50000", "canonical_solution": "        Return A * B\n    End Function", "test": "    Sub Main()\n        ' Test the MultiplyNumbers function\n        Debug.Assert(MultiplyNumbers(2, 3) = 6)\n        Debug.Assert(MultiplyNumbers(10, 20) = 200)\n        Debug.Assert(MultiplyNumbers(1, 50000) = 50000)\n        Debug.Assert(MultiplyNumbers(100, 200) = 20000)\n        Debug.Assert(MultiplyNumbers(123, 456) = 56088)\n        Debug.Assert(MultiplyNumbers(50000, 1) = 50000)\n        Debug.Assert(MultiplyNumbers(25000, 2) = 50000)\n    End Sub\nEnd Module", "entry_point": "MultiplyNumbers", "signature": "Function MultiplyNumbers(ByVal A As Integer, ByVal B As Integer) As Integer", "docstring": " Calculates the product of two given positive integers A and B.\n This function takes two integers A and B as input and returns their product.\n It is designed to work with positive integers in the range 1 to 50000.\n\n Examples:\n >>> MultiplyNumbers(2, 3)\n 6\n >>> MultiplyNumbers(10, 20)\n 200\n >>> MultiplyNumbers(1, 50000)\n 50000", "instruction": "Write a Visual Basic function `Function MultiplyNumbers(ByVal A As Integer, ByVal B As Integer) As Integer` to solve the following problem: Calculates the product of two given positive integers A and B.\n This function takes two integers A and B as input and returns their product.\n It is designed to work with positive integers in the range 1 to 50000.\n\n Examples:\n >>> MultiplyNumbers(2, 3)\n 6\n >>> MultiplyNumbers(10, 20)\n 200\n >>> MultiplyNumbers(1, 50000)\n 50000", "level": "easy"}
{"task_id": "Visual Basic/45", "prompt": "Module Module1\n    Function ArithmeticSequenceNthTerm(ByVal a1 As Integer, ByVal a2 As Integer, ByVal n As Integer) As Integer\n    ' Calculates the nth term of an arithmetic sequence given its first two terms, a1 and a2, and the term number n.\n    ' An arithmetic sequence is a sequence of numbers in which the difference between any two consecutive terms is constant.\n    ' This function uses the formula: nth term = a1 + (n-1) * d, where d is the common difference.\n    '\n    ' Examples:\n    ' >>> ArithmeticSequenceNthTerm(1, 4, 100)\n    ' 298\n    ' >>> ArithmeticSequenceNthTerm(5, 7, 3)\n    ' 9\n    ' >>> ArithmeticSequenceNthTerm(-3, -1, 5)\n    ' 5", "canonical_solution": "        Dim d As Integer = a2 - a1 ' common difference\n        Return a1 + (n - 1) * d\n    End Function", "test": "    Sub Main()\n        ' Test the ArithmeticSequenceNthTerm function\n        Debug.Assert(ArithmeticSequenceNthTerm(1, 4, 100) = 298)\n        Debug.Assert(ArithmeticSequenceNthTerm(5, 7, 3) = 9)\n        Debug.Assert(ArithmeticSequenceNthTerm(-3, -1, 5) = 5)\n        Debug.Assert(ArithmeticSequenceNthTerm(10, 20, 10) = 100)\n        Debug.Assert(ArithmeticSequenceNthTerm(0, 3, 4) = 9)\n        Debug.Assert(ArithmeticSequenceNthTerm(-5, -2, 20) = 52)\n        Debug.Assert(ArithmeticSequenceNthTerm(2, 5, 50) = 149)\n    End Sub\nEnd Module", "entry_point": "ArithmeticSequenceNthTerm", "signature": "Function ArithmeticSequenceNthTerm(ByVal a1 As Integer, ByVal a2 As Integer, ByVal n As Integer) As Integer", "docstring": " Calculates the nth term of an arithmetic sequence given its first two terms, a1 and a2, and the term number n.\n An arithmetic sequence is a sequence of numbers in which the difference between any two consecutive terms is constant.\n This function uses the formula: nth term = a1 + (n-1) * d, where d is the common difference.\n\n Examples:\n >>> ArithmeticSequenceNthTerm(1, 4, 100)\n 298\n >>> ArithmeticSequenceNthTerm(5, 7, 3)\n 9\n >>> ArithmeticSequenceNthTerm(-3, -1, 5)\n 5", "instruction": "Write a Visual Basic function `Function ArithmeticSequenceNthTerm(ByVal a1 As Integer, ByVal a2 As Integer, ByVal n As Integer) As Integer` to solve the following problem: Calculates the nth term of an arithmetic sequence given its first two terms, a1 and a2, and the term number n.\n An arithmetic sequence is a sequence of numbers in which the difference between any two consecutive terms is constant.\n This function uses the formula: nth term = a1 + (n-1) * d, where d is the common difference.\n\n Examples:\n >>> ArithmeticSequenceNthTerm(1, 4, 100)\n 298\n >>> ArithmeticSequenceNthTerm(5, 7, 3)\n 9\n >>> ArithmeticSequenceNthTerm(-3, -1, 5)\n 5", "level": "easy"}
{"task_id": "Visual Basic/46", "prompt": "Module Module1\n    Function ReverseThreeDigitNumber(ByVal n As Integer) As Integer\n    ' Reverses a three-digit number.\n    ' The function takes a three-digit integer n as input and returns its reverse.\n    ' It handles leading zeros in the reversed number by ensuring the output is still an integer.\n    '\n    ' Examples:\n    ' >>> ReverseThreeDigitNumber(358)\n    ' 853\n    ' >>> ReverseThreeDigitNumber(100)\n    ' 1\n    ' >>> ReverseThreeDigitNumber(250)\n    ' 52", "canonical_solution": "        Dim reversed As Integer = 0\n        While n > 0\n            Dim digit As Integer = n Mod 10\n            reversed = reversed * 10 + digit\n            n \\= 10\n        End While\n        Return reversed\n    End Function", "test": "    Sub Main()\n        ' Test the ReverseThreeDigitNumber function\n        Debug.Assert(ReverseThreeDigitNumber(358) = 853)\n        Debug.Assert(ReverseThreeDigitNumber(100) = 1)\n        Debug.Assert(ReverseThreeDigitNumber(250) = 52)\n        Debug.Assert(ReverseThreeDigitNumber(999) = 999)\n        Debug.Assert(ReverseThreeDigitNumber(123) = 321)\n        Debug.Assert(ReverseThreeDigitNumber(505) = 505)\n        Debug.Assert(ReverseThreeDigitNumber(210) = 12)\n    End Sub\nEnd Module", "entry_point": "ReverseThreeDigitNumber", "signature": "Function ReverseThreeDigitNumber(ByVal n As Integer) As Integer", "docstring": " Reverses a three-digit number.\n The function takes a three-digit integer n as input and returns its reverse.\n It handles leading zeros in the reversed number by ensuring the output is still an integer.\n\n Examples:\n >>> ReverseThreeDigitNumber(358)\n 853\n >>> ReverseThreeDigitNumber(100)\n 1\n >>> ReverseThreeDigitNumber(250)\n 52", "instruction": "Write a Visual Basic function `Function ReverseThreeDigitNumber(ByVal n As Integer) As Integer` to solve the following problem: Reverses a three-digit number.\n The function takes a three-digit integer n as input and returns its reverse.\n It handles leading zeros in the reversed number by ensuring the output is still an integer.\n\n Examples:\n >>> ReverseThreeDigitNumber(358)\n 853\n >>> ReverseThreeDigitNumber(100)\n 1\n >>> ReverseThreeDigitNumber(250)\n 52", "level": "easy"}
{"task_id": "Visual Basic/47", "prompt": "Module Module1\n    Function ConvertIntToBoolToInt(ByVal num As Integer) As Integer\n    ' Converts an integer to a boolean and then back to an integer.\n    ' This function takes an integer num as input, converts it to a boolean value, and then converts\n    ' this boolean back to an integer. In Visual Basic, any non-zero integer converts to True (which\n    ' then converts back to -1), and zero converts to False (which converts back to 0).\n    '\n    ' Examples:\n    ' >>> ConvertIntToBoolToInt(3)\n    ' -1\n    ' >>> ConvertIntToBoolToInt(0)\n    ' 0\n    ' >>> ConvertIntToBoolToInt(-2)\n    ' -1", "canonical_solution": "        Dim boolValue As Boolean = CBool(num)\n        Return CInt(boolValue)\n    End Function", "test": "    Sub Main()\n        ' Test the ConvertIntToBoolToInt function\n        Debug.Assert(ConvertIntToBoolToInt(3) = -1)\n        Debug.Assert(ConvertIntToBoolToInt(0) = 0)\n        Debug.Assert(ConvertIntToBoolToInt(-2) = -1)\n        Debug.Assert(ConvertIntToBoolToInt(1) = -1)\n        Debug.Assert(ConvertIntToBoolToInt(999) = -1)\n        Debug.Assert(ConvertIntToBoolToInt(-999) = -1)\n        Debug.Assert(ConvertIntToBoolToInt(2) = -1)\n    End Sub\nEnd Module", "entry_point": "ConvertIntToBoolToInt", "signature": "Function ConvertIntToBoolToInt(ByVal num As Integer) As Integer", "docstring": " Converts an integer to a boolean and then back to an integer.\n This function takes an integer num as input, converts it to a boolean value, and then converts\n this boolean back to an integer. In Visual Basic, any non-zero integer converts to True (which\n then converts back to -1), and zero converts to False (which converts back to 0).\n\n Examples:\n >>> ConvertIntToBoolToInt(3)\n -1\n >>> ConvertIntToBoolToInt(0)\n 0\n >>> ConvertIntToBoolToInt(-2)\n -1", "instruction": "Write a Visual Basic function `Function ConvertIntToBoolToInt(ByVal num As Integer) As Integer` to solve the following problem: Converts an integer to a boolean and then back to an integer.\n This function takes an integer num as input, converts it to a boolean value, and then converts\n this boolean back to an integer. In Visual Basic, any non-zero integer converts to True (which\n then converts back to -1), and zero converts to False (which converts back to 0).\n\n Examples:\n >>> ConvertIntToBoolToInt(3)\n -1\n >>> ConvertIntToBoolToInt(0)\n 0\n >>> ConvertIntToBoolToInt(-2)\n -1", "level": "easy"}
{"task_id": "Visual Basic/48", "prompt": "Module Module1\n    Function AsciiToChar(ByVal asciiCode As Integer) As Char\n    ' Converts an ASCII code to its corresponding character.\n    ' This function takes an integer asciiCode as input, which represents an ASCII code,\n    ' and returns the character that corresponds to that ASCII code.\n    ' The input is guaranteed to be within the range of visible ASCII characters (1 to 127).\n    '\n    ' Examples:\n    ' >>> AsciiToChar(65)\n    ' 'A'\n    ' >>> AsciiToChar(97)\n    ' 'a'\n    ' >>> A", "canonical_solution": "        Return Chr(asciiCode)\n    End Function", "test": "    Sub Main()\n        ' Test the AsciiToChar function\n        Debug.Assert(AsciiToChar(65) = \"A\")\n        Debug.Assert(AsciiToChar(97) = \"a\")\n        Debug.Assert(AsciiToChar(48) = \"0\")\n        Debug.Assert(AsciiToChar(36) = \"$\")\n        Debug.Assert(AsciiToChar(64) = \"@\")\n        Debug.Assert(AsciiToChar(32) = \" \")\n        Debug.Assert(AsciiToChar(126) = \"~\")\n    End Sub\nEnd Module", "entry_point": "AsciiToChar", "signature": "Function AsciiToChar(ByVal asciiCode As Integer) As Char", "docstring": " Converts an ASCII code to its corresponding character.\n This function takes an integer asciiCode as input, which represents an ASCII code,\n and returns the character that corresponds to that ASCII code.\n The input is guaranteed to be within the range of visible ASCII characters (1 to 127).\n\n Examples:\n >>> AsciiToChar(65)\n A\n >>> AsciiToChar(97)\n a\n >>> A", "instruction": "Write a Visual Basic function `Function AsciiToChar(ByVal asciiCode As Integer) As Char` to solve the following problem: Converts an ASCII code to its corresponding character.\n This function takes an integer asciiCode as input, which represents an ASCII code,\n and returns the character that corresponds to that ASCII code.\n The input is guaranteed to be within the range of visible ASCII characters (1 to 127).\n\n Examples:\n >>> AsciiToChar(65)\n A\n >>> AsciiToChar(97)\n a\n >>> A", "level": "easy"}
{"task_id": "Visual Basic/49", "prompt": "Module Module1\n    Function CharToAscii(ByVal character As Char) As Integer\n    ' Converts a visible character (excluding space) to its ASCII code.\n    ' This function takes a single character as input and returns its ASCII code as an integer.\n    ' The input is guaranteed to be a visible character, meaning it's within the printable ASCII range\n    ' (excluding space).\n    '\n    ' Examples:\n    ' >>> CharToAscii(\"A\")\n    ' 65\n    ' >>> CharToAscii(\"a\")\n    ' 97\n    ' >>> CharToAscii(\"0\")\n    ' 48", "canonical_solution": "        Return Asc(character)\n    End Function", "test": "    Sub Main()\n        ' Test the CharToAscii function\n        Debug.Assert(CharToAscii(\"A\"c) = 65)\n        Debug.Assert(CharToAscii(\"a\"c) = 97)\n        Debug.Assert(CharToAscii(\"0\"c) = 48)\n        Debug.Assert(CharToAscii(\"$\"c) = 36)\n        Debug.Assert(CharToAscii(\"@\"c) = 64)\n        Debug.Assert(CharToAscii(\"~\"c) = 126)\n        Debug.Assert(CharToAscii(\"!\"c) = 33)\n    End Sub\nEnd Module", "entry_point": "CharToAscii", "signature": "Function CharToAscii(ByVal character As Char) As Integer", "docstring": " Converts a visible character (excluding space) to its ASCII code.\n This function takes a single character as input and returns its ASCII code as an integer.\n The input is guaranteed to be a visible character, meaning its within the printable ASCII range\n (excluding space).\n\n Examples:\n >>> CharToAscii(\"A\")\n 65\n >>> CharToAscii(\"a\")\n 97\n >>> CharToAscii(\"0\")\n 48", "instruction": "Write a Visual Basic function `Function CharToAscii(ByVal character As Char) As Integer` to solve the following problem: Converts a visible character (excluding space) to its ASCII code.\n This function takes a single character as input and returns its ASCII code as an integer.\n The input is guaranteed to be a visible character, meaning its within the printable ASCII range\n (excluding space).\n\n Examples:\n >>> CharToAscii(\"A\")\n 65\n >>> CharToAscii(\"a\")\n 97\n >>> CharToAscii(\"0\")\n 48", "level": "easy"}
{"task_id": "Visual Basic/50", "prompt": "Module Module1\n    Function CalculateExpression(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer) As Integer\n    ' Calculates the value of the expression (a+b) * c for given integers a, b, and c.\n    ' This function takes three integers, a, b, and c, as input and returns the result of the expression (a+b) * c.\n    ' It is designed to handle values where -10^4 < a, b, c < 10^4.\n    '\n    ' Examples:\n    ' >>> CalculateExpression(2, 3, 5)\n    ' 25\n    ' >>> CalculateExpression(-1, 2, 3)\n    ' 3\n    ' >>> CalculateExpression(0, 0, 1)\n    ' 0", "canonical_solution": "        Return (a + b) * c\n    End Function", "test": "    Sub Main()\n        ' Test the CalculateExpression function\n        Debug.Assert(CalculateExpression(2, 3, 5) = 25)\n        Debug.Assert(CalculateExpression(-1, 2, 3) = 3)\n        Debug.Assert(CalculateExpression(0, 0, 1) = 0)\n        Debug.Assert(CalculateExpression(10, -5, 2) = 10)\n        Debug.Assert(CalculateExpression(-2, -3, -4) = 20)\n        Debug.Assert(CalculateExpression(1000, 2000, 3) = 9000)\n        Debug.Assert(CalculateExpression(-100, 50, 10) = -500)\n    End Sub\nEnd Module", "entry_point": "CalculateExpression", "signature": "Function CalculateExpression(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer) As Integer", "docstring": " Calculates the value of the expression (a+b) * c for given integers a, b, and c.\n This function takes three integers, a, b, and c, as input and returns the result of the expression (a+b) * c.\n It is designed to handle values where -10^4 < a, b, c < 10^4.\n\n Examples:\n >>> CalculateExpression(2, 3, 5)\n 25\n >>> CalculateExpression(-1, 2, 3)\n 3\n >>> CalculateExpression(0, 0, 1)\n 0", "instruction": "Write a Visual Basic function `Function CalculateExpression(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer) As Integer` to solve the following problem: Calculates the value of the expression (a+b) * c for given integers a, b, and c.\n This function takes three integers, a, b, and c, as input and returns the result of the expression (a+b) * c.\n It is designed to handle values where -10^4 < a, b, c < 10^4.\n\n Examples:\n >>> CalculateExpression(2, 3, 5)\n 25\n >>> CalculateExpression(-1, 2, 3)\n 3\n >>> CalculateExpression(0, 0, 1)\n 0", "level": "easy"}
