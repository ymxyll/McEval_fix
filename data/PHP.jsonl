{"task_id": "PHP/1", "prompt": "<?php\nassert_options(ASSERT_ACTIVE, 1);\nassert_options(ASSERT_BAIL, 1);\n/**\n    * Check if in given list of numbers, any two numbers are closer to each other than\n    * given threshold.\n*/\nfunction has_close_elements($numbers, $threshold) ", "canonical_solution": "{\n    $count = count($numbers);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count; $j++) {\n            if ($i != $j) {\n                $distance = abs($numbers[$i] - $numbers[$j]);\n                if ($distance < $threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "test": "// Test cases\nfunction test_has_close_elements() {\n    if (has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) != true){\n        exit(1);\n    }\n\n    if (has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) != false){\n        exit(1);\n    }\n    if (has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) != true){\n        exit(1);\n    }\n    if (has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) != false){\n        exit(1);\n    }\n    if (has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) != true){\n        exit(1);\n    }\n    if (has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) != true){\n        exit(1);\n    }\n    if (has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) != false){\n        exit(1);\n    }\n}\n\ntest_has_close_elements();\n\n?>", "entry_point": "has_close_elements", "signature": "function has_close_elements($numbers, $threshold)", "docstring": "Check if in given list of numbers, any two numbers are closer to each other than\ngiven threshold.", "instruction": "Write a PHP function `function has_close_elements($numbers, $threshold)` to solve the following problem:\nCheck if in given list of numbers, any two numbers are closer to each other than\ngiven threshold.", "level": "easy"}
{"task_id": "PHP/2", "prompt": "<?php\n\n\n/**\n    * Determines the outcome of a \"Rock, Paper, Scissors\" game.\n    * In this game, each player selects either rock (0), paper (1), or scissors (2).\n    * The rules are as follows:\n    * - Paper beats rock\n    * - Rock beats scissors\n    * - Scissors beats paper\n    * If both players choose the same item, it's a draw.\n    * Input: Two integers representing the choices of two players.\n    * Output: Returns 1 if the first player wins, -1 if the second player wins, and 0 for a draw.\n*/\n\nfunction determineGameOutcome($player1, $player2) ", "canonical_solution": "{\n    if ($player1 === $player2) {\n        return 0; // Draw\n    } elseif (($player1 === 0 && $player2 === 1) || // Paper beats Rock\n              ($player1 === 1 && $player2 === 2) || // Scissors beats Paper\n              ($player1 === 2 && $player2 === 0)) { // Rock beats Scissors\n        return -1; // Player 2 wins\n    } else {\n        return 1; // Player 1 wins\n    }\n}", "test": "function main(){\n    \n    assert(determineGameOutcome(0, 1) === -1);\n    assert(determineGameOutcome(1, 2) === -1);\n    assert(determineGameOutcome(2, 0) === -1);\n    assert(determineGameOutcome(0, 2) === 1);\n    assert(determineGameOutcome(1, 0) === 1);\n    assert(determineGameOutcome(2, 1) === 1);\n    assert(determineGameOutcome(0, 0) === 0);\n    assert(determineGameOutcome(1, 1) === 0);\n    assert(determineGameOutcome(2, 2) === 0);\n}\nmain();\n// echo \"All test passed!\\n\";\n?>", "entry_point": "determineGameOutcome", "signature": "function determineGameOutcome($player1, $player2)", "docstring": "Determines the outcome of a \"Rock, Paper, Scissors\" game.\nIn this game, each player selects either rock (0), paper (1), or scissors (2).\nThe rules are as follows:\n- Paper beats rock\n- Rock beats scissors\n- Scissors beats paper\nIf both players choose the same item, it's a draw.\nInput: Two integers representing the choices of two players.\nOutput: Returns 1 if the first player wins, -1 if the second player wins, and 0 for a draw.", "instruction": "Write a PHP function `function determineGameOutcome($player1, $player2)` to solve the following problem:\nDetermines the outcome of a \"Rock, Paper, Scissors\" game.\nIn this game, each player selects either rock (0), paper (1), or scissors (2).\nThe rules are as follows:\n- Paper beats rock\n- Rock beats scissors\n- Scissors beats paper\nIf both players choose the same item, it's a draw.\nInput: Two integers representing the choices of two players.\nOutput: Returns 1 if the first player wins, -1 if the second player wins, and 0 for a draw.", "level": "easy"}
{"task_id": "PHP/3", "prompt": "<?php\n\n/**\n    * Removes all asterisks (*) from a string except those at the beginning.\n    * This function takes a string that may contain alphabetic characters and asterisks.\n    * It will preserve any asterisks that appear at the start of the string but remove all others.\n    * For example, a string like \"***Hello*World**\" would be transformed to \"***HelloWorld\".\n    * Input: A single string.\n    * Output: The modified string with only the leading asterisks retained.\n*/\nfunction removeInnerAsterisks($string) ", "canonical_solution": "{\n    $result = '';\n    $leadingAsterisk = true;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] != '*' || $leadingAsterisk) {\n            $result .= $string[$i];\n        }\n        if ($string[$i] != '*' && $leadingAsterisk) {\n            $leadingAsterisk = false;\n        }\n    }\n    return $result;\n}", "test": "function main(){\n    assert(removeInnerAsterisks(\"***Hello*World**\") === \"***HelloWorld\");\n    assert(removeInnerAsterisks(\"****\") === \"****\");\n    assert(removeInnerAsterisks(\"abc*def**ghi\") === \"abcdefghi\");\n    assert(removeInnerAsterisks(\"*a*b*c*\") === \"*abc\");\n    assert(removeInnerAsterisks(\"\") === \"\");\n    \n}\n\nmain();\n?>", "entry_point": "removeInnerAsterisks", "signature": "function removeInnerAsterisks($string)", "docstring": "Removes all asterisks (*) from a string except those at the beginning.\nThis function takes a string that may contain alphabetic characters and asterisks.\nIt will preserve any asterisks that appear at the start of the string but remove all others.\nFor example, a string like \"***Hello*World**\" would be transformed to \"***HelloWorld\".\nInput: A single string.\nOutput: The modified string with only the leading asterisks retained.", "instruction": "Write a PHP function `function removeInnerAsterisks($string)` to solve the following problem:\nRemoves all asterisks (*) from a string except those at the beginning.\nThis function takes a string that may contain alphabetic characters and asterisks.\nIt will preserve any asterisks that appear at the start of the string but remove all others.\nFor example, a string like \"***Hello*World**\" would be transformed to \"***HelloWorld\".\nInput: A single string.\nOutput: The modified string with only the leading asterisks retained.", "level": "easy"}
{"task_id": "PHP/4", "prompt": "<?php\n\n/**\n * Converts a numerical score to its corresponding letter grade.\n * The grading system is as follows:\n * - A score between 90 and 100 (inclusive) is graded as 'A'.\n * - A score between 80 and 89 (inclusive) is graded as 'B'.\n * - A score between 70 and 79 (inclusive) is graded as 'C'.\n * - A score between 60 and 69 (inclusive) is graded as 'D'.\n * - A score below 60 is graded as 'E'.\n * If the score is outside the range of 0 to 100, an error message is returned.\n * Input: A numeric score.\n * Output: Returns the corresponding letter grade or an error message if the score is out of range.\n */\n \nfunction convertScoreToGrade($score) ", "canonical_solution": "{\n    if ($score < 0 || $score > 100) {\n        return \"Score is error!\";\n    } elseif ($score >= 90) {\n        return 'A';\n    } elseif ($score >= 80) {\n        return 'B';\n    } elseif ($score >= 70) {\n        return 'C';\n    } elseif ($score >= 60) {\n        return 'D';\n    } else {\n        return 'E';\n    }\n}", "test": "function main(){\n    assert(convertScoreToGrade(95) === 'A');\n    assert(convertScoreToGrade(85) === 'B');\n    assert(convertScoreToGrade(75) === 'C');\n    assert(convertScoreToGrade(65) === 'D');\n    assert(convertScoreToGrade(55) === 'E');\n    assert(convertScoreToGrade(-1) === 'Score is error!');\n    assert(convertScoreToGrade(101) === 'Score is error!');\n    \n}\n\nmain();\n?>", "entry_point": "convertScoreToGrade", "signature": "function convertScoreToGrade($score)", "docstring": "Converts a numerical score to its corresponding letter grade.\nThe grading system is as follows:\n- A score between 90 and 100 (inclusive) is graded as 'A'.\n- A score between 80 and 89 (inclusive) is graded as 'B'.\n- A score between 70 and 79 (inclusive) is graded as 'C'.\n- A score between 60 and 69 (inclusive) is graded as 'D'.\n- A score below 60 is graded as 'E'.\nIf the score is outside the range of 0 to 100, an error message is returned.\nInput: A numeric score.\nOutput: Returns the corresponding letter grade or an error message if the score is out of range.", "instruction": "Write a PHP function `function convertScoreToGrade($score)` to solve the following problem:\nConverts a numerical score to its corresponding letter grade.\nThe grading system is as follows:\n- A score between 90 and 100 (inclusive) is graded as 'A'.\n- A score between 80 and 89 (inclusive) is graded as 'B'.\n- A score between 70 and 79 (inclusive) is graded as 'C'.\n- A score between 60 and 69 (inclusive) is graded as 'D'.\n- A score below 60 is graded as 'E'.\nIf the score is outside the range of 0 to 100, an error message is returned.\nInput: A numeric score.\nOutput: Returns the corresponding letter grade or an error message if the score is out of range.", "level": "easy"}
{"task_id": "PHP/5", "prompt": "<?php\n/**\n * Calculates the day number of the year for a given date.\n * This function takes a date in the format 'YYYY/MM/DD' and returns the day number\n * in the year for that date. For example, '2024/01/01' would return 1, as it is the first day of the year,\n * while '2024/12/31' would return 366 for a leap year or 365 otherwise.\n * Input: A string representing the date in 'YYYY/MM/DD' format.\n * Output: An integer representing the day number in the year.\n */\n\nfunction getDayOfYear($date): int ", "canonical_solution": "{\n    $dateParts = explode('/', $date);\n    $year = (int) $dateParts[0];\n    $month = (int) $dateParts[1];\n    $day = (int) $dateParts[2];\n\n    $isLeapYear = ($year % 4 == 0 && $year % 100 != 0) || $year % 400 == 0;\n    $monthDays = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    $dayOfYear = 0;\n    for ($i = 0; $i < $month - 1; $i++) {\n        $dayOfYear += $monthDays[$i];\n    }\n    $dayOfYear += $day;\n\n    return $dayOfYear;\n}", "test": "function main(){\n    assert(getDayOfYear('2024/01/01') === 1);\n    assert(getDayOfYear('2024/03/01') === 61); // Non-leap year\n    assert(getDayOfYear('2024/12/31') === 366); // Leap year\n    assert(getDayOfYear('2023/12/31') === 365); // Non-leap year\n    \n}\n\nmain();\n?>", "entry_point": "getDayOfYear", "signature": "function getDayOfYear($date): int", "docstring": "Calculates the day number of the year for a given date.\nThis function takes a date in the format 'YYYY/MM/DD' and returns the day number\nin the year for that date. For example, '2024/01/01' would return 1, as it is the first day of the year,\nwhile '2024/12/31' would return 366 for a leap year or 365 otherwise.\nInput: A string representing the date in 'YYYY/MM/DD' format.\nOutput: An integer representing the day number in the year.", "instruction": "Write a PHP function `function getDayOfYear($date): int` to solve the following problem:\nCalculates the day number of the year for a given date.\nThis function takes a date in the format 'YYYY/MM/DD' and returns the day number\nin the year for that date. For example, '2024/01/01' would return 1, as it is the first day of the year,\nwhile '2024/12/31' would return 366 for a leap year or 365 otherwise.\nInput: A string representing the date in 'YYYY/MM/DD' format.\nOutput: An integer representing the day number in the year.", "level": "easy"}
{"task_id": "PHP/6", "prompt": "<?php\n/**\n    * Calculates the sum of all positive integers less than or equal to a given number N that are not 'related' to the number 2.\n    * A number is 'related' to 2 if it is divisible by 2 or if any of its digits is 2.\n    * For example, for N = 8, the numbers not related to 2 are 1, 3, 5, and 7, and their sum is 16.\n    * Input: An integer N.\n    * Output: Returns the sum of all integers less than or equal to N that are not related to 2.\n*/\n\nfunction sumOfUnrelatedToTwo($N) ", "canonical_solution": "{\n    $sum = 0;\n    for ($i = 1; $i <= $N; $i++) {\n        if ($i % 2 != 0 && strpos((string)$i, '2') === false) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}", "test": "function main(){\n    assert(sumOfUnrelatedToTwo(8) === 16);  // 1 + 3 + 5 + 7\n    assert(sumOfUnrelatedToTwo(10) === 25); // 1 + 3 + 5 + 7 + 9\n    assert(sumOfUnrelatedToTwo(2) === 1);   // 1\n    assert(sumOfUnrelatedToTwo(22) === 100); // Sum of numbers not containing 2 and not even, up to 22\n    assert(sumOfUnrelatedToTwo(0) === 0);   // No numbers to sum\n    \n}\n\n\nmain();\n?>", "entry_point": "sumOfUnrelatedToTwo", "signature": "function sumOfUnrelatedToTwo($N)", "docstring": "Calculates the sum of all positive integers less than or equal to a given number N that are not 'related' to the number 2.\nA number is 'related' to 2 if it is divisible by 2 or if any of its digits is 2.\nFor example, for N = 8, the numbers not related to 2 are 1, 3, 5, and 7, and their sum is 16.\nInput: An integer N.\nOutput: Returns the sum of all integers less than or equal to N that are not related to 2.", "instruction": "Write a PHP function `function sumOfUnrelatedToTwo($N)` to solve the following problem:\nCalculates the sum of all positive integers less than or equal to a given number N that are not 'related' to the number 2.\nA number is 'related' to 2 if it is divisible by 2 or if any of its digits is 2.\nFor example, for N = 8, the numbers not related to 2 are 1, 3, 5, and 7, and their sum is 16.\nInput: An integer N.\nOutput: Returns the sum of all integers less than or equal to N that are not related to 2.", "level": "easy"}
{"task_id": "PHP/7", "prompt": "<?php\n\n/**\n    * Calculates the number of different ways to exchange a paper bill into coins.\n    * Given a paper bill of value N (1 <= N <= 10), there are two types of coins available: 1 and 2 units.\n    * The function determines how many distinct combinations of these coins can sum up to the value of the bill.\n    * Example: For a bill of value 4, there are 5 ways:\n    * 4 = 1 + 1 + 1 + 1\n    * 4 = 2 + 1 + 1\n    * 4 = 1 + 2 + 1\n    * 4 = 1 + 1 + 2\n    * 4 = 2 + 2\n    * Input: An integer representing the bill value.\n    * Output: Returns the number of different ways to exchange the bill into coins.\n*/\nfunction countCoinExchangeWays($billValue) ", "canonical_solution": "{\n    // Base case: When bill value is 0\n    if ($billValue == 1) {\n        return 1;\n    }\n\n    // When bill value becomes negative, no valid combination\n    if ($billValue == 2) {\n        return 2;\n    }\n\n    // Count combinations by subtracting 1 and 2 from the current bill value\n    return countCoinExchangeWays($billValue - 1) + countCoinExchangeWays($billValue - 2);\n}", "test": "function main(){\n    assert(countCoinExchangeWays(4) === 5);\n    assert(countCoinExchangeWays(3) === 3);\n    assert(countCoinExchangeWays(2) === 2);\n    assert(countCoinExchangeWays(1) === 1);\n}\n\nmain();\n?>", "entry_point": "countCoinExchangeWays", "signature": "function countCoinExchangeWays($billValue)", "docstring": "Calculates the number of different ways to exchange a paper bill into coins.\nGiven a paper bill of value N (1 <= N <= 10), there are two types of coins available: 1 and 2 units.\nThe function determines how many distinct combinations of these coins can sum up to the value of the bill.\nExample: For a bill of value 4, there are 5 ways:\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nInput: An integer representing the bill value.\nOutput: Returns the number of different ways to exchange the bill into coins.", "instruction": "Write a PHP function `function countCoinExchangeWays($billValue)` to solve the following problem:\nCalculates the number of different ways to exchange a paper bill into coins.\nGiven a paper bill of value N (1 <= N <= 10), there are two types of coins available: 1 and 2 units.\nThe function determines how many distinct combinations of these coins can sum up to the value of the bill.\nExample: For a bill of value 4, there are 5 ways:\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nInput: An integer representing the bill value.\nOutput: Returns the number of different ways to exchange the bill into coins.", "level": "easy"}
{"task_id": "PHP/8", "prompt": "<?php\n\n/**\n * Compares two playing cards to determine which one is higher based on a given trump suit.\n * In this game, each card is represented by its suit and rank (e.g., '8D', 'QS').\n * The trump suit is one of the four suits: Spades (S), Hearts (H), Diamonds (D), or Clubs (C).\n * The rules for comparison are as follows:\n * - If neither card is of the trump suit, the card with the higher rank wins.\n * - If both cards are of the trump suit, the card with the higher rank wins.\n * - If one card is of the trump suit and the other is not, the trump suit card wins regardless of rank.\n * - If both cards have the same rank, the result is a draw.\n * Input: The trump suit and two card strings.\n * Output: Returns 1 if the first card wins, -1 if the second card wins, and 0 for a draw.\n */\n\nfunction compareCards($trumpSuit, $card1, $card2) ", "canonical_solution": "{\n    // Function to convert card rank to numerical value\n    $getNumericRank = function($card) {\n        $rank = substr($card, 0, -1);\n        switch ($rank) {\n            case 'A': return 14;\n            case 'K': return 13;\n            case 'Q': return 12;\n            case 'J': return 11;\n            default: return intval($rank);\n        }\n    };\n\n    $rank1 = $getNumericRank($card1);\n    $rank2 = $getNumericRank($card2);\n    $suit1 = substr($card1, -1);\n    $suit2 = substr($card2, -1);\n\n    $isTrump1 = $suit1 === $trumpSuit;\n    $isTrump2 = $suit2 === $trumpSuit;\n\n    if ($isTrump1 && !$isTrump2) {\n        return 1;\n    } elseif (!$isTrump1 && $isTrump2) {\n        return -1;\n    } elseif ($rank1 === $rank2) {\n        return 0;\n    } elseif ($rank1 > $rank2) {\n        return 1;\n    } else {\n        return -1;\n    }\n}", "test": "function main(){\n    assert(compareCards('S', '8D', '3S') === -1); \n    assert(compareCards('S', '8D', '9S') === -1); // Non-trump vs trump\n    assert(compareCards('H', '8H', '7H') === 1);  // Both trump, first higher\n    assert(compareCards('D', '9C', '9S') === 0);  // Same rank, non-trump\n    assert(compareCards('C', 'QH', 'JS') === 1);  // Neither trump, first higher\n    assert(compareCards('D', 'KD', 'AD') === -1); // Both trump, second higher\n\n}\nmain();\n?>", "entry_point": "compareCards", "signature": "function compareCards($trumpSuit, $card1, $card2)", "docstring": "Compares two playing cards to determine which one is higher based on a given trump suit.\nIn this game, each card is represented by its suit and rank (e.g., '8D', 'QS').\nThe trump suit is one of the four suits: Spades (S), Hearts (H), Diamonds (D), or Clubs (C).\nThe rules for comparison are as follows:\n- If neither card is of the trump suit, the card with the higher rank wins.\n- If both cards are of the trump suit, the card with the higher rank wins.\n- If one card is of the trump suit and the other is not, the trump suit card wins regardless of rank.\n- If both cards have the same rank, the result is a draw.\nInput: The trump suit and two card strings.\nOutput: Returns 1 if the first card wins, -1 if the second card wins, and 0 for a draw.", "instruction": "Write a PHP function `function compareCards($trumpSuit, $card1, $card2)` to solve the following problem:\nCompares two playing cards to determine which one is higher based on a given trump suit.\nIn this game, each card is represented by its suit and rank (e.g., '8D', 'QS').\nThe trump suit is one of the four suits: Spades (S), Hearts (H), Diamonds (D), or Clubs (C).\nThe rules for comparison are as follows:\n- If neither card is of the trump suit, the card with the higher rank wins.\n- If both cards are of the trump suit, the card with the higher rank wins.\n- If one card is of the trump suit and the other is not, the trump suit card wins regardless of rank.\n- If both cards have the same rank, the result is a draw.\nInput: The trump suit and two card strings.\nOutput: Returns 1 if the first card wins, -1 if the second card wins, and 0 for a draw.", "level": "hard"}
{"task_id": "PHP/9", "prompt": "<?php\n\n/**\n    * This function calculates the minimum number of 6x6xh packages required to ship an order of products of various sizes.\n    * The sizes of the products range from 1x1 to 6x6, and each product requires a certain amount of space in the package.\n    * The goal is to efficiently pack these products to minimize the number of packages, reducing shipping costs.\n    *\n    * Input: Six integers ($a, $b, $c, $d, $e, $f), each representing the quantity of products from size 1x1 to 6x6.\n    * Output: An integer representing the minimum number of 6x6xh packages required to ship the order.\n    *\n    * Example:\n    * For an order with 1 product of size 1x1, 2 products of size 2x2, and 1 product of size 3x3,\n    * the function will calculate and return the minimum number of packages needed.\n    */\n\nfunction calculateMinimumPackages($a, $b, $c, $d, $e, $f): int ", "canonical_solution": "{\n        $need2 = [0, 5, 3, 1];\n        $box = $f + $e + $d + intdiv($c + 3, 4);\n    \n        $need2num = $d * 5 + $need2[$c % 4];\n        if ($need2num < $b) {\n            $box += intdiv($b - $need2num + 8, 9);\n        }\n    \n        $need1num = $box * 36 - ($f * 36 + $e * 25 + $d * 16 + $c * 9 + $b * 4);\n        if ($need1num < $a) {\n            $box += intdiv($a - $need1num + 35, 36);\n        }\n        return $box;\n}", "test": "function main(){\n    assert(calculateMinimumPackages(0, 0, 4, 0, 0, 1) === 2);\n    assert(calculateMinimumPackages(7, 5, 1, 0, 0, 0) === 1);\n    assert(calculateMinimumPackages(0, 0, 0, 0, 0, 0) === 0);\n    assert(calculateMinimumPackages(0, 0, 4, 1, 1, 1) === 4);\n    assert(calculateMinimumPackages(1, 2, 1, 1, 1, 1) === 4);\n    \n}\n\n\nmain();\n?>", "entry_point": "calculateMinimumPackages", "signature": "function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int", "docstring": "This function calculates the minimum number of 6x6xh packages required to ship an order of products of various sizes.\nThe sizes of the products range from 1x1 to 6x6, and each product requires a certain amount of space in the package.\nThe goal is to efficiently pack these products to minimize the number of packages, reducing shipping costs.\n\nInput: Six integers ($a, $b, $c, $d, $e, $f), each representing the quantity of products from size 1x1 to 6x6.\nOutput: An integer representing the minimum number of 6x6xh packages required to ship the order.\n\nExample:\nFor an order with 1 product of size 1x1, 2 products of size 2x2, and 1 product of size 3x3,\nthe function will calculate and return the minimum number of packages needed.", "instruction": "Write a PHP function `function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int` to solve the following problem:\nThis function calculates the minimum number of 6x6xh packages required to ship an order of products of various sizes.\nThe sizes of the products range from 1x1 to 6x6, and each product requires a certain amount of space in the package.\nThe goal is to efficiently pack these products to minimize the number of packages, reducing shipping costs.\n\nInput: Six integers ($a, $b, $c, $d, $e, $f), each representing the quantity of products from size 1x1 to 6x6.\nOutput: An integer representing the minimum number of 6x6xh packages required to ship the order.\n\nExample:\nFor an order with 1 product of size 1x1, 2 products of size 2x2, and 1 product of size 3x3,\nthe function will calculate and return the minimum number of packages needed.", "level": "easy"}
{"task_id": "PHP/10", "prompt": "<?php\n\n/**\n    * Calculates the number of chickens and rabbits in a farm.\n    * Given the total number of animals and the total number of legs, the function determines\n    * how many chickens and rabbits are there. \n    * Assumptions: \n    * - Each chicken has 2 legs.\n    * - Each rabbit has 4 legs.\n    * - The total number of animals and legs are non-negative integers.\n    * \n    * Input: Two integers, $totalAnimals (total number of animals) and $totalLegs (total number of legs).\n    * Output: Returns an array [number_of_chickens, number_of_rabbits] if a valid solution exists, \n    *         or \"No answer\" if no valid solution is found.\n    * \n    * Example:\n    * For 5 animals and 12 legs, the function will return [4, 1] (4 chickens and 1 rabbit).\n    * For 10 animals and 16 legs, the function will return \"No answer\" as no valid combination exists.\n    */\n\n    function calculateAnimals($totalAnimals, $totalLegs) ", "canonical_solution": "{\n        // Check if the total number of legs is even\n        if ($totalLegs % 2 != 0) {\n            return \"No answer\";\n        }\n    \n        // Calculate the number of rabbits\n        $rabbits = ($totalLegs - 2 * $totalAnimals) / 2;\n    \n        // Calculate the number of chickens\n        $chickens = $totalAnimals - $rabbits;\n    \n        // Check if the number of rabbits and chickens are non-negative integers\n        if ($rabbits < 0 || $chickens < 0 || $rabbits != (int)$rabbits || $chickens != (int)$chickens) {\n            return \"No answer\";\n        }\n    \n        return [$chickens, $rabbits];\n    }", "test": "function main(){\n    assert(calculateAnimals(14, 32) === [12, 2]);\n    assert(calculateAnimals(10, 16) === \"No answer\");\n    assert(calculateAnimals(5, 12) === [4, 1]);\n    assert(calculateAnimals(3, 10) === [1, 2]);\n    assert(calculateAnimals(0, 0) === [0, 0]);\n}\n\n\nmain();\n?>", "entry_point": "calculateAnimals", "signature": "function calculateAnimals($totalAnimals, $totalLegs)", "docstring": "Calculates the number of chickens and rabbits in a farm.\nGiven the total number of animals and the total number of legs, the function determines\nhow many chickens and rabbits are there.\nAssumptions:\n- Each chicken has 2 legs.\n- Each rabbit has 4 legs.\n- The total number of animals and legs are non-negative integers.\n\nInput: Two integers, $totalAnimals (total number of animals) and $totalLegs (total number of legs).\nOutput: Returns an array [number_of_chickens, number_of_rabbits] if a valid solution exists,\nor \"No answer\" if no valid solution is found.\n\nExample:\nFor 5 animals and 12 legs, the function will return [4, 1] (4 chickens and 1 rabbit).\nFor 10 animals and 16 legs, the function will return \"No answer\" as no valid combination exists.", "instruction": "Write a PHP function `function calculateAnimals($totalAnimals, $totalLegs)` to solve the following problem:\nCalculates the number of chickens and rabbits in a farm.\nGiven the total number of animals and the total number of legs, the function determines\nhow many chickens and rabbits are there.\nAssumptions:\n- Each chicken has 2 legs.\n- Each rabbit has 4 legs.\n- The total number of animals and legs are non-negative integers.\n\nInput: Two integers, $totalAnimals (total number of animals) and $totalLegs (total number of legs).\nOutput: Returns an array [number_of_chickens, number_of_rabbits] if a valid solution exists,\nor \"No answer\" if no valid solution is found.\n\nExample:\nFor 5 animals and 12 legs, the function will return [4, 1] (4 chickens and 1 rabbit).\nFor 10 animals and 16 legs, the function will return \"No answer\" as no valid combination exists.", "level": "middle"}
{"task_id": "PHP/11", "prompt": "<?php\n\n/**\n * Identifies the most frequently occurring character in a given string.\n * The string is composed of lowercase letters from 'a' to 'z'.\n * If there are multiple characters with the same highest frequency,\n * the character with the smallest ASCII value is returned.\n * \n * Example:\n * Input: \"apple\"\n * Output: \"p 2\" (The character 'p' appears twice)\n * \n * Input: \"environment\"\n * Output: \"n 3\" (The character 'n' appears three times, the most frequent)\n */\n\nfunction findMostFrequentChar($string) ", "canonical_solution": "{\n    $frequency = [];\n    $maxFreq = 0;\n    $resultChar = '';\n\n    for ($i = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n        if (!isset($frequency[$char])) {\n            $frequency[$char] = 0;\n        }\n        $frequency[$char]++;\n\n        if ($frequency[$char] > $maxFreq || \n            ($frequency[$char] == $maxFreq && $char < $resultChar)) {\n            $maxFreq = $frequency[$char];\n            $resultChar = $char;\n        }\n    }\n\n    return $resultChar . \" \" . $maxFreq;\n}", "test": "function main(){\n    assert(findMostFrequentChar(\"abbccc\") === \"c 3\");\n    assert(findMostFrequentChar(\"adfadffasdf\") === \"f 4\");\n    assert(findMostFrequentChar(\"environment\") === \"n 3\");\n    assert(findMostFrequentChar(\"apple\") === \"p 2\");\n    assert(findMostFrequentChar(\"banana\") === \"a 3\");\n    \n}\n\n\nmain();\n?>", "entry_point": "findMostFrequentChar", "signature": "function findMostFrequentChar($string)", "docstring": "Identifies the most frequently occurring character in a given string.\nThe string is composed of lowercase letters from 'a' to 'z'.\nIf there are multiple characters with the same highest frequency,\nthe character with the smallest ASCII value is returned.\n\nExample:\nInput: \"apple\"\nOutput: \"p 2\" (The character 'p' appears twice)\n\nInput: \"environment\"\nOutput: \"n 3\" (The character 'n' appears three times, the most frequent)", "instruction": "Write a PHP function `function findMostFrequentChar($string)` to solve the following problem:\nIdentifies the most frequently occurring character in a given string.\nThe string is composed of lowercase letters from 'a' to 'z'.\nIf there are multiple characters with the same highest frequency,\nthe character with the smallest ASCII value is returned.\n\nExample:\nInput: \"apple\"\nOutput: \"p 2\" (The character 'p' appears twice)\n\nInput: \"environment\"\nOutput: \"n 3\" (The character 'n' appears three times, the most frequent)", "level": "middle"}
{"task_id": "PHP/12", "prompt": "<?php\n\n\n/**\n    * Finds the fractional element in a diagonally arranged sequence.\n    * In this sequence, fractions are arranged in a diagonal pattern. The first row contains fractions with the numerator 1 and increasing denominators. Each subsequent row increases the numerator and decreases the denominator until it reaches 1.\n    * For example, the sequence starts with 1/1, 1/2, 2/1, 3/1, 2/2, ...\n        1/1   1/2   1/3   1/4   1/5\n\n        2/1   2/2   2/3   2/4\n\n        3/1   3/2   3/3\n\n        4/1   4/2\n\n        5/1\n\n    * The function takes an integer 'n' and returns the 'n'th element in this sequence as a string in the form 'numerator/denominator'.\n    * Input: An integer 'n' (n < 20000).\n    * Output: A string representing the 'n'th element in the sequence.\n    * Examples:\n    * - Input: 3, Output: \"2/1\"\n    * - Input: 14, Output: \"2/4\"\n*/\n\n\nfunction findFractionalElement($n) ", "canonical_solution": "{\n    // Find the diagonal this element is on\n    $d = 1;\n    while ($d * ($d + 1) / 2 < $n) {\n        $d++;\n    }\n\n    // Position within the diagonal\n    $p = $n - ($d * ($d - 1) / 2);\n\n    // Check if the diagonal is even or odd\n    if ($d % 2 == 0) {\n        // Even diagonal: numerator increases, denominator decreases\n        $numerator = $p;\n        $denominator = $d - $p + 1;\n    } else {\n        // Odd diagonal: numerator decreases, denominator increases\n        $numerator = $d - $p + 1;\n        $denominator = $p;\n    }\n\n    return \"$numerator/$denominator\";\n}", "test": "function main(){\n    assert(findFractionalElement(3) === \"2/1\");\n    assert(findFractionalElement(14) === \"2/4\");\n    assert(findFractionalElement(7) === \"1/4\");\n    assert(findFractionalElement(12345) === \"59/99\");\n    \n}\n\nmain();\n?>", "entry_point": "findFractionalElement", "signature": "function findFractionalElement($n)", "docstring": "Finds the fractional element in a diagonally arranged sequence.\nIn this sequence, fractions are arranged in a diagonal pattern. The first row contains fractions with the numerator 1 and increasing denominators. Each subsequent row increases the numerator and decreases the denominator until it reaches 1.\nFor example, the sequence starts with 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nThe function takes an integer 'n' and returns the 'n'th element in this sequence as a string in the form 'numerator/denominator'.\nInput: An integer 'n' (n < 20000).\nOutput: A string representing the 'n'th element in the sequence.\nExamples:\n- Input: 3, Output: \"2/1\"\n- Input: 14, Output: \"2/4\"", "instruction": "Write a PHP function `function findFractionalElement($n)` to solve the following problem:\nFinds the fractional element in a diagonally arranged sequence.\nIn this sequence, fractions are arranged in a diagonal pattern. The first row contains fractions with the numerator 1 and increasing denominators. Each subsequent row increases the numerator and decreases the denominator until it reaches 1.\nFor example, the sequence starts with 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nThe function takes an integer 'n' and returns the 'n'th element in this sequence as a string in the form 'numerator/denominator'.\nInput: An integer 'n' (n < 20000).\nOutput: A string representing the 'n'th element in the sequence.\nExamples:\n- Input: 3, Output: \"2/1\"\n- Input: 14, Output: \"2/4\"", "level": "middle"}
{"task_id": "PHP/13", "prompt": "<?php\n\n/**\n    * Calculates the monthly repayment amount for an equal principal repayment loan.\n    * In this repayment model, each month's repayment amount consists of two parts:\n    * - A constant principal payment, which is the total loan amount divided by the total number of months.\n    * - The interest payment, which is the outstanding loan amount multiplied by the monthly interest rate.\n    * Input: \n    * - $loanAmount (int): The total loan amount in ten-thousands.\n    * - $monthlyInterestRate (float): The monthly interest rate.\n    * - $totalMonths (int): The total number of months for loan repayment.\n    * Output: Returns the first month's repayment amount as an integer (in Yuan). Discard the decimal point and do not round\n    * Example: calculateMonthlyRepayment(500, 0.004, 360) should return 33889.\n*/\n\nfunction calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int ", "canonical_solution": "{\n    $principalPayment = ($loanAmount * 10000) / $totalMonths;\n    $interestPayment = $loanAmount * 10000 * $monthlyInterestRate;\n    return (int) $principalPayment + $interestPayment;\n}", "test": "function main(){\n    assert(calculateMonthlyRepayment(500, 0.004, 360) === 33888);\n    assert(calculateMonthlyRepayment(300, 0.005, 180) === 31666); // Example test case\n\n}\n\nmain();\n?>", "entry_point": "calculateMonthlyRepayment", "signature": "function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int", "docstring": "Calculates the monthly repayment amount for an equal principal repayment loan.\nIn this repayment model, each month's repayment amount consists of two parts:\n- A constant principal payment, which is the total loan amount divided by the total number of months.\n- The interest payment, which is the outstanding loan amount multiplied by the monthly interest rate.\nInput:\n- $loanAmount (int): The total loan amount in ten-thousands.\n- $monthlyInterestRate (float): The monthly interest rate.\n- $totalMonths (int): The total number of months for loan repayment.\nOutput: Returns the first month's repayment amount as an integer (in Yuan). Discard the decimal point and do not round\nExample: calculateMonthlyRepayment(500, 0.004, 360) should return 33889.", "instruction": "Write a PHP function `function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int` to solve the following problem:\nCalculates the monthly repayment amount for an equal principal repayment loan.\nIn this repayment model, each month's repayment amount consists of two parts:\n- A constant principal payment, which is the total loan amount divided by the total number of months.\n- The interest payment, which is the outstanding loan amount multiplied by the monthly interest rate.\nInput:\n- $loanAmount (int): The total loan amount in ten-thousands.\n- $monthlyInterestRate (float): The monthly interest rate.\n- $totalMonths (int): The total number of months for loan repayment.\nOutput: Returns the first month's repayment amount as an integer (in Yuan). Discard the decimal point and do not round\nExample: calculateMonthlyRepayment(500, 0.004, 360) should return 33889.", "level": "easy"}
{"task_id": "PHP/14", "prompt": "<?php\n/**\n * Converts a decimal number into a sum of powers of 2.\n * This function is useful for understanding the binary representation of a decimal number.\n * It breaks down the number into a sum of powers of 2, which are easier to understand and work with,\n * especially in contexts where binary calculations are frequent.\n * \n * For example:\n * - Input: 7\n * - Output: \"7=4+2+1\"\n * - Input: 43\n * - Output: \"43=32+8+2+1\"\n * \n * Input: A single integer ($number), where 0 < $number < 1000000.\n * Output: A string representing the equation of the sum of powers of 2 that equals the input number.\n */\n\nfunction decimalToBinarySum($number) ", "canonical_solution": "{\n    $result = $number . \"=\";\n    $power = 0;\n\n    while ((1 << $power) <= $number) {\n        $power++;\n    }\n\n    while ($number > 0) {\n        $power--;\n        $currentPowerOfTwo = 1 << $power;\n        if ($currentPowerOfTwo <= $number) {\n            $number -= $currentPowerOfTwo;\n            $result .= $currentPowerOfTwo . \"+\";\n        }\n    }\n\n    return rtrim($result, \"+\");\n}", "test": "function main(){\n    assert(decimalToBinarySum(7) === \"7=4+2+1\");\n    assert(decimalToBinarySum(43) === \"43=32+8+2+1\");\n    assert(decimalToBinarySum(15) === \"15=8+4+2+1\");\n    assert(decimalToBinarySum(1) === \"1=1\");\n    assert(decimalToBinarySum(32) === \"32=32\");\n    \n}\n\nmain();\n?>", "entry_point": "decimalToBinarySum", "signature": "function decimalToBinarySum($number)", "docstring": "Converts a decimal number into a sum of powers of 2.\nThis function is useful for understanding the binary representation of a decimal number.\nIt breaks down the number into a sum of powers of 2, which are easier to understand and work with,\nespecially in contexts where binary calculations are frequent.\n\nFor example:\n- Input: 7\n- Output: \"7=4+2+1\"\n- Input: 43\n- Output: \"43=32+8+2+1\"\n\nInput: A single integer ($number), where 0 < $number < 1000000.\nOutput: A string representing the equation of the sum of powers of 2 that equals the input number.", "instruction": "Write a PHP function `function decimalToBinarySum($number)` to solve the following problem:\nConverts a decimal number into a sum of powers of 2.\nThis function is useful for understanding the binary representation of a decimal number.\nIt breaks down the number into a sum of powers of 2, which are easier to understand and work with,\nespecially in contexts where binary calculations are frequent.\n\nFor example:\n- Input: 7\n- Output: \"7=4+2+1\"\n- Input: 43\n- Output: \"43=32+8+2+1\"\n\nInput: A single integer ($number), where 0 < $number < 1000000.\nOutput: A string representing the equation of the sum of powers of 2 that equals the input number.", "level": "easy"}
{"task_id": "PHP/15", "prompt": "<?php\n\n\n/**\n * Finds the rectangle with the largest area that includes a given point.\n * In this task, we are given a list of rectangles, each defined by two opposite corner points,\n * and a point referred to as the \"needle\". The rectangles' sides are parallel to the coordinate axes.\n * The goal is to find the rectangle with the maximum area that contains the needle (including its boundary).\n * Input: An array of rectangles (each rectangle is an array of two points [x1, y1, x2, y2]),\n *        and a needle point [x, y].\n * Output: Returns the index (1-based) of the rectangle with the largest area that contains the needle.\n * Example: For rectangles [[1,1,4,4], [2,2,6,6]] and needle point [3,3],\n *          the function should return 2, as the second rectangle is larger and contains the needle.\n */\n\n\nfunction findMaxAreaRectangle($rectangles, $needle)", "canonical_solution": "{\n    $maxArea = 0;\n    $maxRectIndex = -1;\n\n    for ($i = 0; $i < count($rectangles); $i++) {\n        $rect = $rectangles[$i];\n        if ($needle[0] >= min($rect[0], $rect[2]) && $needle[0] <= max($rect[0], $rect[2]) &&\n            $needle[1] >= min($rect[1], $rect[3]) && $needle[1] <= max($rect[1], $rect[3])) {\n            $area = abs($rect[2] - $rect[0]) * abs($rect[3] - $rect[1]);\n            if ($area > $maxArea) {\n                $maxArea = $area;\n                $maxRectIndex = $i + 1;\n            }\n        }\n    }\n    \n    return $maxRectIndex;\n}", "test": "function main(){\n    assert(findMaxAreaRectangle([[2,3,6,8], [1,3,5,6], [8, 2, 1, 9]], [4,4]) === 3);\n    assert(findMaxAreaRectangle([[6,8,2,3], [1,3,5,6], [8, 2, 1, 9]], [4,4]) === 3);\n    assert(findMaxAreaRectangle([[1,1,4,4], [2,2,6,6]], [3,3]) === 2);\n    assert(findMaxAreaRectangle([[0,0,5,5], [1,1,3,3]], [2,2]) === 1);\n    assert(findMaxAreaRectangle([[1,1,2,2], [2,2,4,4]], [5,5]) === -1); // Needle is outside all rectangles\n    \n}\n\n\nmain();\n?>", "entry_point": "findMaxAreaRectangle", "signature": "function findMaxAreaRectangle($rectangles, $needle)", "docstring": "Finds the rectangle with the largest area that includes a given point.\nIn this task, we are given a list of rectangles, each defined by two opposite corner points,\nand a point referred to as the \"needle\". The rectangles' sides are parallel to the coordinate axes.\nThe goal is to find the rectangle with the maximum area that contains the needle (including its boundary).\nInput: An array of rectangles (each rectangle is an array of two points [x1, y1, x2, y2]),\nand a needle point [x, y].\nOutput: Returns the index (1-based) of the rectangle with the largest area that contains the needle.\nExample: For rectangles [[1,1,4,4], [2,2,6,6]] and needle point [3,3],\nthe function should return 2, as the second rectangle is larger and contains the needle.", "instruction": "Write a PHP function `function findMaxAreaRectangle($rectangles, $needle)` to solve the following problem:\nFinds the rectangle with the largest area that includes a given point.\nIn this task, we are given a list of rectangles, each defined by two opposite corner points,\nand a point referred to as the \"needle\". The rectangles' sides are parallel to the coordinate axes.\nThe goal is to find the rectangle with the maximum area that contains the needle (including its boundary).\nInput: An array of rectangles (each rectangle is an array of two points [x1, y1, x2, y2]),\nand a needle point [x, y].\nOutput: Returns the index (1-based) of the rectangle with the largest area that contains the needle.\nExample: For rectangles [[1,1,4,4], [2,2,6,6]] and needle point [3,3],\nthe function should return 2, as the second rectangle is larger and contains the needle.", "level": "middle"}
{"task_id": "PHP/16", "prompt": "<?php\n\n/**\n * Calculates the maximum value of a segment from a given array of values.\n * Imagine a tailor has a ribbon with various segments, each having a different value, positive or negative.\n * The goal is to find the maximum total value that can be obtained by cutting a continuous segment of the ribbon.\n * This is akin to finding the most valuable portion of the ribbon to sell or use.\n *\n * Input: \n * An array $values of integers representing the value of each segment of the ribbon.\n *\n * Output:\n * Returns an integer representing the maximum value that can be obtained from any continuous segment of the ribbon.\n *\n * Example:\n * For a ribbon of length 4 with values [-1, 3, 2, -4], the function should return 5, \n * as the segment [3, 2] gives the maximum value.\n */\n\n function maxSegmentValue($values)", "canonical_solution": "  {\n    $maxSoFar = PHP_INT_MIN;\n    $maxEndingHere = 0;\n\n    foreach ($values as $value) {\n        $maxEndingHere += $value;\n        if ($maxSoFar < $maxEndingHere) {\n            $maxSoFar = $maxEndingHere;\n        }\n\n        if ($maxEndingHere < 0) {\n            $maxEndingHere = 0;\n        }\n    }\n\n    return $maxSoFar;\n}", "test": "function main(){\n    assert(maxSegmentValue([-1, 3, 2, -4]) === 5);\n    assert(maxSegmentValue([-2, -3, 4, -1, -2, 1, 5, -3]) === 7);\n    assert(maxSegmentValue([-1, -2, -3]) === -1);\n    assert(maxSegmentValue([10]) === 10);\n    assert(maxSegmentValue([1, -3]) === 1);\n    \n    \n}\n\n\nmain();\n?>", "entry_point": "maxSegmentValue", "signature": "function maxSegmentValue($values)", "docstring": "Calculates the maximum value of a segment from a given array of values.\nImagine a tailor has a ribbon with various segments, each having a different value, positive or negative.\nThe goal is to find the maximum total value that can be obtained by cutting a continuous segment of the ribbon.\nThis is akin to finding the most valuable portion of the ribbon to sell or use.\n\nInput:\nAn array $values of integers representing the value of each segment of the ribbon.\n\nOutput:\nReturns an integer representing the maximum value that can be obtained from any continuous segment of the ribbon.\n\nExample:\nFor a ribbon of length 4 with values [-1, 3, 2, -4], the function should return 5,\nas the segment [3, 2] gives the maximum value.", "instruction": "Write a PHP function `function maxSegmentValue($values)` to solve the following problem:\nCalculates the maximum value of a segment from a given array of values.\nImagine a tailor has a ribbon with various segments, each having a different value, positive or negative.\nThe goal is to find the maximum total value that can be obtained by cutting a continuous segment of the ribbon.\nThis is akin to finding the most valuable portion of the ribbon to sell or use.\n\nInput:\nAn array $values of integers representing the value of each segment of the ribbon.\n\nOutput:\nReturns an integer representing the maximum value that can be obtained from any continuous segment of the ribbon.\n\nExample:\nFor a ribbon of length 4 with values [-1, 3, 2, -4], the function should return 5,\nas the segment [3, 2] gives the maximum value.", "level": "easy"}
{"task_id": "PHP/17", "prompt": "<?php\n\n/**\n * Determines the position of a new student in a choir formation.\n * The choir is arranged with the shortest members on the sides and the tallest in the center.\n * The new student may stand on the left or right side, or, if they are the tallest, to the right of the current tallest student.\n * If the new student is not the tallest, their position is based on the teacher's preference: left or right side.\n *\n * Input:\n * - $newStudentHeight (int): The height of the new student.\n * - $heights (array): An array of integers representing the heights of the current choir members from left to right.\n * - $teacherPreference (int): The teacher's preference for the new student's position (1 for left, 2 for right).\n *\n * Output:\n * - Returns an integer representing the position (1-indexed) where the new student will stand.\n *\n * Examples:\n * - determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) should return 8.\n * - determineChoirPosition(15, [5, 10, 20, 10, 5], 3) should return 3.\n */\n\nfunction determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int ", "canonical_solution": "{\n    // Check if the new student is the tallest\n    if ($newStudentHeight > max($heights)) {\n        return count($heights) + 1; // Tallest student goes to the right of the current tallest\n    }\n\n    // If the new student is not the tallest, find their position based on teacher's preference\n    if ($teacherPreference == 1) { // Teacher prefers left side\n        for ($i = 0; $i < count($heights); $i++) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 1; // 1-indexed position\n            }\n        }\n    } else { // Teacher prefers right side\n        for ($i = count($heights) - 1; $i >= 0; $i--) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 2; // 1-indexed position\n            }\n        }\n    }\n    // If the new student is the shortest, they go to the left or right side based on teacher's preference\n    return $teacherPreference == 1 ? 1 : count($heights) + 1;\n}", "test": "function main(){\n    \n    assert(determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) === 8);\n    assert(determineChoirPosition(15, [5, 10, 20, 10, 5], 1) === 3);\n    assert(determineChoirPosition(12, [10, 15, 20, 15], 2) === 5);\n    assert(determineChoirPosition(18, [6, 9, 12, 15, 17, 21], 1) === 6);\n    assert(determineChoirPosition(18, [6, 9, 12, 15], 1) === 5);\n    assert(determineChoirPosition(10, [5, 8, 12], 2) === 4);   \n}\n\n\nmain();\n?>", "entry_point": "determineChoirPosition", "signature": "function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int", "docstring": "Determines the position of a new student in a choir formation.\nThe choir is arranged with the shortest members on the sides and the tallest in the center.\nThe new student may stand on the left or right side, or, if they are the tallest, to the right of the current tallest student.\nIf the new student is not the tallest, their position is based on the teacher's preference: left or right side.\n\nInput:\n- $newStudentHeight (int): The height of the new student.\n- $heights (array): An array of integers representing the heights of the current choir members from left to right.\n- $teacherPreference (int): The teacher's preference for the new student's position (1 for left, 2 for right).\n\nOutput:\n- Returns an integer representing the position (1-indexed) where the new student will stand.\n\nExamples:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) should return 8.\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) should return 3.", "instruction": "Write a PHP function `function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int` to solve the following problem:\nDetermines the position of a new student in a choir formation.\nThe choir is arranged with the shortest members on the sides and the tallest in the center.\nThe new student may stand on the left or right side, or, if they are the tallest, to the right of the current tallest student.\nIf the new student is not the tallest, their position is based on the teacher's preference: left or right side.\n\nInput:\n- $newStudentHeight (int): The height of the new student.\n- $heights (array): An array of integers representing the heights of the current choir members from left to right.\n- $teacherPreference (int): The teacher's preference for the new student's position (1 for left, 2 for right).\n\nOutput:\n- Returns an integer representing the position (1-indexed) where the new student will stand.\n\nExamples:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) should return 8.\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) should return 3.", "level": "hard"}
{"task_id": "PHP/18", "prompt": "<?php\n\n/**\n * Determines the exact price of an item within a specified range based on a series of hints.\n * The item's price is within the range [1, maxPrice].\n * Hints are given in a string where:\n * - 'u' indicates the actual price is higher than the current guess.\n * - 'd' indicates the actual price is lower than the current guess.\n * - 'y' indicates the current guess is correct.\n * The function uses a binary search approach to narrow down the possible price.\n * Input: The maximum price (maxPrice) and a string of hints.\n * Output: Returns the exact price of the item.\n * Example: For maxPrice = 1000000 and hints = \"uddy\", the function returns 562500.\n */\n\nfunction guessItemPrice(int $maxPrice, string $hints): int ", "canonical_solution": "{\n    $low = 1;\n    $high = $maxPrice;\n\n    foreach (str_split($hints) as $hint) {\n        $mid = intdiv($low + $high, 2);\n\n        if ($hint === 'u') {\n            $low = $mid + 1;\n        } elseif ($hint === 'd') {\n            $high = $mid - 1;\n        } elseif ($hint === 'y') {\n            return $mid;\n        }\n    }\n\n    // In case the hints do not determine the price correctly, return an error or a default value\n    return -1; // or any other appropriate error handling\n}", "test": "function main(){\n    assert(guessItemPrice(1000000, \"uddy\") === 562500);\n    assert(guessItemPrice(500, \"ududy\") === 327);\n    assert(guessItemPrice(100, \"uuudy\") === 91);\n    assert(guessItemPrice(1000, \"ddduy\") === 93);\n    \n}\n\n\nmain();\n?>", "entry_point": "guessItemPrice", "signature": "function guessItemPrice(int $maxPrice, string $hints): int", "docstring": "Determines the exact price of an item within a specified range based on a series of hints.\nThe item's price is within the range [1, maxPrice].\nHints are given in a string where:\n- 'u' indicates the actual price is higher than the current guess.\n- 'd' indicates the actual price is lower than the current guess.\n- 'y' indicates the current guess is correct.\nThe function uses a binary search approach to narrow down the possible price.\nInput: The maximum price (maxPrice) and a string of hints.\nOutput: Returns the exact price of the item.\nExample: For maxPrice = 1000000 and hints = \"uddy\", the function returns 562500.", "instruction": "Write a PHP function `function guessItemPrice(int $maxPrice, string $hints): int` to solve the following problem:\nDetermines the exact price of an item within a specified range based on a series of hints.\nThe item's price is within the range [1, maxPrice].\nHints are given in a string where:\n- 'u' indicates the actual price is higher than the current guess.\n- 'd' indicates the actual price is lower than the current guess.\n- 'y' indicates the current guess is correct.\nThe function uses a binary search approach to narrow down the possible price.\nInput: The maximum price (maxPrice) and a string of hints.\nOutput: Returns the exact price of the item.\nExample: For maxPrice = 1000000 and hints = \"uddy\", the function returns 562500.", "level": "easy"}
{"task_id": "PHP/19", "prompt": "<?php\n\n/**\n * Calculates the total effort required to sort a list of disordered elements.\n * In this scenario, imagine a series of numbered containers in a warehouse. Each container must be arranged in ascending order. \n * The effort to swap two containers is proportional to the distance between them, measured as double their positional difference.\n * Input: An array of integers representing the unsorted container numbers.\n * Output: Returns an integer representing the total effort required to sort the containers.\n * Example: For input [3, 1, 4, 2], the output is 8.\n */\n\nfunction calculateEffort($horseNumbers) ", "canonical_solution": "{\n    $effort = 0;\n    $n = count($horseNumbers);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($horseNumbers[$i] > $horseNumbers[$j]) {\n                // Swapping\n                $temp = $horseNumbers[$i];\n                $horseNumbers[$i] = $horseNumbers[$j];\n                $horseNumbers[$j] = $temp;\n                // Calculating effort\n                $effort += ($j - $i) * 2;\n            }\n        }\n    }\n    return $effort;\n}", "test": "function main(){\n    assert(calculateEffort([2, 3, 6, 5, 8, 4]) === 14);\n    assert(calculateEffort([3, 1, 4, 2]) === 8);\n    assert(calculateEffort([1, 2, 3, 4]) === 0); // Already sorted\n    assert(calculateEffort([4, 3, 2, 1]) === 20); // Reverse order\n    \n}\n\n\nmain();\n?>", "entry_point": "calculateEffort", "signature": "function calculateEffort($horseNumbers)", "docstring": "Calculates the total effort required to sort a list of disordered elements.\nIn this scenario, imagine a series of numbered containers in a warehouse. Each container must be arranged in ascending order.\nThe effort to swap two containers is proportional to the distance between them, measured as double their positional difference.\nInput: An array of integers representing the unsorted container numbers.\nOutput: Returns an integer representing the total effort required to sort the containers.\nExample: For input [3, 1, 4, 2], the output is 8.", "instruction": "Write a PHP function `function calculateEffort($horseNumbers)` to solve the following problem:\nCalculates the total effort required to sort a list of disordered elements.\nIn this scenario, imagine a series of numbered containers in a warehouse. Each container must be arranged in ascending order.\nThe effort to swap two containers is proportional to the distance between them, measured as double their positional difference.\nInput: An array of integers representing the unsorted container numbers.\nOutput: Returns an integer representing the total effort required to sort the containers.\nExample: For input [3, 1, 4, 2], the output is 8.", "level": "easy"}
{"task_id": "PHP/20", "prompt": "<?php\n/**\n * Determines the ranking of a player at the time of their entry in a competition.\n * \n * In this competition, scores are announced one after another, updating the leaderboard each time.\n * This function calculates the rank of a specific player at the time they were added to the leaderboard.\n * \n * Input: \n * - $scores: An array of integers representing the scores of each player.\n * - $playerIndex: An integer representing the index of the player (1-based index).\n * \n * Output: \n * - Returns an integer, the rank of the player at the time of their entry.\n * \n * Example: \n * For scores [95, 92, 93, 100, 102, 99] and playerIndex 3, the function should return 2.\n */\n\n\nfunction getPlayerRankingAtEntry($scores, $playerIndex) ", "canonical_solution": "{\n    $playerScore = $scores[$playerIndex - 1];\n    $rank = 1;\n\n    for ($i = 0; $i < $playerIndex - 1; $i++) {\n        if ($scores[$i] >= $playerScore) {\n            $rank++;\n        }\n    }\n\n    return $rank;\n}", "test": "function main(){\n    assert(getPlayerRankingAtEntry([95, 92, 93, 100, 102, 99], 3) === 2);\n    assert(getPlayerRankingAtEntry([90, 85, 95, 88, 92], 5) === 2);\n    assert(getPlayerRankingAtEntry([100, 105, 95, 110, 90], 1) === 1);\n    assert(getPlayerRankingAtEntry([70, 80, 60, 90, 85], 4) === 1);\n    assert(getPlayerRankingAtEntry([95, 95, 95, 95, 95], 3) === 3);\n    \n}\n\n\nmain();\n?>", "entry_point": "getPlayerRankingAtEntry", "signature": "function getPlayerRankingAtEntry($scores, $playerIndex)", "docstring": "Determines the ranking of a player at the time of their entry in a competition.\n\nIn this competition, scores are announced one after another, updating the leaderboard each time.\nThis function calculates the rank of a specific player at the time they were added to the leaderboard.\n\nInput:\n- $scores: An array of integers representing the scores of each player.\n- $playerIndex: An integer representing the index of the player (1-based index).\n\nOutput:\n- Returns an integer, the rank of the player at the time of their entry.\n\nExample:\nFor scores [95, 92, 93, 100, 102, 99] and playerIndex 3, the function should return 2.", "instruction": "Write a PHP function `function getPlayerRankingAtEntry($scores, $playerIndex)` to solve the following problem:\nDetermines the ranking of a player at the time of their entry in a competition.\n\nIn this competition, scores are announced one after another, updating the leaderboard each time.\nThis function calculates the rank of a specific player at the time they were added to the leaderboard.\n\nInput:\n- $scores: An array of integers representing the scores of each player.\n- $playerIndex: An integer representing the index of the player (1-based index).\n\nOutput:\n- Returns an integer, the rank of the player at the time of their entry.\n\nExample:\nFor scores [95, 92, 93, 100, 102, 99] and playerIndex 3, the function should return 2.", "level": "easy"}
{"task_id": "PHP/21", "prompt": "<?php\n\n\n/**\n * Determines if two months in a given year are \"related\".\n * Two months are considered related if the first day of each month falls on the same day of the week.\n * This condition is true if the difference in days between the first day of these months is divisible by 7.\n * Leap years are taken into account, as February has 29 days in a leap year.\n *\n * Input: \n * - $year: An integer representing the year.\n * - $month1: An integer representing the first month.\n * - $month2: An integer representing the second month.\n *\n * Output: \n * - Returns 'YES' if the months are related; 'NO' otherwise.\n *\n * Examples:\n * - areRelatedMonths(1994, 10, 9) -> 'NO'\n * - areRelatedMonths(1948, 1, 4) -> 'YES'\n */\nfunction areRelatedMonths($year, $month1, $month2): string ", "canonical_solution": "{\n    // Check for leap year\n    $isLeapYear = ($year % 4 == 0) && ($year % 100 != 0 || $year % 400 == 0);\n\n    // Days in each month\n    $daysInMonth = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    // Calculate the day of the year for the first day of each month\n    $dayOfYear1 = array_sum(array_slice($daysInMonth, 0, $month1 - 1));\n    $dayOfYear2 = array_sum(array_slice($daysInMonth, 0, $month2 - 1));\n\n    // Check if the difference in days is divisible by 7\n    return abs($dayOfYear1 - $dayOfYear2) % 7 == 0 ? 'YES' : 'NO';\n}", "test": "function main(){\n    assert(areRelatedMonths(1994, 10, 9) === 'NO');\n    assert(areRelatedMonths(1935, 12, 1) === 'NO');\n    assert(areRelatedMonths(1957, 1, 9) === 'NO');\n    assert(areRelatedMonths(1917, 9, 12) === 'YES');\n    assert(areRelatedMonths(1948, 1, 4) === 'YES');\n    \n}\n\nmain();\n?>", "entry_point": "areRelatedMonths", "signature": "function areRelatedMonths($year, $month1, $month2): string", "docstring": "Determines if two months in a given year are \"related\".\nTwo months are considered related if the first day of each month falls on the same day of the week.\nThis condition is true if the difference in days between the first day of these months is divisible by 7.\nLeap years are taken into account, as February has 29 days in a leap year.\n\nInput:\n- $year: An integer representing the year.\n- $month1: An integer representing the first month.\n- $month2: An integer representing the second month.\n\nOutput:\n- Returns 'YES' if the months are related; 'NO' otherwise.\n\nExamples:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'", "instruction": "Write a PHP function `function areRelatedMonths($year, $month1, $month2): string` to solve the following problem:\nDetermines if two months in a given year are \"related\".\nTwo months are considered related if the first day of each month falls on the same day of the week.\nThis condition is true if the difference in days between the first day of these months is divisible by 7.\nLeap years are taken into account, as February has 29 days in a leap year.\n\nInput:\n- $year: An integer representing the year.\n- $month1: An integer representing the first month.\n- $month2: An integer representing the second month.\n\nOutput:\n- Returns 'YES' if the months are related; 'NO' otherwise.\n\nExamples:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'", "level": "middle"}
{"task_id": "PHP/22", "prompt": "<?php\n/**\n    * Converts a number from one base to another.\n    * The function accepts three parameters: the number to convert, the base it's currently in, and the base to convert it to.\n    * The bases can range from 2 to 36.\n    * The number is assumed to be a string to accommodate larger bases and values.\n    * Characters in the number may include 0-9 and A-Z, representing values 0 through 35.\n    * Input: A string representing the number, an integer for the current base, and an integer for the target base.\n    * Output: The number converted to the target base as a string.\n    * Example: convertBase(\"123AB\", 16, 10) returns \"74667\".\n*/\n\nfunction convertBase($number, $fromBase, $toBase) ", "canonical_solution": "{\n    // Check if the bases are within the valid range\n    if ($fromBase < 2 || $fromBase > 36 || $toBase < 2 || $toBase > 36) {\n        return \"Invalid base. Bases must be between 2 and 36.\";\n    }\n\n    // Convert the number from the original base to base 10\n    $decValue = base_convert($number, $fromBase, 10);\n\n    // Convert the base 10 number to the target base\n\n    return strtoupper(base_convert($decValue, 10, $toBase));\n}", "test": "function main(){\n    assert(convertBase('2345678A123', 18, 18) === '2345678A123');\n    assert(convertBase('23456', 15, 18) === '114E0');\n    assert(convertBase('2345678', 12, 20) === '22B7A4');\n    assert(convertBase('12345678', 16, 23) === '21A976L');\n    assert(convertBase('3456AB', 25, 21) === '7C2136');\n    assert(convertBase('AB1234567', 18, 22) === '22JF0G367');\n    \n}\n\nmain();\n?>", "entry_point": "convertBase", "signature": "function convertBase($number, $fromBase, $toBase)", "docstring": "Converts a number from one base to another.\nThe function accepts three parameters: the number to convert, the base it's currently in, and the base to convert it to.\nThe bases can range from 2 to 36.\nThe number is assumed to be a string to accommodate larger bases and values.\nCharacters in the number may include 0-9 and A-Z, representing values 0 through 35.\nInput: A string representing the number, an integer for the current base, and an integer for the target base.\nOutput: The number converted to the target base as a string.\nExample: convertBase(\"123AB\", 16, 10) returns \"74667\".", "instruction": "Write a PHP function `function convertBase($number, $fromBase, $toBase)` to solve the following problem:\nConverts a number from one base to another.\nThe function accepts three parameters: the number to convert, the base it's currently in, and the base to convert it to.\nThe bases can range from 2 to 36.\nThe number is assumed to be a string to accommodate larger bases and values.\nCharacters in the number may include 0-9 and A-Z, representing values 0 through 35.\nInput: A string representing the number, an integer for the current base, and an integer for the target base.\nOutput: The number converted to the target base as a string.\nExample: convertBase(\"123AB\", 16, 10) returns \"74667\".", "level": "easy"}
{"task_id": "PHP/23", "prompt": "<?php\n\n/**\n * Performs division of two large numbers provided as strings.\n * This function handles division of large numbers that may exceed the integer\n * or float limit in PHP. It only returns the integer part of the quotient.\n * \n * Inputs:\n * - $dividend: String representing the dividend (the number to be divided).\n * - $divisor: String representing the divisor (the number by which we divide).\n * \n * Output:\n * - Returns a string representing the integer part of the quotient.\n * \n * Example Cases:\n * - largeNumberDivision(\"2376\", \"24\") returns \"99\"\n * - largeNumberDivision(\"1000\", \"10\") returns \"100\"\n */\n\n function largeNumberDivision($dividend, $divisor) ", "canonical_solution": " {\n    // Handle division by zero\n    if ($divisor === \"0\") {\n        throw new Exception(\"Division by zero.\");\n    }\n\n    // Initialize variables\n    $quotient = \"\";\n    $remainder = \"\";\n\n    // Loop through each digit of the dividend\n    for ($i = 0; $i < strlen($dividend); $i++) {\n        $remainder .= $dividend[$i];\n        $partialQuotient = 0;\n\n        // Find the maximum quotient for this partial dividend\n        while ((int)$remainder >= (int)$divisor) {\n            $remainder = (string)((int)$remainder - (int)$divisor);\n            $partialQuotient++;\n        }\n\n        $quotient .= (string)$partialQuotient;\n    }\n\n    // Remove leading zeros and return the quotient\n    return ltrim($quotient, \"0\") ?: \"0\";\n}", "test": "function main(){\n    assert(largeNumberDivision(\"2376\", \"24\") === \"99\");\n    assert(largeNumberDivision(\"1000\", \"10\") === \"100\");\n    assert(largeNumberDivision(\"5000\", \"25\") === \"200\");\n    assert(largeNumberDivision(\"123456789\", \"12345\") === \"10000\");\n    assert(largeNumberDivision(\"102030\", \"5101\") === \"20\");\n    assert(largeNumberDivision(\"1020300000000000000000000000000000000000000000000\", \"10\") === \"102030000000000000000000000000000000000000000000\");\n    \n}\n\n\nmain();\n?>", "entry_point": "largeNumberDivision", "signature": "function largeNumberDivision($dividend, $divisor)", "docstring": "Performs division of two large numbers provided as strings.\nThis function handles division of large numbers that may exceed the integer\nor float limit in PHP. It only returns the integer part of the quotient.\n\nInputs:\n- $dividend: String representing the dividend (the number to be divided).\n- $divisor: String representing the divisor (the number by which we divide).\n\nOutput:\n- Returns a string representing the integer part of the quotient.\n\nExample Cases:\n- largeNumberDivision(\"2376\", \"24\") returns \"99\"\n- largeNumberDivision(\"1000\", \"10\") returns \"100\"", "instruction": "Write a PHP function `function largeNumberDivision($dividend, $divisor)` to solve the following problem:\nPerforms division of two large numbers provided as strings.\nThis function handles division of large numbers that may exceed the integer\nor float limit in PHP. It only returns the integer part of the quotient.\n\nInputs:\n- $dividend: String representing the dividend (the number to be divided).\n- $divisor: String representing the divisor (the number by which we divide).\n\nOutput:\n- Returns a string representing the integer part of the quotient.\n\nExample Cases:\n- largeNumberDivision(\"2376\", \"24\") returns \"99\"\n- largeNumberDivision(\"1000\", \"10\") returns \"100\"", "level": "middle"}
{"task_id": "PHP/24", "prompt": "<?php\n\n\n/**\n * Calculates the largest integer x such that ax <= b < ax+1 or x <= logab < x + 1.\n * This function helps in understanding the relationship between two numbers in terms of logarithms and exponents.\n * - The function takes two positive integers 'a' and 'b' as inputs.\n * - It finds the largest integer 'x' that satisfies the conditions mentioned above.\n * \n * Args:\n *      $a (int): The base number, must be greater than 1.\n *      $b (int): The comparison number.\n * \n * Returns:\n *      int: The largest integer x satisfying the conditions.\n * \n * Examples:\n *      - If a = 10000 and b = 1000000000001, then the output should be 3.\n *      - If a = 3 and b = 27, then the output should be 3.\n */\n\nfunction calculateLogLimit($a, $b) ", "canonical_solution": "{\n    $x = 0;\n    while (pow($a, $x) <= $b) {\n        $x++;\n    }\n    return $x - 1;\n}", "test": "function main(){\n    assert(calculateLogLimit(10000, 1000000000001) === 3);\n    assert(calculateLogLimit(3, 27) === 3);\n    assert(calculateLogLimit(2, 32) === 5);\n    assert(calculateLogLimit(5, 3125) === 5);\n   \n    \n}\n\nmain();\n?>", "entry_point": "calculateLogLimit", "signature": "function calculateLogLimit($a, $b)", "docstring": "Calculates the largest integer x such that ax <= b < ax+1 or x <= logab < x + 1.\nThis function helps in understanding the relationship between two numbers in terms of logarithms and exponents.\n- The function takes two positive integers 'a' and 'b' as inputs.\n- It finds the largest integer 'x' that satisfies the conditions mentioned above.\n\nArgs:\n$a (int): The base number, must be greater than 1.\n$b (int): The comparison number.\n\nReturns:\nint: The largest integer x satisfying the conditions.\n\nExamples:\n- If a = 10000 and b = 1000000000001, then the output should be 3.\n- If a = 3 and b = 27, then the output should be 3.", "instruction": "Write a PHP function `function calculateLogLimit($a, $b)` to solve the following problem:\nCalculates the largest integer x such that ax <= b < ax+1 or x <= logab < x + 1.\nThis function helps in understanding the relationship between two numbers in terms of logarithms and exponents.\n- The function takes two positive integers 'a' and 'b' as inputs.\n- It finds the largest integer 'x' that satisfies the conditions mentioned above.\n\nArgs:\n$a (int): The base number, must be greater than 1.\n$b (int): The comparison number.\n\nReturns:\nint: The largest integer x satisfying the conditions.\n\nExamples:\n- If a = 10000 and b = 1000000000001, then the output should be 3.\n- If a = 3 and b = 27, then the output should be 3.", "level": "easy"}
{"task_id": "PHP/25", "prompt": "<?php\n\n/**\n   * Distribute candy to five children sitting around a round table.\n   *Each child initially has a certain number of candies. They play a game where, starting with one child, and going clockwise, each child divides their candy into three equal parts, and if there are extra candies that cannot be divided equally, the child eats them. Each child keeps one copy and gives the other two copies to their neighbors. The five children completed the above operations in turn.\n   * Input: An array of five integers representing the number of candies each child has.\n   * Output: An array of five integers representing the number of candies each child has after playing the game.\n   */\n\n function distributeCandies(array $candies): array", "canonical_solution": " {\n    $n = count($candies);\n    if ($n != 5) {\n        throw new InvalidArgumentException(\"Input must be an array of five integers.\");\n    }\n\n    // Calculate the candies to give and the new count for each child\n    for ($i = 0; $i < $n; $i++) {\n        $divided = intdiv($candies[$i], 3);\n  \n        $candies[$i] = $divided;\n        $leftNeighbor = ($i + $n - 1) % $n;\n        $rightNeighbor = ($i + 1) % $n;\n        $candies[$leftNeighbor]  += $divided;\n        $candies[$rightNeighbor] += $divided;\n    }\n    return $candies;\n}", "test": "function main(){\n    $candies = distributeCandies([8, 9, 10, 11, 12]);\n    assert($candies === [11, 7, 9, 11, 6]);\n    \n    \n}\n\nmain();\n?>", "entry_point": "distributeCandies", "signature": "function distributeCandies(array $candies): array", "docstring": "Distribute candy to five children sitting around a round table.\nEach child initially has a certain number of candies. They play a game where, starting with one child, and going clockwise, each child divides their candy into three equal parts, and if there are extra candies that cannot be divided equally, the child eats them. Each child keeps one copy and gives the other two copies to their neighbors. The five children completed the above operations in turn.\nInput: An array of five integers representing the number of candies each child has.\nOutput: An array of five integers representing the number of candies each child has after playing the game.", "instruction": "Write a PHP function `function distributeCandies(array $candies): array` to solve the following problem:\nDistribute candy to five children sitting around a round table.\nEach child initially has a certain number of candies. They play a game where, starting with one child, and going clockwise, each child divides their candy into three equal parts, and if there are extra candies that cannot be divided equally, the child eats them. Each child keeps one copy and gives the other two copies to their neighbors. The five children completed the above operations in turn.\nInput: An array of five integers representing the number of candies each child has.\nOutput: An array of five integers representing the number of candies each child has after playing the game.", "level": "middle"}
{"task_id": "PHP/26", "prompt": "<?php\n\n/**\n * Determines a pen purchase plan to maximize the number of pens bought with a given amount of class fund.\n * There are three types of pens available at prices of 6, 5, and 4 units respectively.\n * The objective is to buy as many pens as possible without any remaining class fund.\n * \n * Input: An integer representing the total class fund available.\n * Output: An array with three integers representing the count of pens bought at 6 units, 5 units, and 4 units, in that order.\n * \n * Example:\n * findPenPurchasePlan(10)\n * Output: [1, 0, 1] (One pen of 6 units and one pen of 4 units)\n */\nfunction findPenPurchasePlan(int $totalFund): array ", "canonical_solution": "{\n    $pensAt6Units = 0;\n    $pensAt5Units = 0;\n    $pensAt4Units = 0;\n\n    switch ($totalFund % 4) {\n        case 0:\n            $pensAt4Units = $totalFund / 4;\n            break;\n        case 1:\n            if ($totalFund >= 9) { // To avoid negative counts\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 9) / 4;\n            }\n            break;\n        case 2:\n            if ($totalFund >= 6) { // To avoid negative counts\n                $pensAt6Units = 1;\n                $pensAt4Units = ($totalFund - 6) / 4;\n            }\n            break;\n        case 3:\n            if ($totalFund >= 15) { // Ensures no negative counts\n                $pensAt6Units = 1;\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 15) / 4;\n            }\n            break;\n    }\n    echo $pensAt6Units;\n    echo \"\\n\";\n    echo $pensAt5Units;\n    echo \"\\n\";\n    echo $pensAt4Units;\n    echo \"\\n\";\n    return [$pensAt6Units, $pensAt5Units, $pensAt4Units];\n}", "test": "function main(){\n    assert(findPenPurchasePlan(10) === [1, 0, 1]);\n    assert(findPenPurchasePlan(14) === [1, 0, 2]);\n    assert(findPenPurchasePlan(24) === [0, 0, 6]);\n    \n}\n\nmain();\n?>", "entry_point": "findPenPurchasePlan", "signature": "function findPenPurchasePlan(int $totalFund): array", "docstring": "Determines a pen purchase plan to maximize the number of pens bought with a given amount of class fund.\nThere are three types of pens available at prices of 6, 5, and 4 units respectively.\nThe objective is to buy as many pens as possible without any remaining class fund.\n\nInput: An integer representing the total class fund available.\nOutput: An array with three integers representing the count of pens bought at 6 units, 5 units, and 4 units, in that order.\n\nExample:\nfindPenPurchasePlan(10)\nOutput: [1, 0, 1] (One pen of 6 units and one pen of 4 units)", "instruction": "Write a PHP function `function findPenPurchasePlan(int $totalFund): array` to solve the following problem:\nDetermines a pen purchase plan to maximize the number of pens bought with a given amount of class fund.\nThere are three types of pens available at prices of 6, 5, and 4 units respectively.\nThe objective is to buy as many pens as possible without any remaining class fund.\n\nInput: An integer representing the total class fund available.\nOutput: An array with three integers representing the count of pens bought at 6 units, 5 units, and 4 units, in that order.\n\nExample:\nfindPenPurchasePlan(10)\nOutput: [1, 0, 1] (One pen of 6 units and one pen of 4 units)", "level": "hard"}
{"task_id": "PHP/27", "prompt": "<?php\n\n/**\n    * Finds the smallest integer divisor greater than 1 that yields the same remainder when dividing three given numbers.\n    * This problem involves finding the minimum value of x (where x > 1) such that when x divides each of the \n    * three integers a, b, and c, the remainders are the same.\n    * Input: Three positive integers a, b, and c, each not exceeding 1,000,000.\n    * Output: Returns the smallest integer value of x that satisfies the condition.\n    * Example: For a = 300, b = 262, c = 205, the function returns 19.\n*/\n\nfunction findMinimumDivisor($a, $b, $c)", "canonical_solution": " {\n    $minDiff = min(abs($a - $b), abs($b - $c), abs($c - $a));\n\n    for ($x = 2; $x <= $minDiff; $x++) {\n        if ($a % $x === $b % $x && $b % $x === $c % $x) {\n            return $x;\n        }\n    }\n\n    // In case no common divisor is found, which should not happen as per the problem's guarantee.\n    return -1;\n}", "test": "function main(){\n    assert(findMinimumDivisor(300, 262, 205) === 19);\n    assert(findMinimumDivisor(100, 200, 300) === 2);\n    assert(findMinimumDivisor(15, 25, 35) === 2);\n    assert(findMinimumDivisor(7, 14, 21) === 7);\n    assert(findMinimumDivisor(9, 18, 27) === 3);\n    \n}\n\n\nmain();\n?>", "entry_point": "findMinimumDivisor", "signature": "function findMinimumDivisor($a, $b, $c)", "docstring": "Finds the smallest integer divisor greater than 1 that yields the same remainder when dividing three given numbers.\nThis problem involves finding the minimum value of x (where x > 1) such that when x divides each of the\nthree integers a, b, and c, the remainders are the same.\nInput: Three positive integers a, b, and c, each not exceeding 1,000,000.\nOutput: Returns the smallest integer value of x that satisfies the condition.\nExample: For a = 300, b = 262, c = 205, the function returns 19.", "instruction": "Write a PHP function `function findMinimumDivisor($a, $b, $c)` to solve the following problem:\nFinds the smallest integer divisor greater than 1 that yields the same remainder when dividing three given numbers.\nThis problem involves finding the minimum value of x (where x > 1) such that when x divides each of the\nthree integers a, b, and c, the remainders are the same.\nInput: Three positive integers a, b, and c, each not exceeding 1,000,000.\nOutput: Returns the smallest integer value of x that satisfies the condition.\nExample: For a = 300, b = 262, c = 205, the function returns 19.", "level": "easy"}
{"task_id": "PHP/28", "prompt": "<?php\n\n\n/**\n * Calculates the minimum number of apples required to be distributed among children.\n * Each child should receive a different number of apples and every child must receive at least one apple.\n * The total count of children is a positive integer not greater than 1000.\n * Input: An integer representing the number of children.\n * Output: An integer representing the minimum number of apples required.\n */\n\n function minimumApplesForChildren(int $childrenCount): int ", "canonical_solution": "{\n    // Sum of first n natural numbers\n    return ($childrenCount * ($childrenCount + 1)) / 2;\n}", "test": "function main(){\n    assert(minimumApplesForChildren(1) === 1);\n    assert(minimumApplesForChildren(2) === 3);\n    assert(minimumApplesForChildren(3) === 6);\n    assert(minimumApplesForChildren(8) === 36);\n    assert(minimumApplesForChildren(10) === 55);\n    \n}\n\n\nmain();\n?>", "entry_point": "minimumApplesForChildren", "signature": "function minimumApplesForChildren(int $childrenCount): int", "docstring": "Calculates the minimum number of apples required to be distributed among children.\nEach child should receive a different number of apples and every child must receive at least one apple.\nThe total count of children is a positive integer not greater than 1000.\nInput: An integer representing the number of children.\nOutput: An integer representing the minimum number of apples required.", "instruction": "Write a PHP function `function minimumApplesForChildren(int $childrenCount): int` to solve the following problem:\nCalculates the minimum number of apples required to be distributed among children.\nEach child should receive a different number of apples and every child must receive at least one apple.\nThe total count of children is a positive integer not greater than 1000.\nInput: An integer representing the number of children.\nOutput: An integer representing the minimum number of apples required.", "level": "easy"}
{"task_id": "PHP/29", "prompt": "<?php\n\n\n/**\n * Finds the nth digit after the decimal point in the decimal representation of the fraction a/b.\n * The function takes three integers as input: a (numerator), b (denominator), and n (position of the digit after the decimal point).\n * Conditions: 0 < a < b < 100, 1 <= n <= 10000.\n * The function calculates the decimal representation of a/b and returns the nth digit after the decimal point.\n * \n * Example:\n * Input: a = 1, b = 2, n = 1\n * Output: 5 (since 1/2 = 0.5)\n */\n\n function getDecimalDigit($a, $b, $n): int", "canonical_solution": "  {\n    if ($a <= 0 || $a >= $b || $b >= 100 || $n < 1 || $n > 10000) {\n        // Handle invalid input\n        return -1;\n    }\n\n    $decimal = $a / $b;\n    $decimalString = (string)$decimal;\n    $decimalPointPosition = strpos($decimalString, '.');\n\n    if ($decimalPointPosition === false || $decimalPointPosition + $n >= strlen($decimalString)) {\n        // Decimal point not found or n is beyond the length of the decimal part\n        return -1;\n    }\n\n    return (int)$decimalString[$decimalPointPosition + $n];\n}", "test": "function main(){\n    assert(getDecimalDigit(1, 2, 1) === 5);\n    assert(getDecimalDigit(1, 3, 1) === 3);\n    assert(getDecimalDigit(1, 4, 2) === 5);\n    assert(getDecimalDigit(3, 7, 3) === 8);\n    assert(getDecimalDigit(50, 99, 4) === 0);   \n}\n\n\nmain();\n?>", "entry_point": "getDecimalDigit", "signature": "function getDecimalDigit($a, $b, $n): int", "docstring": "Finds the nth digit after the decimal point in the decimal representation of the fraction a/b.\nThe function takes three integers as input: a (numerator), b (denominator), and n (position of the digit after the decimal point).\nConditions: 0 < a < b < 100, 1 <= n <= 10000.\nThe function calculates the decimal representation of a/b and returns the nth digit after the decimal point.\n\nExample:\nInput: a = 1, b = 2, n = 1\nOutput: 5 (since 1/2 = 0.5)", "instruction": "Write a PHP function `function getDecimalDigit($a, $b, $n): int` to solve the following problem:\nFinds the nth digit after the decimal point in the decimal representation of the fraction a/b.\nThe function takes three integers as input: a (numerator), b (denominator), and n (position of the digit after the decimal point).\nConditions: 0 < a < b < 100, 1 <= n <= 10000.\nThe function calculates the decimal representation of a/b and returns the nth digit after the decimal point.\n\nExample:\nInput: a = 1, b = 2, n = 1\nOutput: 5 (since 1/2 = 0.5)", "level": "middle"}
{"task_id": "PHP/30", "prompt": "<?php\n/**\n * Solves the Josephus Problem.\n * In this problem, N people are arranged in a circle and eliminated in every Mth position\n * until only one person remains. The function simulates this process and returns the order\n * in which people are eliminated.\n * \n * For example, with N = 8 and M = 5, the elimination order is 5, 2, 8, 7, 1, 4, 6, 3.\n * \n * Input: Two integers, N (number of people in the circle) and M (the elimination step).\n * Output: Returns an array representing the order in which people are eliminated.\n */\n\nfunction josephusProblem($n, $m) ", "canonical_solution": "{\n    $people = range(1, $n);\n    $result = [];\n    $i = 0;\n\n    while (count($people) > 0) {\n        $i = ($i + $m - 1) % count($people);\n        $result[] = $people[$i];\n        array_splice($people, $i, 1);\n    }\n\n    return $result;\n}", "test": "function main(){\n    assert(josephusProblem(8, 5) === [5, 2, 8, 7, 1, 4, 6, 3]);\n    assert(josephusProblem(4, 2) === [2, 4, 3, 1]);\n    assert(josephusProblem(6, 3) === [3, 6, 4, 2, 5, 1]);    \n}\n\n\nmain();\n?>", "entry_point": "josephusProblem", "signature": "function josephusProblem($n, $m)", "docstring": "Solves the Josephus Problem.\nIn this problem, N people are arranged in a circle and eliminated in every Mth position\nuntil only one person remains. The function simulates this process and returns the order\nin which people are eliminated.\n\nFor example, with N = 8 and M = 5, the elimination order is 5, 2, 8, 7, 1, 4, 6, 3.\n\nInput: Two integers, N (number of people in the circle) and M (the elimination step).\nOutput: Returns an array representing the order in which people are eliminated.", "instruction": "Write a PHP function `function josephusProblem($n, $m)` to solve the following problem:\nSolves the Josephus Problem.\nIn this problem, N people are arranged in a circle and eliminated in every Mth position\nuntil only one person remains. The function simulates this process and returns the order\nin which people are eliminated.\n\nFor example, with N = 8 and M = 5, the elimination order is 5, 2, 8, 7, 1, 4, 6, 3.\n\nInput: Two integers, N (number of people in the circle) and M (the elimination step).\nOutput: Returns an array representing the order in which people are eliminated.", "level": "easy"}
{"task_id": "PHP/31", "prompt": "<?php\n\n\n/**\n * Finds the positions of the k-th largest number in an array.\n * This function takes an array of integers and an integer k, \n * and returns the positions of the k-th largest number in the array. \n * If there are duplicates of the k-th largest number, it returns all positions.\n * If k is greater than the array's length or the array is empty, it returns an empty array.\n *\n * Example:\n * Input: numbers = [67, 43, 90, 78, 32], k = 1\n * Output: [3]\n * \n * Input: numbers = [1, 2, 3, 4, 5], k = 3\n * Output: [3]\n */\n function findKthLargestPositions(array $numbers, int $k): array ", "canonical_solution": " {\n    $length = count($numbers);\n    if ($length === 0 || $k > $length) {\n        return [];\n    }\n\n    $indexedNumbers = array_combine(range(1, $length), $numbers);\n    arsort($indexedNumbers);\n    $sortedNumbers = array_values($indexedNumbers);\n    $kthLargest = $sortedNumbers[$k - 1];\n\n    return array_keys($indexedNumbers, $kthLargest);\n}", "test": "function main(){\n    // Test case 1: k-th largest is unique\n    assert(findKthLargestPositions([67, 43, 90, 78, 32], 1) === [3]);\n\n    // Test case 2: k-th largest has duplicates\n    assert(findKthLargestPositions([20, 50, 20, 40], 3) === [1, 3]);\n\n    // Test case 3: k is larger than the array length\n    assert(findKthLargestPositions([10, 20, 30], 4) === []);\n\n    // Test case 4: Array is empty\n    assert(findKthLargestPositions([], 1) === []);\n\n    // Test case 5: k-th largest in the middle\n    assert(findKthLargestPositions([1, 2, 3, 4, 5], 3) === [3]);\n}\n\n\nmain();\n?>", "entry_point": "findKthLargestPositions", "signature": "function findKthLargestPositions(array $numbers, int $k): array", "docstring": "Finds the positions of the k-th largest number in an array.\nThis function takes an array of integers and an integer k,\nand returns the positions of the k-th largest number in the array.\nIf there are duplicates of the k-th largest number, it returns all positions.\nIf k is greater than the array's length or the array is empty, it returns an empty array.\n\nExample:\nInput: numbers = [67, 43, 90, 78, 32], k = 1\nOutput: [3]\n\nInput: numbers = [1, 2, 3, 4, 5], k = 3\nOutput: [3]", "instruction": "Write a PHP function `function findKthLargestPositions(array $numbers, int $k): array` to solve the following problem:\nFinds the positions of the k-th largest number in an array.\nThis function takes an array of integers and an integer k,\nand returns the positions of the k-th largest number in the array.\nIf there are duplicates of the k-th largest number, it returns all positions.\nIf k is greater than the array's length or the array is empty, it returns an empty array.\n\nExample:\nInput: numbers = [67, 43, 90, 78, 32], k = 1\nOutput: [3]\n\nInput: numbers = [1, 2, 3, 4, 5], k = 3\nOutput: [3]", "level": "easy"}
{"task_id": "PHP/32", "prompt": "<?php\n\n/**\n    * Calculates the k-th term of the Pell sequence modulo 32767.\n    * The Pell sequence is defined as follows:\n    *   a[1] = 1, a[2] = 2, and a[n] = 2*a[n-1] + a[n-2] for n > 2.\n    * This function computes the k-th term of this sequence modulo 32767.\n    * Input: An integer $k (1 \u2264 $k < 1000000), representing the position in the sequence.\n    * Output: Returns the k-th term of the Pell sequence modulo 32767 as an integer.\n    * Example:\n    *   For $k = 1, the function returns 1.\n    *   For $k = 8, the function returns 408.\n    */\n\n    function getPellNumberModulo($k)", "canonical_solution": "{\n        if ($k === 1) return 1;\n        if ($k === 2) return 2;\n    \n        $a = 1; // a[1]\n        $b = 2; // a[2]\n    \n        for ($i = 3; $i <= $k; $i++) {\n            $temp = (2 * $b + $a) % 32767;\n            $a = $b;\n            $b = $temp;\n        }\n    \n        return $b;\n    }", "test": "function main(){\n    assert(getPellNumberModulo(1) === 1);\n    assert(getPellNumberModulo(8) === 408);\n    assert(getPellNumberModulo(3) === 5);\n    assert(getPellNumberModulo(5) === 29);\n    assert(getPellNumberModulo(10) === 2378);\n    assert(getPellNumberModulo(100000) === 27550);\n    assert(getPellNumberModulo(999999) === 21600);\n    \n}", "entry_point": "getPellNumberModulo", "signature": "function getPellNumberModulo($k)", "docstring": "Calculates the k-th term of the Pell sequence modulo 32767.\nThe Pell sequence is defined as follows:\na[1] = 1, a[2] = 2, and a[n] = 2*a[n-1] + a[n-2] for n > 2.\nThis function computes the k-th term of this sequence modulo 32767.\nInput: An integer $k (1 \u2264 $k < 1000000), representing the position in the sequence.\nOutput: Returns the k-th term of the Pell sequence modulo 32767 as an integer.\nExample:\nFor $k = 1, the function returns 1.\nFor $k = 8, the function returns 408.", "instruction": "Write a PHP function `function getPellNumberModulo($k)` to solve the following problem:\nCalculates the k-th term of the Pell sequence modulo 32767.\nThe Pell sequence is defined as follows:\na[1] = 1, a[2] = 2, and a[n] = 2*a[n-1] + a[n-2] for n > 2.\nThis function computes the k-th term of this sequence modulo 32767.\nInput: An integer $k (1 \u2264 $k < 1000000), representing the position in the sequence.\nOutput: Returns the k-th term of the Pell sequence modulo 32767 as an integer.\nExample:\nFor $k = 1, the function returns 1.\nFor $k = 8, the function returns 408.", "level": "easy"}
{"task_id": "PHP/33", "prompt": "<?php\n\n/**\n    * Counts the number of flu infections in a dormitory grid after a certain number of days.\n    * The dormitory is represented as an n*n grid where each cell can have:\n    * - '.' representing a healthy person\n    * - '#' representing an empty room\n    * - '@' representing a person infected with the flu\n    * Each day, infected individuals spread the flu to adjacent (up, down, left, right) healthy individuals.\n    * The function calculates the total number of infected individuals after 'm' days.\n    * Input: \n    *   - $dormitory: A 2D array representing the n*n dormitory grid.\n    *   - $days: An integer representing the number of days.\n    * Output: Returns the total number of flu infections after 'm' days.\n    * Example:\n    *   Input: [['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 4\n    *   Output: 16\n*/\nfunction countFluInfections($dormitory, $days) ", "canonical_solution": "{\n    $n = count($dormitory);\n    $directions = [[-1, 0], [0, 1], [1, 0], [0, -1]];\n    $b = $dormitory;\n\n    for ($k = 2; $k <= $days; $k++) {\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $n; $j++) {\n                if ($dormitory[$i][$j] == '@') {\n                    foreach ($directions as $dir) {\n                        $xx = $i + $dir[0];\n                        $yy = $j + $dir[1];\n                        if ($xx >= 0 && $xx < $n && $yy >= 0 && $yy < $n && $b[$xx][$yy] == '.') {\n                            $b[$xx][$yy] = '@';\n                        }\n                    }\n                }\n            }\n        }\n        $dormitory = $b;\n    }\n\n    $ans = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($dormitory[$i][$j] == '@') {\n                $ans++;\n            }\n        }\n    }\n    // echo $ans;\n    return $ans;\n}", "test": "function main(){\n    assert(countFluInfections([\n        ['.','.','.','.','#'], \n        ['.','#','.','@','.'], \n        ['.','#','@','.','.'], \n        ['#','.','.','.','.'], \n        ['#','.','.','.','.']], 4) === 16);\n    \n\n    assert(countFluInfections([\n            ['.','.','.','.','#'], \n            ['.','#','.','@','.'], \n            ['.','#','@','.','.'], \n            ['#','.','.','.','.'], \n            ['#','.','.','.','.']], 1) === 2);\n    \n\n    assert(countFluInfections([\n                ['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 2) === 7);\n\n    assert(countFluInfections([\n                    ['.','.','.','.','#'], \n                    ['.','#','.','#','.'], \n                    ['.','#','#','.','.'], \n                    ['#','.','.','.','.'], \n                    ['#','.','.','.','.']], 100) === 0);\n}\n\n\nmain();\n?>", "entry_point": "countFluInfections", "signature": "function countFluInfections($dormitory, $days)", "docstring": "Counts the number of flu infections in a dormitory grid after a certain number of days.\nThe dormitory is represented as an n*n grid where each cell can have:\n- '.' representing a healthy person\n- '#' representing an empty room\n- '@' representing a person infected with the flu\nEach day, infected individuals spread the flu to adjacent (up, down, left, right) healthy individuals.\nThe function calculates the total number of infected individuals after 'm' days.\nInput:\n- $dormitory: A 2D array representing the n*n dormitory grid.\n- $days: An integer representing the number of days.\nOutput: Returns the total number of flu infections after 'm' days.\nExample:\nInput: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\nOutput: 16", "instruction": "Write a PHP function `function countFluInfections($dormitory, $days)` to solve the following problem:\nCounts the number of flu infections in a dormitory grid after a certain number of days.\nThe dormitory is represented as an n*n grid where each cell can have:\n- '.' representing a healthy person\n- '#' representing an empty room\n- '@' representing a person infected with the flu\nEach day, infected individuals spread the flu to adjacent (up, down, left, right) healthy individuals.\nThe function calculates the total number of infected individuals after 'm' days.\nInput:\n- $dormitory: A 2D array representing the n*n dormitory grid.\n- $days: An integer representing the number of days.\nOutput: Returns the total number of flu infections after 'm' days.\nExample:\nInput: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\nOutput: 16", "level": "hard"}
{"task_id": "PHP/34", "prompt": "<?php\n\n\n/**\n * Counts the number of unique paths an ant can take to move from the bottom-left to the top-right corner of a grid.\n * The grid is defined by m rows and n columns. The ant starts at (1,1) and can only move right or up due to an injury.\n * - For a 1x1 grid (m = 1, n = 1), there is only 1 path.\n * - For a 2x3 grid (m = 2, n = 3), there are 3 possible paths.\n * Input: Two integers, m and n, representing the number of rows and columns of the grid.\n * Output: Returns the count of unique paths from (1,1) to (m,n).\n */\n\n function countAntPaths($m, $n): int ", "canonical_solution": " {\n    // Base case\n    if ($m == 1 || $n == 1) {\n        return 1;\n    }\n\n    // Create a 2D array to store path counts\n    $pathCount = array_fill(0, $m, array_fill(0, $n, 0));\n\n    // Initialize the first row and first column\n    for ($i = 0; $i < $m; $i++) {\n        $pathCount[$i][0] = 1;\n    }\n    for ($j = 0; $j < $n; $j++) {\n        $pathCount[0][$j] = 1;\n    }\n\n    // Calculate path counts for other cells\n    for ($i = 1; $i < $m; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $pathCount[$i][$j] = $pathCount[$i - 1][$j] + $pathCount[$i][$j - 1];\n        }\n    }\n\n    return $pathCount[$m - 1][$n - 1];\n}", "test": "function main(){\n    assert(countAntPaths(1, 1) === 1); // One path in a 1x1 grid\n    assert(countAntPaths(2, 3) === 3); // Three paths in a 2x3 grid\n    assert(countAntPaths(3, 3) === 6); // Six paths in a 3x3 grid    \n    assert(countAntPaths(7, 13) === 18564);    \n}\n\n\nmain();\n?>", "entry_point": "countAntPaths", "signature": "function countAntPaths($m, $n): int", "docstring": "Counts the number of unique paths an ant can take to move from the bottom-left to the top-right corner of a grid.\nThe grid is defined by m rows and n columns. The ant starts at (1,1) and can only move right or up due to an injury.\n- For a 1x1 grid (m = 1, n = 1), there is only 1 path.\n- For a 2x3 grid (m = 2, n = 3), there are 3 possible paths.\nInput: Two integers, m and n, representing the number of rows and columns of the grid.\nOutput: Returns the count of unique paths from (1,1) to (m,n).", "instruction": "Write a PHP function `function countAntPaths($m, $n): int` to solve the following problem:\nCounts the number of unique paths an ant can take to move from the bottom-left to the top-right corner of a grid.\nThe grid is defined by m rows and n columns. The ant starts at (1,1) and can only move right or up due to an injury.\n- For a 1x1 grid (m = 1, n = 1), there is only 1 path.\n- For a 2x3 grid (m = 2, n = 3), there are 3 possible paths.\nInput: Two integers, m and n, representing the number of rows and columns of the grid.\nOutput: Returns the count of unique paths from (1,1) to (m,n).", "level": "middle"}
{"task_id": "PHP/35", "prompt": "<?php\n\n/**\n * Determines if there exists at least one permutation of adding '+' or '-' \n * before each number in a sequence such that the sum of the sequence is \n * divisible by a given number k.\n * \n * The function takes two arguments: \n * - $numbers: An array of positive integers representing the sequence.\n * - $k: An integer representing the divisor.\n * \n * The function returns \"YES\" if at least one permutation of the sequence \n * can be divided by $k, otherwise returns \"NO\".\n * \n * Example:\n * Given $numbers = [1, 2, 4] and $k = 2, the function will return \"NO\".\n * Given $numbers = [1, 2, 4] and $k = 3, the function will return \"YES\".\n */\n\n function canBeDivided(array $numbers, int $k): string ", "canonical_solution": " {\n    $totalCombinations = pow(2, count($numbers));\n    for ($i = 0; $i < $totalCombinations; $i++) {\n        $sum = 0;\n        for ($j = 0; $j < count($numbers); $j++) {\n            // Check if the jth bit in i is set to decide if to add or subtract\n            if ($i & (1 << $j)) {\n                $sum += $numbers[$j];\n            } else {\n                $sum -= $numbers[$j];\n            }\n        }\n        if ($sum % $k == 0) {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}", "test": "function main(){\n    assert(canBeDivided([1, 2, 4], 2) === \"NO\");\n    assert(canBeDivided([1, 2, 4], 3) === \"YES\");\n    assert(canBeDivided([1, 2, 3], 6) === \"YES\");\n    assert(canBeDivided([5, 10, 15], 7) === \"YES\");\n    assert(canBeDivided([10, 20, 30], 10) === \"YES\");\n    \n}\n\n\nmain();\n?>", "entry_point": "canBeDivided", "signature": "function canBeDivided(array $numbers, int $k): string", "docstring": "Determines if there exists at least one permutation of adding '+' or '-'\nbefore each number in a sequence such that the sum of the sequence is\ndivisible by a given number k.\n\nThe function takes two arguments:\n- $numbers: An array of positive integers representing the sequence.\n- $k: An integer representing the divisor.\n\nThe function returns \"YES\" if at least one permutation of the sequence\ncan be divided by $k, otherwise returns \"NO\".\n\nExample:\nGiven $numbers = [1, 2, 4] and $k = 2, the function will return \"NO\".\nGiven $numbers = [1, 2, 4] and $k = 3, the function will return \"YES\".", "instruction": "Write a PHP function `function canBeDivided(array $numbers, int $k): string` to solve the following problem:\nDetermines if there exists at least one permutation of adding '+' or '-'\nbefore each number in a sequence such that the sum of the sequence is\ndivisible by a given number k.\n\nThe function takes two arguments:\n- $numbers: An array of positive integers representing the sequence.\n- $k: An integer representing the divisor.\n\nThe function returns \"YES\" if at least one permutation of the sequence\ncan be divided by $k, otherwise returns \"NO\".\n\nExample:\nGiven $numbers = [1, 2, 4] and $k = 2, the function will return \"NO\".\nGiven $numbers = [1, 2, 4] and $k = 3, the function will return \"YES\".", "level": "middle"}
{"task_id": "PHP/36", "prompt": "<?php\n\n\n/**\n * Evaluate a Polish expression and return the result.\n * In Polish notation, operators precede their operands. For example, the expression \"+ 11.0 12.0\" is equivalent to \"11.0 + 12.0\".\n * Supported operators are +, -, *, and /.\n * Input: A string containing a valid Polish expression separated by spaces.\n * Output: A float representing the result of evaluating the expression.\n * \n * Example:\n * - For the input \"+ 11.0 12.0\", the function should return 23.0.\n * - For the input \"* + 2.0 3.0 4.0\", the function should return 20.0.\n */\n\n\n function evaluatePolishExpression($expression) ", "canonical_solution": " {\n    $tokens = explode(' ', $expression);\n    $stack = new SplStack();\n\n    foreach (array_reverse($tokens) as $token) {\n        if (is_numeric($token)) {\n            $stack->push((float)$token);\n        } else {\n            $a = $stack->pop();\n            $b = $stack->pop();\n\n            switch ($token) {\n                case '+':\n                    $stack->push($a + $b);\n                    break;\n                case '-':\n                    $stack->push($a - $b);\n                    break;\n                case '*':\n                    $stack->push($a * $b);\n                    break;\n                case '/':\n                    $stack->push($a / $b);\n                    break;\n            }\n        }\n    }\n\n    return $stack->pop();\n}\n", "test": "function main(){\n    assert(evaluatePolishExpression(\"* + 11.0 12.0 + 24.0 35.0\") === 1357.0);\n    assert(evaluatePolishExpression(\"+ 2.0 2.0\") === 4.0);\n    assert(evaluatePolishExpression(\"- 10.0 5.0\") === 5.0);\n    // Testcase 1\n    $expression1 = \"+ 11.0 12.0\";\n    $result1 = evaluatePolishExpression($expression1);\n    assert($result1 === 23.0);\n\n    // Testcase 2\n    $expression2 = \"* + 2.0 3.0 4.0\";\n    $result2 = evaluatePolishExpression($expression2);\n    assert($result2 === 20.0);\n\n\n\n}\n\nmain();\n?>", "entry_point": "evaluatePolishExpression", "signature": "function evaluatePolishExpression($expression)", "docstring": "Evaluate a Polish expression and return the result.\nIn Polish notation, operators precede their operands. For example, the expression \"+ 11.0 12.0\" is equivalent to \"11.0 + 12.0\".\nSupported operators are +, -, *, and /.\nInput: A string containing a valid Polish expression separated by spaces.\nOutput: A float representing the result of evaluating the expression.\n\nExample:\n- For the input \"+ 11.0 12.0\", the function should return 23.0.\n- For the input \"* + 2.0 3.0 4.0\", the function should return 20.0.", "instruction": "Write a PHP function `function evaluatePolishExpression($expression)` to solve the following problem:\nEvaluate a Polish expression and return the result.\nIn Polish notation, operators precede their operands. For example, the expression \"+ 11.0 12.0\" is equivalent to \"11.0 + 12.0\".\nSupported operators are +, -, *, and /.\nInput: A string containing a valid Polish expression separated by spaces.\nOutput: A float representing the result of evaluating the expression.\n\nExample:\n- For the input \"+ 11.0 12.0\", the function should return 23.0.\n- For the input \"* + 2.0 3.0 4.0\", the function should return 20.0.", "level": "hard"}
{"task_id": "PHP/37", "prompt": "<?php\n/**\n * Question Description:\nYou are given a string consisting of distinct lowercase letters. Your task is to write a function generatePermutations that generates all possible permutations of the input string and returns them in lexicographical order.\n\nInput:\nA string consisting of distinct lowercase letters, where the length of the string is at most 6.\n\nOutput:\nAn array containing all permutations of the input string, sorted in lexicographical order.\n\nExample:\n    $permutations = generatePermutations(\"abc\");\n    $permutations should contain the following array:\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n */\n\n\n function generatePermutations($str) ", "canonical_solution": " {\n    // Base case: if the string is empty, return an empty array\n    if (strlen($str) == 0) {\n        return [];\n    }\n\n    // If the string has only one character, return an array with that character\n    if (strlen($str) == 1) {\n        return [$str];\n    }\n\n    $permutations = [];\n\n    // Iterate through each character in the string\n    for ($i = 0; $i < strlen($str); $i++) {\n        // Remove the character at index $i\n        $char = $str[$i];\n        $remaining = substr($str, 0, $i) . substr($str, $i + 1);\n\n        // Generate permutations of the remaining string\n        $remainingPermutations = generatePermutations($remaining);\n\n        // Prepend the removed character to each permutation\n        foreach ($remainingPermutations as $perm) {\n            $permutations[] = $char . $perm;\n        }\n    }\n\n    // Sort the permutations in lexicographical order\n    sort($permutations);\n\n\n    return $permutations;\n}", "test": "function main(){\n    $permutations = generatePermutations(\"abc\");\n    assert($permutations === [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]);\n    $permutations = generatePermutations(\"abcd\");\n    assert($permutations === [\"abcd\",\"abdc\",\"acbd\",\"acdb\",\"adbc\",\"adcb\",\"bacd\",\"badc\",\"bcad\",\"bcda\",\"bdac\",\"bdca\",\"cabd\",\"cadb\",\"cbad\",\"cbda\",\"cdab\",\"cdba\",\"dabc\",\"dacb\",\"dbac\",\"dbca\",\"dcab\",\"dcba\"]);\n\n}\n\n\nmain();\n?>", "entry_point": "generatePermutations", "signature": "function generatePermutations($str)", "docstring": "Question Description:\nYou are given a string consisting of distinct lowercase letters. Your task is to write a function generatePermutations that generates all possible permutations of the input string and returns them in lexicographical order.\n\nInput:\nA string consisting of distinct lowercase letters, where the length of the string is at most 6.\n\nOutput:\nAn array containing all permutations of the input string, sorted in lexicographical order.\n\nExample:\n$permutations = generatePermutations(\"abc\");\n$permutations should contain the following array:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]", "instruction": "Write a PHP function `function generatePermutations($str)` to solve the following problem:\nQuestion Description:\nYou are given a string consisting of distinct lowercase letters. Your task is to write a function generatePermutations that generates all possible permutations of the input string and returns them in lexicographical order.\n\nInput:\nA string consisting of distinct lowercase letters, where the length of the string is at most 6.\n\nOutput:\nAn array containing all permutations of the input string, sorted in lexicographical order.\n\nExample:\n$permutations = generatePermutations(\"abc\");\n$permutations should contain the following array:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]", "level": "hard"}
{"task_id": "PHP/38", "prompt": "<?php\n\n/**\n * Question:\n * You have M identical apples that need to be placed into N identical plates. You are allowed\n * to have some plates empty. How many different ways are there to distribute the apples into the plates?\n * 5,1,1 and 1,5,1 are the same division method.\n *\n * Example:\n * - Input: M = 7, N = 3\n * - Output: 8\n\n */\n\n function countDistributionMethods($M, $N) ", "canonical_solution": " {\n    // Initialize a 2D array to store the number of ways to distribute M apples into N plates\n    $dp = array_fill(0, $M + 1, array_fill(0, $N + 1, 0));\n\n    // There is one way to distribute 0 apples into any number of plates\n    for ($i = 0; $i <= $N; $i++) {\n        $dp[0][$i] = 1;\n    }\n\n    // Fill the dp array\n    for ($i = 1; $i <= $M; $i++) {\n        for ($j = 1; $j <= $N; $j++) {\n            // If the number of apples is less than the number of plates,\n            // the number of ways is the same as the number of ways to distribute i apples into j - 1 plates\n            if ($i < $j) {\n                $dp[$i][$j] = $dp[$i][$j - 1];\n            } else {\n                // Otherwise, the number of ways is the sum of the number of ways to distribute i apples into j - 1 plates\n                // and the number of ways to distribute i - j apples into j plates\n                $dp[$i][$j] = $dp[$i][$j - 1] + $dp[$i - $j][$j];\n            }\n        }\n    }\n\n    // The number of ways to distribute M apples into N plates is stored in dp[M][N]\n    return $dp[$M][$N];\n}\n", "test": "function main(){\n    // Test cases\n    assert(countDistributionMethods(7, 3) === 8);\n    assert(countDistributionMethods(5, 2) === 3);\n    assert(countDistributionMethods(10, 5) === 30);\n\n}\n\n\nmain();\n?>", "entry_point": "countDistributionMethods", "signature": "function countDistributionMethods($M, $N)", "docstring": "Question:\nYou have M identical apples that need to be placed into N identical plates. You are allowed\nto have some plates empty. How many different ways are there to distribute the apples into the plates?\n5,1,1 and 1,5,1 are the same division method.\n\nExample:\n- Input: M = 7, N = 3\n- Output: 8", "instruction": "Write a PHP function `function countDistributionMethods($M, $N)` to solve the following problem:\nQuestion:\nYou have M identical apples that need to be placed into N identical plates. You are allowed\nto have some plates empty. How many different ways are there to distribute the apples into the plates?\n5,1,1 and 1,5,1 are the same division method.\n\nExample:\n- Input: M = 7, N = 3\n- Output: 8", "level": "hard"}
{"task_id": "PHP/39", "prompt": "<?php\n\n/**\n * Generates all possible ways to express a natural number as the sum of smaller natural numbers.\n * For example, when n=7, there are 14 different ways to express it as the sum of smaller natural numbers.\n * This function returns all these expressions in lexicographical (dictionary) order.\n * below is output when n = 7\n *  7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n * @param int $n The input natural number (greater than 1).\n * @return array An array of strings representing all possible expressions.\n */\n\n function generateNumberExpressions($n) ", "canonical_solution": " {\n    // This function will store the results\n    $results = [];\n\n\n\n    // Initialize the recursion with an empty array for the output\n    findCombinations($n, 1, [], $results);\n\n    // Format the results\n    return array_map(function($expression) use ($n) {\n        return \"$n=$expression\";\n    }, $results);\n}\n\n    // Helper function for recursion\nfunction findCombinations($n, $start, $output, &$results)\n    {\n        if ($n == 0) {\n            // Add to results only if there are more than one number in the combination\n            if (count($output) > 1) {\n                $results[] = implode('+', $output);\n            }\n            return;\n        }\n\n        for ($i = $start; $i <= $n; $i++) {\n            findCombinations($n - $i, $i, array_merge($output, [$i]), $results);\n        }\n}\n", "test": "function main(){\n    $result = generateNumberExpressions(7);\n    assert($result===[\"7=1+1+1+1+1+1+1\",\"7=1+1+1+1+1+2\",\"7=1+1+1+1+3\",\"7=1+1+1+2+2\",\"7=1+1+1+4\",\"7=1+1+2+3\",\"7=1+1+5\",\"7=1+2+2+2\",\"7=1+2+4\",\"7=1+3+3\",\"7=1+6\",\"7=2+2+3\",\"7=2+5\",\"7=3+4\"]);\n    $result = generateNumberExpressions(6);\n    assert($result===[  \"6=1+1+1+1+1+1\",\"6=1+1+1+1+2\",\"6=1+1+1+3\",\"6=1+1+2+2\",\"6=1+1+4\",\"6=1+2+3\",\"6=1+5\",\"6=2+2+2\",\"6=2+4\",\"6=3+3\"]);\n  \n  \n}\n\n\nmain();\n?>", "entry_point": "generateNumberExpressions", "signature": "function generateNumberExpressions($n)", "docstring": "Generates all possible ways to express a natural number as the sum of smaller natural numbers.\nFor example, when n=7, there are 14 different ways to express it as the sum of smaller natural numbers.\nThis function returns all these expressions in lexicographical (dictionary) order.\nbelow is output when n = 7\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n The input natural number (greater than 1).\n@return array An array of strings representing all possible expressions.", "instruction": "Write a PHP function `function generateNumberExpressions($n)` to solve the following problem:\nGenerates all possible ways to express a natural number as the sum of smaller natural numbers.\nFor example, when n=7, there are 14 different ways to express it as the sum of smaller natural numbers.\nThis function returns all these expressions in lexicographical (dictionary) order.\nbelow is output when n = 7\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n The input natural number (greater than 1).\n@return array An array of strings representing all possible expressions.", "level": "hard"}
{"task_id": "PHP/40", "prompt": "<?php\n\n\n/**\n * Calculates the maximum number of distinct letters one can pass through in a letter matrix.\n * Starting from the top-left corner, you can move up, down, left, or right, but cannot visit a cell more than once.\n * This function finds the maximum number of distinct letters that can be traversed in the matrix.\n * \n * Inputs:\n * - $rows (int): The number of rows in the matrix.\n * - $cols (int): The number of columns in the matrix.\n * - $matrix (array): A 2D array representing the letter matrix.\n *\n * Output:\n * - Returns an integer representing the maximum number of distinct letters that can be traversed.\n *\n * Example:\n * maxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) should return 9.\n */\n\nfunction maxDistinctLetters($rows, $cols, $matrix) ", "canonical_solution": "{\n    // Global variables to store the maximum count and visited letters\n    $maxCount = 0;\n    $visited = array_fill(0, 1001, false);\n\n    // Directions for movement (up, down, left, right)\n    $dx = [0, 1, -1, 0, 0];\n    $dy = [0, 0, 0, 1, -1];\n\n    // Inner function to perform DFS\n    $dfs = function($x, $y, $count) use (&$visited, &$maxCount, &$dfs, $matrix, $rows, $cols, $dx, $dy) {\n        $maxCount = max($maxCount, $count);\n        for ($i = 1; $i <= 4; $i++) {\n            $tx = $x + $dx[$i];\n            $ty = $y + $dy[$i];\n\n            // Check boundaries and if the cell is not visited\n            if ($tx > 0 && $tx <= $rows && $ty > 0 && $ty <= $cols && !$visited[ord($matrix[$tx - 1][$ty - 1])]) {\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = true;\n                $dfs($tx, $ty, $count + 1);\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = false;\n            }\n        }\n    };\n\n    // Start DFS from the top-left corner\n    $visited[ord($matrix[0][0])] = true;\n    $dfs(1, 1, 1);\n\n    return $maxCount;\n}", "test": "function main(){\n    $matrix = [\n        ['H', 'F', 'D', 'F', 'F', 'B'],\n        ['A', 'J', 'H', 'G', 'D', 'H'],\n        ['D', 'G', 'A', 'G', 'E', 'H']\n    ];\n    assert(maxDistinctLetters(3, 6, $matrix) === 6);\n  \n    $matrix = [\n        ['H', 'F', 'Y' ],\n        ['A', 'J', 'Z' ],\n        ['D', 'G', 'A']\n    ];\n    assert(maxDistinctLetters(3, 3, $matrix) === 8);\n\n    $matrix = [\n        ['A', 'D', 'G' ],\n        ['B', 'E', 'H' ],\n        ['C', 'F', 'I']\n    ];\n    assert(maxDistinctLetters(3, 3, $matrix) === 9);\n\n}\n\n\nmain();\n?>", "entry_point": "maxDistinctLetters", "signature": "function maxDistinctLetters($rows, $cols, $matrix)", "docstring": "Calculates the maximum number of distinct letters one can pass through in a letter matrix.\nStarting from the top-left corner, you can move up, down, left, or right, but cannot visit a cell more than once.\nThis function finds the maximum number of distinct letters that can be traversed in the matrix.\n\nInputs:\n- $rows (int): The number of rows in the matrix.\n- $cols (int): The number of columns in the matrix.\n- $matrix (array): A 2D array representing the letter matrix.\n\nOutput:\n- Returns an integer representing the maximum number of distinct letters that can be traversed.\n\nExample:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) should return 9.", "instruction": "Write a PHP function `function maxDistinctLetters($rows, $cols, $matrix)` to solve the following problem:\nCalculates the maximum number of distinct letters one can pass through in a letter matrix.\nStarting from the top-left corner, you can move up, down, left, or right, but cannot visit a cell more than once.\nThis function finds the maximum number of distinct letters that can be traversed in the matrix.\n\nInputs:\n- $rows (int): The number of rows in the matrix.\n- $cols (int): The number of columns in the matrix.\n- $matrix (array): A 2D array representing the letter matrix.\n\nOutput:\n- Returns an integer representing the maximum number of distinct letters that can be traversed.\n\nExample:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) should return 9.", "level": "hard"}
{"task_id": "PHP/41", "prompt": "<?php\n\n/**\n * Counts the number of evenly matched pairs of students based on their exam scores.\n * Two students are considered evenly matched if the difference in each subject's score\n * is not greater than 5 and the total score difference is not greater than 10.\n * Input: An integer N representing the number of students followed by N lines of three integers each\n *         representing the scores of each student in Chinese, Mathematics, and English respectively.\n * Output: An integer representing the number of evenly matched pairs of students.\n */\n\nfunction countEvenlyMatchedPairs($N, $students) ", "canonical_solution": "{\n    $count = 0;\n    for ($i = 0; $i < $N - 1; $i++) {\n        for ($j = $i + 1; $j < $N; $j++) {\n            $diff = abs($students[$i][0] - $students[$j][0]) <= 5 &&\n                    abs($students[$i][1] - $students[$j][1]) <= 5 &&\n                    abs($students[$i][2] - $students[$j][2]) <= 5 &&\n                    abs(array_sum($students[$i]) - array_sum($students[$j])) <= 10;\n            if ($diff) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}", "test": "function main(){\n    assert(countEvenlyMatchedPairs(3, [[90, 90, 90], [85, 95, 90], [80, 100, 91]]) === 2);\n    assert(countEvenlyMatchedPairs(3, [[100, 100, 100], [85, 95, 90], [80, 100, 91]]) === 1);\n    assert(countEvenlyMatchedPairs(4, [[100, 100, 100],[100, 100, 100],[100, 100, 100],[100, 100, 100]]) === 6);\n    \n}\n\n\nmain();\n?>", "entry_point": "countEvenlyMatchedPairs", "signature": "function countEvenlyMatchedPairs($N, $students)", "docstring": "Counts the number of evenly matched pairs of students based on their exam scores.\n  Two students are considered evenly matched if the difference in each subject's score\n  is not greater than 5 and the total score difference is not greater than 10.\n  Input: An integer N representing the number of students followed by N lines of three integers each\n          representing the scores of each student in Chinese, Mathematics, and English respectively.\n  Output: An integer representing the number of evenly matched pairs of students.", "instruction": "Write a PHP function `function countEvenlyMatchedPairs($N, $students)` to solve the following problem:\nCounts the number of evenly matched pairs of students based on their exam scores.\n  Two students are considered evenly matched if the difference in each subject's score\n  is not greater than 5 and the total score difference is not greater than 10.\n  Input: An integer N representing the number of students followed by N lines of three integers each\n          representing the scores of each student in Chinese, Mathematics, and English respectively.\n  Output: An integer representing the number of evenly matched pairs of students.", "level": "easy"}
{"task_id": "PHP/42", "prompt": "<?php\n\n\n/**\n * Calculates the total number of cigarettes Peter can smoke.\n * Peter starts with a certain number of cigarettes and can exchange a specific number of cigarette butts for a new cigarette.\n * This process repeats until he can no longer exchange butts for new cigarettes.\n *\n * Parameters:\n * - $initialCigarettes (int): The initial number of cigarettes Peter has.\n * - $buttsRequiredForNew (int): The number of cigarette butts required to exchange for a new cigarette.\n *\n * Returns:\n * int: The total number of cigarettes Peter can smoke.\n *\n * Example:\n * - With 4 initial cigarettes and 3 butts required for a new one, Peter can smoke 5 cigarettes in total.\n * - With 10 initial cigarettes and 3 butts required for a new one, Peter can smoke 14 cigarettes in total.\n */\nfunction calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int ", "canonical_solution": "{\n    $totalSmoked = $initialCigarettes;\n    $currentButts = $initialCigarettes;\n    \n    while ($currentButts >= $buttsRequiredForNew) {\n        $newCigarettes = intdiv($currentButts, $buttsRequiredForNew);\n        $totalSmoked += $newCigarettes;\n        $currentButts = ($currentButts % $buttsRequiredForNew) + $newCigarettes;\n    }\n    \n    return $totalSmoked;\n}", "test": "function main(){\n    assert(calculateTotalCigarettes(4, 3) === 5, 'Test Case 1 Failed');\n    assert(calculateTotalCigarettes(10, 3) === 14, 'Test Case 2 Failed');\n    assert(calculateTotalCigarettes(1, 2) === 1, 'Test Case 3 Failed');\n    assert(calculateTotalCigarettes(20, 5) === 24, 'Test Case 4 Failed');\n    assert(calculateTotalCigarettes(0, 3) === 0, 'Test Case 5 Failed');\n}\n\n\nmain();\n?>", "entry_point": "calculateTotalCigarettes", "signature": "function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int", "docstring": "Calculates the total number of cigarettes Peter can smoke.\n  Peter starts with a certain number of cigarettes and can exchange a specific number of cigarette butts for a new cigarette.\n  This process repeats until he can no longer exchange butts for new cigarettes.\n \n  Parameters:\n  - $initialCigarettes (int): The initial number of cigarettes Peter has.\n  - $buttsRequiredForNew (int): The number of cigarette butts required to exchange for a new cigarette.\n \n  Returns:\n  int: The total number of cigarettes Peter can smoke.\n \n  Example:\n  - With 4 initial cigarettes and 3 butts required for a new one, Peter can smoke 5 cigarettes in total.\n  - With 10 initial cigarettes and 3 butts required for a new one, Peter can smoke 14 cigarettes in total.", "instruction": "Write a PHP function `function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int` to solve the following problem:\nCalculates the total number of cigarettes Peter can smoke.\n  Peter starts with a certain number of cigarettes and can exchange a specific number of cigarette butts for a new cigarette.\n  This process repeats until he can no longer exchange butts for new cigarettes.\n \n  Parameters:\n  - $initialCigarettes (int): The initial number of cigarettes Peter has.\n  - $buttsRequiredForNew (int): The number of cigarette butts required to exchange for a new cigarette.\n \n  Returns:\n  int: The total number of cigarettes Peter can smoke.\n \n  Example:\n  - With 4 initial cigarettes and 3 butts required for a new one, Peter can smoke 5 cigarettes in total.\n  - With 10 initial cigarettes and 3 butts required for a new one, Peter can smoke 14 cigarettes in total.", "level": "easy"}
{"task_id": "PHP/43", "prompt": "<?php\n\n/**\n * Finds the length of the longest sequence of consecutive numbers in an array.\n * Consecutive numbers are numbers which come one after the other in sequence without any gaps.\n * For example, in the array [1, 3, 5, 4, 2, 6], the longest sequence of consecutive numbers is [1, 2, 3, 4, 5, 6], which has a length of 6.\n * Input: An array of integers.\n * Output: The length of the longest sequence of consecutive numbers found in the array.\n */\nfunction findLongestConsecutiveSequence(array $numbers): int ", "canonical_solution": "{\n    if (empty($numbers)) {\n        return 0;\n    }\n    sort($numbers);\n    $longest = 1;\n    $currentLength = 1;\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] == $numbers[$i - 1] + 1) {\n            $currentLength++;\n        } elseif ($numbers[$i] != $numbers[$i - 1]) {\n            $longest = max($longest, $currentLength);\n            $currentLength = 1;\n        }\n    }\n    return max($longest, $currentLength);\n}", "test": "function main(){\n    assert(findLongestConsecutiveSequence([1, 5, 6, 2, 3, 4, 5, 6, 8, 9]) === 6);\n    assert(findLongestConsecutiveSequence([10, 4, 20, 1, 3, 2]) === 4);\n    assert(findLongestConsecutiveSequence([1, 2, 2, 3]) === 3);\n    assert(findLongestConsecutiveSequence([]) === 0);\n    assert(findLongestConsecutiveSequence([7]) === 1);\n    \n}\n\n\nmain();\n?>", "entry_point": "findLongestConsecutiveSequence", "signature": "function findLongestConsecutiveSequence(array $numbers): int", "docstring": "Finds the length of the longest sequence of consecutive numbers in an array.\n  Consecutive numbers are numbers which come one after the other in sequence without any gaps.\n  For example, in the array [1, 3, 5, 4, 2, 6], the longest sequence of consecutive numbers is [1, 2, 3, 4, 5, 6], which has a length of 6.\n  Input: An array of integers.\n  Output: The length of the longest sequence of consecutive numbers found in the array.", "instruction": "Write a PHP function `function findLongestConsecutiveSequence(array $numbers): int` to solve the following problem:\nFinds the length of the longest sequence of consecutive numbers in an array.\n  Consecutive numbers are numbers which come one after the other in sequence without any gaps.\n  For example, in the array [1, 3, 5, 4, 2, 6], the longest sequence of consecutive numbers is [1, 2, 3, 4, 5, 6], which has a length of 6.\n  Input: An array of integers.\n  Output: The length of the longest sequence of consecutive numbers found in the array.", "level": "easy"}
{"task_id": "PHP/44", "prompt": "<?php\n\n/**\n * Compares the area of a square and a rectangle to determine which is larger.\n * The square's side length is represented by $a, while the rectangle's dimensions are represented by $b and $c.\n * Input: Three integers $a, $b, and $c, where $a is the side length of the square, and $b and $c are the width and height of the rectangle, respectively.\n * Output: Returns a string \"Alice\" if the square's area is greater, \"Bob\" if the rectangle's area is greater, or \"Equal\" if both areas are the same.\n */\nfunction compareArea($a, $b, $c): string ", "canonical_solution": "{\n    $squareArea = $a * $a;\n    $rectangleArea = $b * $c;\n    if ($squareArea > $rectangleArea) {\n        return \"Alice\";\n    } elseif ($squareArea < $rectangleArea) {\n        return \"Bob\";\n    } else {\n        return \"Equal\";\n    }\n}", "test": "function main(){\n    // Test cases\n    assert(compareArea(5, 4, 6) === \"Alice\"); \n    assert(compareArea(7, 5, 10) === \"Bob\"); \n    assert(compareArea(6, 3, 12) === \"Equal\"); \n\n}\n\n\nmain();\n?>", "entry_point": "compareArea", "signature": "function compareArea($a, $b, $c): string", "docstring": "Compares the area of a square and a rectangle to determine which is larger.\n  The square's side length is represented by $a, while the rectangle's dimensions are represented by $b and $c.\n  Input: Three integers $a, $b, and $c, where $a is the side length of the square, and $b and $c are the width and height of the rectangle, respectively.\n  Output: Returns a string \"Alice\" if the square's area is greater, \"Bob\" if the rectangle's area is greater, or \"Equal\" if both areas are the same.", "instruction": "Write a PHP function `function compareArea($a, $b, $c): string` to solve the following problem:\nCompares the area of a square and a rectangle to determine which is larger.\n  The square's side length is represented by $a, while the rectangle's dimensions are represented by $b and $c.\n  Input: Three integers $a, $b, and $c, where $a is the side length of the square, and $b and $c are the width and height of the rectangle, respectively.\n  Output: Returns a string \"Alice\" if the square's area is greater, \"Bob\" if the rectangle's area is greater, or \"Equal\" if both areas are the same.", "level": "easy"}
{"task_id": "PHP/45", "prompt": "<?php\n\n\n/**\n * Finds M positive integers whose sum is N and whose product is as large as possible.\n * Outputs the combination with the smallest lexicographical order if there are multiple possibilities.\n * The function aims to distribute the total sum N into M parts such that the product of these parts is maximized.\n * \n * Input: Two integers, $N representing the total sum and $M representing the number of parts.\n * Output: An array of integers representing the distribution that maximizes the product.\n * Example: Given N = 6 and M = 3, the function returns [2, 2, 2] as dividing 6 into three parts of 2 each maximizes the product 2*2*2 = 8.\n */\n\nfunction maxProductDistribution($N, $M) ", "canonical_solution": "{\n    // Initial equal distribution\n    $baseValue = intdiv($N, $M);\n    $remainder = $N % $M;\n    \n    $result = array_fill(0, $M, $baseValue);\n    \n    // Adjust the distribution to distribute the remainder, enhancing the product\n    for ($i = 0; $i < $remainder; $i++) {\n        $result[$i]++;\n    }\n    \n    // Ensure lexicographical order is smallest by distributing remainder from the start\n    sort($result);\n    \n    return $result;\n}", "test": "function main(){\n    // Test Case 1: Simple distribution\n    assert(maxProductDistribution(6, 3) === [2, 2, 2]);\n\n    // Test Case 2: When distribution is not perfectly even\n    assert(maxProductDistribution(7, 3) === [2, 2, 3]);\n\n    // Test Case 3: Larger numbers with an even distribution\n    assert(maxProductDistribution(10, 2) === [5, 5]);\n\n    // Test Case 4: Larger numbers with a remainder\n    assert(maxProductDistribution(9, 4) === [2, 2, 2, 3]);\n    assert(maxProductDistribution(9, 3) === [3,3, 3]);\n\n    // Test Case 5: Single part (edge case)\n    assert(maxProductDistribution(5, 1) === [5]);\n\n}\n\n\nmain();\n?>", "entry_point": "maxProductDistribution", "signature": "function maxProductDistribution($N, $M)", "docstring": "Finds M positive integers whose sum is N and whose product is as large as possible.\n  Outputs the combination with the smallest lexicographical order if there are multiple possibilities.\n  The function aims to distribute the total sum N into M parts such that the product of these parts is maximized.\n  \n  Input: Two integers, $N representing the total sum and $M representing the number of parts.\n  Output: An array of integers representing the distribution that maximizes the product.\n  Example: Given N = 6 and M = 3, the function returns [2, 2, 2] as dividing 6 into three parts of 2 each maximizes the product 222 = 8.", "instruction": "Write a PHP function `function maxProductDistribution($N, $M)` to solve the following problem:\nFinds M positive integers whose sum is N and whose product is as large as possible.\n  Outputs the combination with the smallest lexicographical order if there are multiple possibilities.\n  The function aims to distribute the total sum N into M parts such that the product of these parts is maximized.\n  \n  Input: Two integers, $N representing the total sum and $M representing the number of parts.\n  Output: An array of integers representing the distribution that maximizes the product.\n  Example: Given N = 6 and M = 3, the function returns [2, 2, 2] as dividing 6 into three parts of 2 each maximizes the product 222 = 8.", "level": "easy"}
{"task_id": "PHP/46", "prompt": "<?php\n\n\n/**\n * Calculates the number of characters in a composition's title.\n * The title may contain uppercase and lowercase English letters, digits, spaces, and newline characters.\n * The function counts the characters excluding spaces and newline characters.\n * \n * Example usage:\n * - For a title \"234\", the function returns 3.\n * - For a title \"Ca 45\\n\", including a newline character, the function returns 4.\n * \n * @param string $title The title of the composition.\n * @return int The number of characters in the title, excluding spaces and newline characters.\n */\n\nfunction countTitleCharacters(string $title): int ", "canonical_solution": "{\n    $count = 0;\n    for ($i = 0; $i < strlen($title); $i++) {\n        if ($title[$i] != \" \" && $title[$i] != \"\\n\") {\n            $count++;\n        }\n    }\n    return $count;\n}", "test": "function main(){\n    assert(countTitleCharacters(\"234\") === 3, 'Testcase 1 failed');\n    assert(countTitleCharacters(\"Ca 45\") === 4, 'Testcase 2 failed');\n    assert(countTitleCharacters(\" \\nCa 45\\n \") === 4, 'Testcase 3 failed');\n    assert(countTitleCharacters(\"\") === 0, 'Testcase 5 failed');\n    \n}\n\n\nmain();\n?>", "entry_point": "countTitleCharacters", "signature": "function countTitleCharacters(string $title): int", "docstring": "* Calculates the number of characters in a composition's title.\n * The title may contain uppercase and lowercase English letters, digits, spaces, and newline characters.\n * The function counts the characters excluding spaces and newline characters.\n * \n * Example usage:\n * - For a title \"234\", the function returns 3.\n * - For a title \"Ca 45\\n\", including a newline character, the function returns 4.\n * \n * @param string $title The title of the composition.\n * @return int The number of characters in the title, excluding spaces and newline characters.  Calculates the number of characters in a composition's title.\n  The title may contain uppercase and lowercase English letters, digits, spaces, and newline characters.\n  The function counts the characters excluding spaces and newline characters.\n  \n  Example usage:\n  - For a title \"234\", the function returns 3.\n  - For a title \"Ca 45\\n\", including a newline character, the function returns 4.\n  \n  @param string $title The title of the composition.\n  @return int The number of characters in the title, excluding spaces and newline characters.", "instruction": "Write a PHP function `function countTitleCharacters(string $title): int` to solve the following problem:\n* Calculates the number of characters in a composition's title.\n * The title may contain uppercase and lowercase English letters, digits, spaces, and newline characters.\n * The function counts the characters excluding spaces and newline characters.\n * \n * Example usage:\n * - For a title \"234\", the function returns 3.\n * - For a title \"Ca 45\\n\", including a newline character, the function returns 4.\n * \n * @param string $title The title of the composition.\n * @return int The number of characters in the title, excluding spaces and newline characters.  Calculates the number of characters in a composition's title.\n  The title may contain uppercase and lowercase English letters, digits, spaces, and newline characters.\n  The function counts the characters excluding spaces and newline characters.\n  \n  Example usage:\n  - For a title \"234\", the function returns 3.\n  - For a title \"Ca 45\\n\", including a newline character, the function returns 4.\n  \n  @param string $title The title of the composition.\n  @return int The number of characters in the title, excluding spaces and newline characters.", "level": "easy"}
{"task_id": "PHP/47", "prompt": "<?php\n\n\n/**\n * Counts the number of students enrolled in both courses A and B.\n * Given two arrays representing the student IDs of those who have enrolled in courses A and B,\n * this function calculates the total number of students who have enrolled in both courses.\n * \n * The function accepts two parameters:\n * - $courseA (array): An array of integers representing the IDs of students enrolled in course A.\n * - $courseB (array): An array of integers representing the IDs of students enrolled in course B.\n * \n * The function returns an integer representing the number of students enrolled in both courses.\n * \n * Example:\n * If course A has students with IDs [1, 2, 3, 4, 5] and course B has students with IDs [1, 3, 4, 5, 6],\n * the function should return 4 because students with IDs 1, 3, 4, and 5 are enrolled in both courses.\n */\n\nfunction countCommonStudents(array $courseA, array $courseB): int ", "canonical_solution": "{\n    // Find the intersection of both arrays to get common student IDs\n    $commonStudents = array_intersect($courseA, $courseB);\n    // Count and return the number of common student IDs\n    return count($commonStudents);\n}", "test": "function main(){\n    assert(countCommonStudents([1, 2, 3, 4, 5], [1, 3, 4, 5, 6]) === 4); // Expected: 4\n    assert(countCommonStudents([2, 4, 6, 8], [1, 3, 5, 7]) === 0); // Expected: 0, no common students\n    assert(countCommonStudents([1, 3, 5, 7, 9], [2, 3, 5, 7]) === 3); // Expected: 3, students with IDs 3, 5, and 7 are common\n    \n}\n\n\nmain();\n?>", "entry_point": "countCommonStudents", "signature": "function countCommonStudents(array $courseA, array $courseB): int", "docstring": "Counts the number of students enrolled in both courses A and B.\n  Given two arrays representing the student IDs of those who have enrolled in courses A and B,\n  this function calculates the total number of students who have enrolled in both courses.\n  \n  The function accepts two parameters:\n  - $courseA (array): An array of integers representing the IDs of students enrolled in course A.\n  - $courseB (array): An array of integers representing the IDs of students enrolled in course B.\n  \n  The function returns an integer representing the number of students enrolled in both courses.\n  \n  Example:\n  If course A has students with IDs [1, 2, 3, 4, 5] and course B has students with IDs [1, 3, 4, 5, 6],\n  the function should return 4 because students with IDs 1, 3, 4, and 5 are enrolled in both courses.", "instruction": "Write a PHP function `function countCommonStudents(array $courseA, array $courseB): int` to solve the following problem:\nCounts the number of students enrolled in both courses A and B.\n  Given two arrays representing the student IDs of those who have enrolled in courses A and B,\n  this function calculates the total number of students who have enrolled in both courses.\n  \n  The function accepts two parameters:\n  - $courseA (array): An array of integers representing the IDs of students enrolled in course A.\n  - $courseB (array): An array of integers representing the IDs of students enrolled in course B.\n  \n  The function returns an integer representing the number of students enrolled in both courses.\n  \n  Example:\n  If course A has students with IDs [1, 2, 3, 4, 5] and course B has students with IDs [1, 3, 4, 5, 6],\n  the function should return 4 because students with IDs 1, 3, 4, and 5 are enrolled in both courses.", "level": "easy"}
{"task_id": "PHP/48", "prompt": "<?php\n\n\n\n/**\n * Calculates the total earnings of Deliv-e-droid based on the number of successfully delivered and failed deliveries.\n * Deliv-e-droid earns 50 units of money for each successful delivery and loses 10 units for each failed delivery.\n * Additionally, if the number of successful deliveries is greater than the number of failed ones, Deliv-e-droid receives a bonus of 500 units.\n * \n * Arguments:\n * - $delivered: The number of successfully delivered packages (0 <= $delivered <= 100).\n * - $failed: The number of failed deliveries (0 <= $failed <= 100).\n * \n * Returns:\n * - The total earnings of Deliv-e-droid, which can be negative if the losses outweigh the gains.\n * \n * Examples:\n * - calculateDroidEarnings(5, 2) returns 730.\n * - calculateDroidEarnings(0, 10) returns -100.\n */\n\n function calculateDroidEarnings(int $delivered, int $failed): int ", "canonical_solution": " {\n    $earnings = $delivered * 50;\n    $losses = $failed * 10;\n    if ($delivered > $failed) {\n        $earnings += 500; // Bonus\n    }\n    return $earnings - $losses;\n}\n", "test": "function main(){\n    assert(calculateDroidEarnings(5, 2) === 730, 'Test case 1 failed');\n    assert(calculateDroidEarnings(0, 10) === -100, 'Test case 2 failed');\n    assert(calculateDroidEarnings(10, 0) === 1000, 'Test case 3 failed');\n    assert(calculateDroidEarnings(3, 3) === 120, 'Test case 4 failed');\n    assert(calculateDroidEarnings(0, 0) === 0, 'Test case 5 failed');\n    \n}\n\n\nmain();\n?>", "entry_point": "calculateDroidEarnings", "signature": "function calculateDroidEarnings(int $delivered, int $failed): int", "docstring": "Calculates the total earnings of Deliv-e-droid based on the number of successfully delivered and failed deliveries.\n  Deliv-e-droid earns 50 units of money for each successful delivery and loses 10 units for each failed delivery.\n  Additionally, if the number of successful deliveries is greater than the number of failed ones, Deliv-e-droid receives a bonus of 500 units.\n  \n  Arguments:\n  - $delivered: The number of successfully delivered packages (0 <= $delivered <= 100).\n  - $failed: The number of failed deliveries (0 <= $failed <= 100).\n  \n  Returns:\n  - The total earnings of Deliv-e-droid, which can be negative if the losses outweigh the gains.\n  \n  Examples:\n  - calculateDroidEarnings(5, 2) returns 730.\n  - calculateDroidEarnings(0, 10) returns -100.", "instruction": "Write a PHP function `function calculateDroidEarnings(int $delivered, int $failed): int` to solve the following problem:\nCalculates the total earnings of Deliv-e-droid based on the number of successfully delivered and failed deliveries.\n  Deliv-e-droid earns 50 units of money for each successful delivery and loses 10 units for each failed delivery.\n  Additionally, if the number of successful deliveries is greater than the number of failed ones, Deliv-e-droid receives a bonus of 500 units.\n  \n  Arguments:\n  - $delivered: The number of successfully delivered packages (0 <= $delivered <= 100).\n  - $failed: The number of failed deliveries (0 <= $failed <= 100).\n  \n  Returns:\n  - The total earnings of Deliv-e-droid, which can be negative if the losses outweigh the gains.\n  \n  Examples:\n  - calculateDroidEarnings(5, 2) returns 730.\n  - calculateDroidEarnings(0, 10) returns -100.", "level": "easy"}
{"task_id": "PHP/49", "prompt": "<?php\n\n\n/**\n * Identifies the missing (broken) and duplicate IDs from a given set of ID groups.\n * Each ID group represents a collection of ticket IDs which are supposed to be consecutive but contain a mistake:\n * one ID is missing, and one ID is duplicated. This function calculates and returns the missing and duplicated IDs.\n *\n * Note: The missing ID will not be at the start or end of the overall ID range.\n *\n * Input: An array of arrays, where each sub-array contains integers representing ticket IDs.\n * Output: An array with two integers, the first being the missing (broken) ID and the second the duplicate ID.\n *\n * Example:\n * Input: [[5, 6, 8, 11, 9], [10, 12, 9]]\n * Output: [7, 9] // 7 is missing, and 9 is duplicated.\n */\nfunction findMissingAndDuplicateIDs(array $idGroups): array ", "canonical_solution": "{\n    // Flatten the array of ID groups into a single array\n    $allIds = array_merge(...$idGroups);\n    \n    // Sort the IDs to make it easier to find duplicates and missing IDs\n    sort($allIds);\n    \n    $missingID = null;\n    $duplicateID = null;\n    \n    // Iterate over the sorted IDs to find the missing and duplicate IDs\n    for ($i = 0; $i < count($allIds) - 1; $i++) {\n        // Check if the next ID is the same as the current ID (duplicate)\n        if ($allIds[$i] == $allIds[$i + 1]) {\n            $duplicateID = $allIds[$i];\n        }\n        // Check if the next ID is not the immediate successor (missing)\n        elseif ($allIds[$i] + 1 != $allIds[$i + 1]) {\n            $missingID = $allIds[$i] + 1;\n        }\n    }\n    \n    // Return both the missing and the duplicate IDs\n    return [$missingID, $duplicateID];\n}", "test": "function main(){\n\n    // Test case based on the example provided\n    assert(findMissingAndDuplicateIDs([[5, 6, 8, 11, 9], [10, 12, 9]]) === [7, 9]);\n    \n    // Additional test cases\n    assert(findMissingAndDuplicateIDs([[1, 2, 4], [3, 5, 5, 7]]) === [6, 5]);\n    assert(findMissingAndDuplicateIDs([[10, 11, 12, 14, 17], [13, 15, 12]]) === [16, 12]);\n    \n}\n\n\nmain();\n?>", "entry_point": "findMissingAndDuplicateIDs", "signature": "function findMissingAndDuplicateIDs(array $idGroups): array", "docstring": "Identifies the missing (broken) and duplicate IDs from a given set of ID groups.\n  Each ID group represents a collection of ticket IDs which are supposed to be consecutive but contain a mistake:\n  one ID is missing, and one ID is duplicated. This function calculates and returns the missing and duplicated IDs.\n \n  Note: The missing ID will not be at the start or end of the overall ID range.\n \n  Input: An array of arrays, where each sub-array contains integers representing ticket IDs.\n  Output: An array with two integers, the first being the missing (broken) ID and the second the duplicate ID.\n \n  Example:\n  Input: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Output: [7, 9] // 7 is missing, and 9 is duplicated.", "instruction": "Write a PHP function `function findMissingAndDuplicateIDs(array $idGroups): array` to solve the following problem:\nIdentifies the missing (broken) and duplicate IDs from a given set of ID groups.\n  Each ID group represents a collection of ticket IDs which are supposed to be consecutive but contain a mistake:\n  one ID is missing, and one ID is duplicated. This function calculates and returns the missing and duplicated IDs.\n \n  Note: The missing ID will not be at the start or end of the overall ID range.\n \n  Input: An array of arrays, where each sub-array contains integers representing ticket IDs.\n  Output: An array with two integers, the first being the missing (broken) ID and the second the duplicate ID.\n \n  Example:\n  Input: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Output: [7, 9] // 7 is missing, and 9 is duplicated.", "level": "hard"}
{"task_id": "PHP/50", "prompt": "<?php\n\n\n/**\n * Counts the number of digits, lowercase letters, and uppercase letters in an 8-character string.\n *\n * This function takes a single string of exactly 8 characters as input.\n * It then counts and returns the number of digits, lowercase letters, and uppercase letters within the string.\n *\n * Input: A string of 8 characters.\n * Output: An array of three integers, where:\n * - The first integer is the count of digits in the string.\n * - The second integer is the count of lowercase letters in the string.\n * - The third integer is the count of uppercase letters in the string.\n *\n * Examples:\n * - For the string \"yLOI2022\", the output should be [4, 1, 3].\n * - For the string \"IAKIOIOI\", the output should be [0, 0, 8].\n * - For the string \"1n2s0e1s\", the output should be [4, 4, 0].\n */\n\n function countCharacters($s) ", "canonical_solution": " {\n    $digitCount = $lowerCount = $upperCount = 0;\n    \n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_digit($s[$i])) {\n            $digitCount++;\n        } elseif (ctype_lower($s[$i])) {\n            $lowerCount++;\n        } elseif (ctype_upper($s[$i])) {\n            $upperCount++;\n        }\n    }\n    \n    return [$digitCount, $lowerCount, $upperCount];\n}", "test": "function main(){\n    // Testcases\n    assert(countCharacters(\"yLOI2022\") === [4, 1, 3]);\n    assert(countCharacters(\"IAKIOIOI\") === [0, 0, 8]);\n    assert(countCharacters(\"1n2s0e1s\") === [4, 4, 0]);\n\n    // echo \"All test cases passed!\";\n\n}\n\n\nmain();\n?>", "entry_point": "countCharacters", "signature": "function countCharacters($s)", "docstring": "Counts the number of digits, lowercase letters, and uppercase letters in an 8-character string.\n \n  This function takes a single string of exactly 8 characters as input.\n  It then counts and returns the number of digits, lowercase letters, and uppercase letters within the string.\n \n  Input: A string of 8 characters.\n  Output: An array of three integers, where:\n  - The first integer is the count of digits in the string.\n  - The second integer is the count of lowercase letters in the string.\n  - The third integer is the count of uppercase letters in the string.\n \n  Examples:\n  - For the string \"yLOI2022\", the output should be [4, 1, 3].\n  - For the string \"IAKIOIOI\", the output should be [0, 0, 8].\n  - For the string \"1n2s0e1s\", the output should be [4, 4, 0].", "instruction": "Write a PHP function `function countCharacters($s)` to solve the following problem:\nCounts the number of digits, lowercase letters, and uppercase letters in an 8-character string.\n \n  This function takes a single string of exactly 8 characters as input.\n  It then counts and returns the number of digits, lowercase letters, and uppercase letters within the string.\n \n  Input: A string of 8 characters.\n  Output: An array of three integers, where:\n  - The first integer is the count of digits in the string.\n  - The second integer is the count of lowercase letters in the string.\n  - The third integer is the count of uppercase letters in the string.\n \n  Examples:\n  - For the string \"yLOI2022\", the output should be [4, 1, 3].\n  - For the string \"IAKIOIOI\", the output should be [0, 0, 8].\n  - For the string \"1n2s0e1s\", the output should be [4, 4, 0].", "level": "easy"}
