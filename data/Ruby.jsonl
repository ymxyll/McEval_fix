{"task_id": "Ruby/1", "prompt": "# Check if in given list of numbers, any two numbers are closer to each other than\n# given threshold.\n#>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n#False\n#>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n#True\ndef has_close_elements(numbers, threshold)", "canonical_solution": "numbers.each_with_index do |elem, idx|\n      numbers.each_with_index do |elem2, idx2|\n        next if idx == idx2\n  \n        distance = (elem - elem2).abs\n        return true if distance < threshold\n      end\n    end\n  \n    false\n  end", "test": "  # Test cases\n  def check(has_close_elements)\n    raise 'Test failed' unless has_close_elements.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3)\n    raise 'Test failed' if has_close_elements.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05)\n    raise 'Test failed' unless has_close_elements.call([1.0, 2.0, 5.9, 4.0, 5.0], 0.95)\n    raise 'Test failed' if has_close_elements.call([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\n    raise 'Test failed' unless has_close_elements.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n    raise 'Test failed' unless has_close_elements.call([1.1, 2.2, 3.1, 4.1, 5.1], 1.0)\n    raise 'Test failed' if has_close_elements.call([1.1, 2.2, 3.1, 4.1, 5.1], 0.5)\n  \n    puts 'All tests passed!'\n  end\n  \n  check(method(:has_close_elements))", "entry_point": "has_close_elements", "signature": "def has_close_elements(numbers, threshold)", "docstring": "Check if in given list of numbers, any two numbers are closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue", "instruction": "Write a ruby function `def has_close_elements(numbers, threshold)` to solve the following problem:\nCheck if in given list of numbers, any two numbers are closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue", "level": "easy"}
{"task_id": "Ruby/2", "prompt": "# Counts the number of times the digit '1' appears in all numbers from 1 to n.\n# The function takes a single argument, n, which is a positive integer, and \n# returns the total count of the digit '1' appearing in all numbers from 1 to n.\n#\n# Example:\n# >>> count_ones_in_range(15)\n# 8\n# >>> count_ones_in_range(20)\n# 12\n\ndef count_ones_in_range(n)", "canonical_solution": "  count = 0\n  (1..n).each do |num|\n    count += num.to_s.count('1')\n  end\n  count\nend\n", "test": "raise 'Test failed' unless count_ones_in_range(15) == 8\nraise 'Test failed' unless count_ones_in_range(20) == 12\nraise 'Test failed' unless count_ones_in_range(100) == 21\nraise 'Test failed' unless count_ones_in_range(5) == 1\nraise 'Test failed' unless count_ones_in_range(55) == 16\nraise 'Test failed' unless count_ones_in_range(0) == 0\n\nputs 'All tests passed!'", "entry_point": "count_ones_in_range", "signature": "def count_ones_in_range(n)", "docstring": "Counts the number of times the digit '1' appears in all numbers from 1 to n.\nThe function takes a single argument, n, which is a positive integer, and\nreturns the total count of the digit '1' appearing in all numbers from 1 to n.\n\nExample:\n>>> count_ones_in_range(15)\n8\n>>> count_ones_in_range(20)\n12", "instruction": "Write a ruby function `def count_ones_in_range(n)` to solve the following problem:\nCounts the number of times the digit '1' appears in all numbers from 1 to n.\nThe function takes a single argument, n, which is a positive integer, and\nreturns the total count of the digit '1' appearing in all numbers from 1 to n.\n\nExample:\n>>> count_ones_in_range(15)\n8\n>>> count_ones_in_range(20)\n12", "level": "easy"}
{"task_id": "Ruby/3", "prompt": "# Calculates the total count of the digit '1' in the binary representation of all numbers in a given range [l, r].\n# The function takes two arguments, l and r, where l <= r and both are non-negative integers. It returns the sum \n# of all '1's in the binary representation of each number in the range [l, r].\n#\n# Examples:\n# >>> sum_of_binary_ones(2, 3)\n# 3\n# >>> sum_of_binary_ones(5, 5)\n# 2\n# >>> sum_of_binary_ones(0, 4)\n# 5\n\n\ndef sum_of_binary_ones(l, r)", "canonical_solution": "  total_count = 0\n  (l..r).each do |num|\n    total_count += num.to_s(2).count('1')\n  end\n  total_count\nend", "test": "raise 'Test failed' unless sum_of_binary_ones(2, 3) == 3\nraise 'Test failed' unless sum_of_binary_ones(5, 5) == 2\nraise 'Test failed' unless sum_of_binary_ones(0, 4) == 5\nraise 'Test failed' unless sum_of_binary_ones(10, 15) == 17\nraise 'Test failed' unless sum_of_binary_ones(0, 0) == 0\n\n\n\nputs 'All tests passed!'", "entry_point": "sum_of_binary_ones", "signature": "def sum_of_binary_ones(l, r)", "docstring": "Calculates the total count of the digit '1' in the binary representation of all numbers in a given range [l, r].\nThe function takes two arguments, l and r, where l <= r and both are non-negative integers. It returns the sum\nof all '1's in the binary representation of each number in the range [l, r].\n\nExamples:\n>>> sum_of_binary_ones(2, 3)\n3\n>>> sum_of_binary_ones(5, 5)\n2\n>>> sum_of_binary_ones(0, 4)\n5", "instruction": "Write a ruby function `def sum_of_binary_ones(l, r)` to solve the following problem:\nCalculates the total count of the digit '1' in the binary representation of all numbers in a given range [l, r].\nThe function takes two arguments, l and r, where l <= r and both are non-negative integers. It returns the sum\nof all '1's in the binary representation of each number in the range [l, r].\n\nExamples:\n>>> sum_of_binary_ones(2, 3)\n3\n>>> sum_of_binary_ones(5, 5)\n2\n>>> sum_of_binary_ones(0, 4)\n5", "level": "easy"}
{"task_id": "Ruby/4", "prompt": "# Converts a positive integer into a unique binary power representation.\n# The function takes a single argument, n, which is a positive integer, and\n# returns a string representing n as a sum of powers of 2, with the powers \n# themselves also represented as sums of powers of 2 when applicable.\n#\n# The representation is formatted as '2(b)' where 'b' is the power. If 'b' itself \n# is a power of 2, it's represented in a similar nested format. Spaces are not \n# used in the representation.\n#\n# Example:\n# >>> binary_power_representation(137)\n# \"2(2(2)+2+2(0))+2(2+2(0))+2(0)\"\n# >>> binary_power_representation(1315)\n# \"2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)\"\n\ndef binary_power_representation(n)", "canonical_solution": "    return '2(0)' if n == 1  # Base case for 1\n  \n    terms = []\n    power = 0\n    while n > 0\n      if n % 2 == 1\n        # If the power is greater than 1, we need to represent it in binary power format\n        if power > 1\n          terms << \"2(#{binary_power_representation(power)})\"\n        else\n          terms << (power == 1 ? '2' : '2(0)')\n        end\n      end\n      n /= 2\n      power += 1\n    end\n    puts terms.reverse.join('+')\n    terms.reverse.join('+')\n    \n  end", "test": "raise 'Test failed' unless binary_power_representation(137) == \"2(2(2)+2+2(0))+2(2+2(0))+2(0)\"\nraise 'Test failed' unless binary_power_representation(1315) == \"2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)\"\nraise 'Test failed' unless binary_power_representation(1) == \"2(0)\"\nraise 'Test failed' unless binary_power_representation(3) == \"2+2(0)\"\nraise 'Test failed' unless binary_power_representation(10) == \"2(2+2(0))+2\"\n\n\nputs 'All tests passed!'", "entry_point": "binary_power_representation", "signature": "def binary_power_representation(n)", "docstring": "Converts a positive integer into a unique binary power representation.\nThe function takes a single argument, n, which is a positive integer, and\nreturns a string representing n as a sum of powers of 2, with the powers\nthemselves also represented as sums of powers of 2 when applicable.\n\nThe representation is formatted as '2(b)' where 'b' is the power. If 'b' itself\nis a power of 2, it's represented in a similar nested format. Spaces are not\nused in the representation.\n\nExample:\n>>> binary_power_representation(137)\n\"2(2(2)+2+2(0))+2(2+2(0))+2(0)\"\n>>> binary_power_representation(1315)\n\"2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)\"", "instruction": "Write a ruby function `def binary_power_representation(n)` to solve the following problem:\nConverts a positive integer into a unique binary power representation.\nThe function takes a single argument, n, which is a positive integer, and\nreturns a string representing n as a sum of powers of 2, with the powers\nthemselves also represented as sums of powers of 2 when applicable.\n\nThe representation is formatted as '2(b)' where 'b' is the power. If 'b' itself\nis a power of 2, it's represented in a similar nested format. Spaces are not\nused in the representation.\n\nExample:\n>>> binary_power_representation(137)\n\"2(2(2)+2+2(0))+2(2+2(0))+2(0)\"\n>>> binary_power_representation(1315)\n\"2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)\"", "level": "hard"}
{"task_id": "Ruby/5", "prompt": "# Finds the maximum possible Least Common Multiple (LCM) of any three numbers chosen between 1 and n.\n# The function takes a single argument, n, which is a positive integer, and returns the highest LCM\n# attainable by any combination of three distinct numbers from 1 to n.\n#\n# Example:\n# >>> max_lcm_of_three(9)\n# 504\n# >>> max_lcm_of_three(10)\n# 630\n\ndef max_lcm_of_three(n)", "canonical_solution": "    return 1 if n < 3\n  \n    # When n is greater than or equal to 3\n    if n.even?\n        if n % 3 == 0\n            (n-1)*(n-2)*(n-3)\n        else\n            n * (n - 1) * (n - 3)\n        end\n    else\n      n * (n - 1) * (n - 2)\n    end\n  end", "test": "raise 'Test failed' unless max_lcm_of_three(9) == 504\nraise 'Test failed' unless max_lcm_of_three(10) == 630\nraise 'Test failed' unless max_lcm_of_three(3) == 6\nraise 'Test failed' unless max_lcm_of_three(5) == 60\nraise 'Test failed' unless max_lcm_of_three(1) == 1\n  \n\nputs 'All tests passed!'", "entry_point": "max_lcm_of_three", "signature": "def max_lcm_of_three(n)", "docstring": "Finds the maximum possible Least Common Multiple (LCM) of any three numbers chosen between 1 and n.\nThe function takes a single argument, n, which is a positive integer, and returns the highest LCM\nattainable by any combination of three distinct numbers from 1 to n.\n\nExample:\n>>> max_lcm_of_three(9)\n504\n>>> max_lcm_of_three(10)\n630", "instruction": "Write a ruby function `def max_lcm_of_three(n)` to solve the following problem:\nFinds the maximum possible Least Common Multiple (LCM) of any three numbers chosen between 1 and n.\nThe function takes a single argument, n, which is a positive integer, and returns the highest LCM\nattainable by any combination of three distinct numbers from 1 to n.\n\nExample:\n>>> max_lcm_of_three(9)\n504\n>>> max_lcm_of_three(10)\n630", "level": "easy"}
{"task_id": "Ruby/6", "prompt": "# Swaps the case of each letter in a given string.\n# The function takes a single argument, input_string, which is a string containing only English alphabets without any spaces or other types of characters. \n# It returns a new string where every lowercase letter is converted to uppercase and every uppercase letter is converted to lowercase.\n#\n# Example:\n# >>> swap_case(\"HelloWorld\")\n# \"hELLOwORLD\"\n# >>> swap_case(\"Ruby\")\n# \"rUBY\"\n\n\ndef swap_case(input_string)", "canonical_solution": "    input_string.chars.map do |char|\n      if char =~ /[a-z]/\n        char.upcase\n      elsif char =~ /[A-Z]/\n        char.downcase\n      else\n        char\n      end\n    end.join\n  end", "test": "raise 'Test failed' unless swap_case(\"HelloWorld\") == \"hELLOwORLD\"\nraise 'Test failed' unless swap_case(\"Ruby\") == \"rUBY\"\nraise 'Test failed' unless swap_case(\"AeDb\") == \"aEdB\"\nraise 'Test failed' unless swap_case(\"JAVA\") == \"java\"\nraise 'Test failed' unless swap_case(\"python\") == \"PYTHON\"\n  \n\nputs 'All tests passed!'", "entry_point": "swap_case", "signature": "def swap_case(input_string)", "docstring": "Swaps the case of each letter in a given string.\nThe function takes a single argument, input_string, which is a string containing only English alphabets without any spaces or other types of characters.\nIt returns a new string where every lowercase letter is converted to uppercase and every uppercase letter is converted to lowercase.\n\nExample:\n>>> swap_case(\"HelloWorld\")\n\"hELLOwORLD\"\n>>> swap_case(\"Ruby\")\n\"rUBY\"", "instruction": "Write a ruby function `def swap_case(input_string)` to solve the following problem:\nSwaps the case of each letter in a given string.\nThe function takes a single argument, input_string, which is a string containing only English alphabets without any spaces or other types of characters.\nIt returns a new string where every lowercase letter is converted to uppercase and every uppercase letter is converted to lowercase.\n\nExample:\n>>> swap_case(\"HelloWorld\")\n\"hELLOwORLD\"\n>>> swap_case(\"Ruby\")\n\"rUBY\"", "level": "easy"}
{"task_id": "Ruby/7", "prompt": "# Finds the maximum value in an array and returns its value along with its index.\n# The function takes a single argument, arr, which is an array of integers. The array size should be between 1 and 100.\n# It returns an array containing the maximum value and its index in the format [max_value, index].\n#\n# Example:\n# >>> find_max_with_index([3, 2, 1])\n# [3, 0]\n# >>> find_max_with_index([10, 20, 30, 40])\n# [40, 3]\n\ndef find_max_with_index(arr)", "canonical_solution": "    max_value = arr[0]\n    index = 0\n    arr.each_with_index do |value, idx|\n      if value > max_value\n        max_value = value\n        index = idx\n      end\n    end\n    [max_value, index]\n  end", "test": "raise 'Test failed' unless find_max_with_index([3, 2, 1]) == [3, 0]\nraise 'Test failed' unless find_max_with_index([10, 20, 30, 40]) == [40, 3]\nraise 'Test failed' unless find_max_with_index([5]) == [5, 0]\nraise 'Test failed' unless find_max_with_index([-3, -2, -1, -4]) == [-1, 2]\nraise 'Test failed' unless find_max_with_index([100, 200, 100, 50]) == [200, 1]\n  \nputs 'All tests passed!'", "entry_point": "find_max_with_index", "signature": "def find_max_with_index(arr)", "docstring": "Finds the maximum value in an array and returns its value along with its index.\nThe function takes a single argument, arr, which is an array of integers. The array size should be between 1 and 100.\nIt returns an array containing the maximum value and its index in the format [max_value, index].\n\nExample:\n>>> find_max_with_index([3, 2, 1])\n[3, 0]\n>>> find_max_with_index([10, 20, 30, 40])\n[40, 3]", "instruction": "Write a ruby function `def find_max_with_index(arr)` to solve the following problem:\nFinds the maximum value in an array and returns its value along with its index.\nThe function takes a single argument, arr, which is an array of integers. The array size should be between 1 and 100.\nIt returns an array containing the maximum value and its index in the format [max_value, index].\n\nExample:\n>>> find_max_with_index([3, 2, 1])\n[3, 0]\n>>> find_max_with_index([10, 20, 30, 40])\n[40, 3]", "level": "easy"}
{"task_id": "Ruby/8", "prompt": "# Calculates the minimum time required for a character to reach the top of a building with varying floor heights.\n# The character can move up one or two floors at a time, but cannot use the two-floor jump consecutively. \n# Moving up one floor takes one unit of time, while jumping up two floors is instantaneous.\n#\n# Args:\n# - floor_heights (Array): An array of integers representing the height of each floor.\n#\n# Returns:\n# - Integer: The minimum time required to reach the top of the building.\n#\n# Example:\n# >>> minimum_time_to_top([3, 5, 1, 8, 4])\n# 1\n\ndef minimum_time_to_top(heights)", "canonical_solution": "    # Initialize arrays for storing minimum time for climb and jump to each floor.\n    n = heights.length\n    \n    climb_time = [0, heights.first]\n    jump_time  = [0, 0]\n  \n    (2..n).each do |i|\n      climb_time[i] = [climb_time[i - 1], jump_time[i - 1]].min + heights[i-1]\n      jump_time[i]  = [climb_time[i - 1], climb_time[i - 2]].min\n    end\n    [climb_time[n], jump_time[n]].min\n  end", "test": "raise 'Test failed' unless minimum_time_to_top([3, 5, 1, 8, 4]) == 1\nraise 'Test failed' unless minimum_time_to_top([2, 2, 2, 2, 2]) == 2\nraise 'Test failed' unless minimum_time_to_top([1, 1, 1, 1, 1]) == 1\nraise 'Test failed' unless minimum_time_to_top([10]) == 0\n\n\n\nputs 'All tests passed!'", "entry_point": "minimum_time_to_top", "signature": "def minimum_time_to_top(heights)", "docstring": "Calculates the minimum time required for a character to reach the top of a building with varying floor heights.\nThe character can move up one or two floors at a time, but cannot use the two-floor jump consecutively.\nMoving up one floor takes one unit of time, while jumping up two floors is instantaneous.\n\nArgs:\n- floor_heights (Array): An array of integers representing the height of each floor.\n\nReturns:\n- Integer: The minimum time required to reach the top of the building.\n\nExample:\n>>> minimum_time_to_top([3, 5, 1, 8, 4])\n1", "instruction": "Write a ruby function `def minimum_time_to_top(heights)` to solve the following problem:\nCalculates the minimum time required for a character to reach the top of a building with varying floor heights.\nThe character can move up one or two floors at a time, but cannot use the two-floor jump consecutively.\nMoving up one floor takes one unit of time, while jumping up two floors is instantaneous.\n\nArgs:\n- floor_heights (Array): An array of integers representing the height of each floor.\n\nReturns:\n- Integer: The minimum time required to reach the top of the building.\n\nExample:\n>>> minimum_time_to_top([3, 5, 1, 8, 4])\n1", "level": "middle"}
{"task_id": "Ruby/9", "prompt": "# Transposes a given n x m matrix.\n# The function takes a single argument, matrix, which is an array of arrays representing the n x m matrix.\n# The matrix has n rows and m columns, where 1 \u2264 n \u2264 20 and 1 \u2264 m \u2264 20. Each element in the matrix is an integer.\n# The function returns a new matrix which is the transpose of the input matrix.\n#\n# Example:\n# >>> transpose_matrix([[34, 76, -54, 7], [-4, 5, 23, 9]])\n# [[34, -4], [76, 5], [-54, 23], [7, 9]]\n\ndef transpose_matrix(matrix)", "canonical_solution": "    return [] if matrix.empty? || matrix[0].empty?\n  \n    transposed = Array.new(matrix[0].size) { Array.new(matrix.size) }\n    matrix.each_with_index do |row, i|\n      row.each_with_index do |value, j|\n        transposed[j][i] = value\n      end\n    end\n    transposed\n  end", "test": "raise 'Test failed' unless transpose_matrix([[34, 76, -54, 7], [-4, 5, 23, 9]]) == [[34, -4], [76, 5], [-54, 23], [7, 9]]\nraise 'Test failed' unless transpose_matrix([[1, 2, 3], [4, 5, 6]]) == [[1, 4], [2, 5], [3, 6]]\nraise 'Test failed' unless transpose_matrix([[10]]) == [[10]]\nraise 'Test failed' unless transpose_matrix([]) == []\nraise 'Test failed' unless transpose_matrix([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]\n\n\nputs 'All tests passed!'", "entry_point": "transpose_matrix", "signature": "def transpose_matrix(matrix)", "docstring": "Transposes a given n x m matrix.\nThe function takes a single argument, matrix, which is an array of arrays representing the n x m matrix.\nThe matrix has n rows and m columns, where 1 \u2264 n \u2264 20 and 1 \u2264 m \u2264 20. Each element in the matrix is an integer.\nThe function returns a new matrix which is the transpose of the input matrix.\n\nExample:\n>>> transpose_matrix([[34, 76, -54, 7], [-4, 5, 23, 9]])\n[[34, -4], [76, 5], [-54, 23], [7, 9]]", "instruction": "Write a ruby function `def transpose_matrix(matrix)` to solve the following problem:\nTransposes a given n x m matrix.\nThe function takes a single argument, matrix, which is an array of arrays representing the n x m matrix.\nThe matrix has n rows and m columns, where 1 \u2264 n \u2264 20 and 1 \u2264 m \u2264 20. Each element in the matrix is an integer.\nThe function returns a new matrix which is the transpose of the input matrix.\n\nExample:\n>>> transpose_matrix([[34, 76, -54, 7], [-4, 5, 23, 9]])\n[[34, -4], [76, 5], [-54, 23], [7, 9]]", "level": "middle"}
{"task_id": "Ruby/10", "prompt": "# Sorts a list of students by their scores in descending order. If two students have the same score,\n# they are sorted alphabetically by their names. The function takes an array of arrays as an argument,\n# where each sub-array contains a student's name and their score. The function returns an array of \n# student names sorted as per the mentioned criteria.\n#\n# Example:\n# >>> sort_students_by_score([[\"aaa\", 47], [\"bbb\", 90], [\"ccc\", 70]])\n# [\"bbb\", \"ccc\", \"aaa\"]\n# >>> sort_students_by_score([[\"alice\", 85], [\"bob\", 85], [\"charlie\", 90]])\n# [\"charlie\", \"alice\", \"bob\"]\n\n\ndef sort_students_by_score(student_scores)", "canonical_solution": "    student_scores.sort do |a, b|\n      if a[1] == b[1]\n        a[0] <=> b[0]\n      else\n        b[1] <=> a[1]\n      end\n    end.map(&:first)\n  end", "test": "raise 'Test failed' unless sort_students_by_score([[\"aaa\", 47], [\"bbb\", 90], [\"ccc\", 70]]) == [\"bbb\", \"ccc\", \"aaa\"]\nraise 'Test failed' unless sort_students_by_score([[\"alice\", 85], [\"bob\", 85], [\"charlie\", 90]]) == [\"charlie\", \"alice\", \"bob\"]\nraise 'Test failed' unless sort_students_by_score([[\"zoe\", 95], [\"adam\", 95], [\"mia\", 88]]) == [\"adam\", \"zoe\", \"mia\"]\nraise 'Test failed' unless sort_students_by_score([[\"lara\", 70], [\"max\", 70], [\"sam\", 70]]) == [\"lara\", \"max\", \"sam\"]\nraise 'Test failed' unless sort_students_by_score([[\"john\", 100]]) == [\"john\"]\n\n\nputs 'All tests passed!'", "entry_point": "sort_students_by_score", "signature": "def sort_students_by_score(student_scores)", "docstring": "Sorts a list of students by their scores in descending order. If two students have the same score,\nthey are sorted alphabetically by their names. The function takes an array of arrays as an argument,\nwhere each sub-array contains a student's name and their score. The function returns an array of\nstudent names sorted as per the mentioned criteria.\n\nExample:\n>>> sort_students_by_score([[\"aaa\", 47], [\"bbb\", 90], [\"ccc\", 70]])\n[\"bbb\", \"ccc\", \"aaa\"]\n>>> sort_students_by_score([[\"alice\", 85], [\"bob\", 85], [\"charlie\", 90]])\n[\"charlie\", \"alice\", \"bob\"]", "instruction": "Write a ruby function `def sort_students_by_score(student_scores)` to solve the following problem:\nSorts a list of students by their scores in descending order. If two students have the same score,\nthey are sorted alphabetically by their names. The function takes an array of arrays as an argument,\nwhere each sub-array contains a student's name and their score. The function returns an array of\nstudent names sorted as per the mentioned criteria.\n\nExample:\n>>> sort_students_by_score([[\"aaa\", 47], [\"bbb\", 90], [\"ccc\", 70]])\n[\"bbb\", \"ccc\", \"aaa\"]\n>>> sort_students_by_score([[\"alice\", 85], [\"bob\", 85], [\"charlie\", 90]])\n[\"charlie\", \"alice\", \"bob\"]", "level": "easy"}
{"task_id": "Ruby/11", "prompt": "# Calculates the total number of drinks a customer can enjoy under a promotional offer.\n# Under this offer, for every 3 bottle caps, the customer can get 1 additional drink.\n# The promotion continues as long as the customer has enough caps for exchange.\n#\n# The function takes a single integer argument, n, which represents the initial number\n# of drinks purchased. It returns an integer representing the total number of drinks\n# the customer can enjoy, including those received through the promotion.\n#\n# Examples:\n# >>> total_drinks_with_promo(100)\n# 149\n# >>> total_drinks_with_promo(3)\n# 4\n\ndef total_drinks_with_promo(n)", "canonical_solution": "    total_drinks = n\n    caps = n\n  \n    while caps >= 3\n      exchanged_drinks = caps / 3\n      total_drinks += exchanged_drinks\n      caps = caps % 3 + exchanged_drinks\n    end\n  \n    total_drinks\n  end", "test": "raise 'Test failed' unless total_drinks_with_promo(100) == 149\nraise 'Test failed' unless total_drinks_with_promo(3) == 4\nraise 'Test failed' unless total_drinks_with_promo(9) == 13\nraise 'Test failed' unless total_drinks_with_promo(10) == 14\nraise 'Test failed' unless total_drinks_with_promo(1) == 1\n  \nputs 'All tests passed!'", "entry_point": "total_drinks_with_promo", "signature": "def total_drinks_with_promo(n)", "docstring": "Calculates the total number of drinks a customer can enjoy under a promotional offer.\nUnder this offer, for every 3 bottle caps, the customer can get 1 additional drink.\nThe promotion continues as long as the customer has enough caps for exchange.\n\nThe function takes a single integer argument, n, which represents the initial number\nof drinks purchased. It returns an integer representing the total number of drinks\nthe customer can enjoy, including those received through the promotion.\n\nExamples:\n>>> total_drinks_with_promo(100)\n149\n>>> total_drinks_with_promo(3)\n4", "instruction": "Write a ruby function `def total_drinks_with_promo(n)` to solve the following problem:\nCalculates the total number of drinks a customer can enjoy under a promotional offer.\nUnder this offer, for every 3 bottle caps, the customer can get 1 additional drink.\nThe promotion continues as long as the customer has enough caps for exchange.\n\nThe function takes a single integer argument, n, which represents the initial number\nof drinks purchased. It returns an integer representing the total number of drinks\nthe customer can enjoy, including those received through the promotion.\n\nExamples:\n>>> total_drinks_with_promo(100)\n149\n>>> total_drinks_with_promo(3)\n4", "level": "easy"}
{"task_id": "Ruby/12", "prompt": "# Determines the maximum length of a string that can be accepted by a simplified regular expression.\n# The function takes a single argument, regex, which is a string representing a regular expression \n# composed only of 'x', '(', ')', and '|'. The function returns the length of the longest string \n# that can be accepted by this regular expression.\n#\n# Example:\n# >>> max_regex_string_length(\"((xx|xxx)x|(x|xx))xx\")\n# 6\n# >>> max_regex_string_length(\"x(xx|x)x\")\n# 4\n\ndef max_regex_string_length(regex)", "canonical_solution": "    @regex = regex\n    @index = 0\n    dfs\n  end\n  \n  def dfs\n    temp = 0\n    max = 0\n    while @index < @regex.length\n      case @regex[@index]\n      when '('\n        @index += 1\n        temp += dfs\n      when ')'\n        @index += 1\n        break\n      when '|'\n        @index += 1\n        max = temp if temp > max\n        temp = 0\n      else # assuming 'x'\n        @index += 1\n        temp += 1\n      end\n    end\n    max = temp if temp > max\n    max\n  end", "test": "raise 'Test failed' unless max_regex_string_length(\"((xx|xxx)x|(x|xx))xx\") == 6\nraise 'Test failed' unless max_regex_string_length(\"x(xx|x)x\") == 4\nraise 'Test failed' unless max_regex_string_length(\"xx|x\") == 2\nraise 'Test failed' unless max_regex_string_length(\"(xx|x)(x|xx)\") == 4\nraise 'Test failed' unless max_regex_string_length(\"x\") == 1\n  \n\nputs 'All tests passed!'", "entry_point": "max_regex_string_length", "signature": "def max_regex_string_length(regex)", "docstring": "Determines the maximum length of a string that can be accepted by a simplified regular expression.\nThe function takes a single argument, regex, which is a string representing a regular expression\ncomposed only of 'x', '(', ')', and '|'. The function returns the length of the longest string\nthat can be accepted by this regular expression.\n\nExample:\n>>> max_regex_string_length(\"((xx|xxx)x|(x|xx))xx\")\n6\n>>> max_regex_string_length(\"x(xx|x)x\")\n4", "instruction": "Write a ruby function `def max_regex_string_length(regex)` to solve the following problem:\nDetermines the maximum length of a string that can be accepted by a simplified regular expression.\nThe function takes a single argument, regex, which is a string representing a regular expression\ncomposed only of 'x', '(', ')', and '|'. The function returns the length of the longest string\nthat can be accepted by this regular expression.\n\nExample:\n>>> max_regex_string_length(\"((xx|xxx)x|(x|xx))xx\")\n6\n>>> max_regex_string_length(\"x(xx|x)x\")\n4", "level": "hard"}
{"task_id": "Ruby/13", "prompt": "# Finds the maximum sum of any three numbers from a given array that is divisible by a specified number k.\n# This function takes an array of numbers and an integer k as arguments. It returns the maximum sum \n# of any three numbers from the array such that this sum is divisible by k. It's guaranteed that there \n# are at least three numbers in the array and that a solution exists.\n#\n# Example:\n# >>> max_sum_divisible_by_k([1, 2, 3, 4], 3)\n# 9\n# >>> max_sum_divisible_by_k([4, 5, 10, 20], 5)\n# 35\n\ndef max_sum_divisible_by_k(numbers, k)", "canonical_solution": "    numbers.sort!.reverse!\n    max_sum = 0\n  \n    (0..numbers.length - 3).each do |i|\n      (i+1..numbers.length - 2).each do |j|\n        (j+1..numbers.length - 1).each do |l|\n          sum = numbers[i] + numbers[j] + numbers[l]\n          if sum % k == 0 && sum > max_sum\n            max_sum = sum\n          end\n        end\n      end\n    end\n    # puts max_sum\n    max_sum\n  end", "test": "raise 'Test failed' unless max_sum_divisible_by_k([1, 2, 3, 4], 3) == 9\nraise 'Test failed' unless max_sum_divisible_by_k([4, 5, 10, 20], 5) == 35\nraise 'Test failed' unless max_sum_divisible_by_k([6, 12, 17, 23, 29], 7) == 35\nraise 'Test failed' unless max_sum_divisible_by_k([7, 14, 21, 28], 7) == 63\nraise 'Test failed' unless max_sum_divisible_by_k([10, 15, 25, 30, 40], 10) == 80\n\n\nputs 'All tests passed!'", "entry_point": "max_sum_divisible_by_k", "signature": "def max_sum_divisible_by_k(numbers, k)", "docstring": "Finds the maximum sum of any three numbers from a given array that is divisible by a specified number k.\nThis function takes an array of numbers and an integer k as arguments. It returns the maximum sum\nof any three numbers from the array such that this sum is divisible by k. It's guaranteed that there\nare at least three numbers in the array and that a solution exists.\n\nExample:\n>>> max_sum_divisible_by_k([1, 2, 3, 4], 3)\n9\n>>> max_sum_divisible_by_k([4, 5, 10, 20], 5)\n35", "instruction": "Write a ruby function `def max_sum_divisible_by_k(numbers, k)` to solve the following problem:\nFinds the maximum sum of any three numbers from a given array that is divisible by a specified number k.\nThis function takes an array of numbers and an integer k as arguments. It returns the maximum sum\nof any three numbers from the array such that this sum is divisible by k. It's guaranteed that there\nare at least three numbers in the array and that a solution exists.\n\nExample:\n>>> max_sum_divisible_by_k([1, 2, 3, 4], 3)\n9\n>>> max_sum_divisible_by_k([4, 5, 10, 20], 5)\n35", "level": "middle"}
{"task_id": "Ruby/14", "prompt": "# Calculates the difference in the number of victories between the most and least successful teams.\n# This function takes a string, team_sequence, representing the sequence of winning teams, where each team\n# is identified by a lowercase letter. It returns an integer representing the difference in the number\n# of victories between the team that won the most and the team that won the least (excluding teams with zero victories).\n#\n# Example:\n# >>> victory_gap_in_teams(\"abaabcaa\")\n# 4\n# >>> victory_gap_in_teams(\"abcd\")\n# 0\n\ndef victory_gap_in_teams(team_sequence)", "canonical_solution": "    counts = Hash.new(0)\n    team_sequence.each_char { |team| counts[team] += 1 }\n  \n    max_victories = counts.values.max\n    min_victories = counts.values.reject { |v| v == 0 }.min\n  \n    max_victories - min_victories\n  end", "test": "raise 'Test failed' unless victory_gap_in_teams(\"abaabcaa\") == 4\nraise 'Test failed' unless victory_gap_in_teams(\"abcd\") == 0\nraise 'Test failed' unless victory_gap_in_teams(\"a\") == 0\nraise 'Test failed' unless victory_gap_in_teams(\"aaabbbccc\") == 0\nraise 'Test failed' unless victory_gap_in_teams(\"abcdaaa\") == 3\n\nputs 'All tests passed!'", "entry_point": "victory_gap_in_teams", "signature": "def victory_gap_in_teams(team_sequence)", "docstring": "Calculates the difference in the number of victories between the most and least successful teams.\nThis function takes a string, team_sequence, representing the sequence of winning teams, where each team\nis identified by a lowercase letter. It returns an integer representing the difference in the number\nof victories between the team that won the most and the team that won the least (excluding teams with zero victories).\n\nExample:\n>>> victory_gap_in_teams(\"abaabcaa\")\n4\n>>> victory_gap_in_teams(\"abcd\")\n0", "instruction": "Write a ruby function `def victory_gap_in_teams(team_sequence)` to solve the following problem:\nCalculates the difference in the number of victories between the most and least successful teams.\nThis function takes a string, team_sequence, representing the sequence of winning teams, where each team\nis identified by a lowercase letter. It returns an integer representing the difference in the number\nof victories between the team that won the most and the team that won the least (excluding teams with zero victories).\n\nExample:\n>>> victory_gap_in_teams(\"abaabcaa\")\n4\n>>> victory_gap_in_teams(\"abcd\")\n0", "level": "easy"}
{"task_id": "Ruby/15", "prompt": "# Determines the maximum number of drop tests needed to find the drop tolerance height of a device from a building with a given height.\n# The function takes a single argument, n, which is the height of the building (number of floors).\n# It returns the maximum number of tests needed to find the exact floor from which if the device is dropped, it will break.\n#\n# The problem assumes the worst-case scenario, where the outcome of each test is the least favorable, thus requiring the maximum number of tests.\n#\n# Example:\n# >>> max_drop_test_height(3)\n# 2\n# >>> max_drop_test_height(10)\n# 4\n\n\ndef max_drop_test_height(n)", "canonical_solution": "    dp = Array.new(4) { Array.new(n + 1, 0) }\n    (1..n).each { |j| dp[1][j] = j }\n  \n    (2..3).each do |i|\n      (1..n).each do |j|\n        dp[i][j] = j\n        (1..j).each do |k|\n          num = [1 + dp[i-1][k-1], 1 + dp[i][j-k]].max\n          dp[i][j] = [dp[i][j], num].min\n        end\n      end\n    end\n  \n    dp[3][n]\n  end", "test": "raise 'Test failed' unless max_drop_test_height(3) == 2\nraise 'Test failed' unless max_drop_test_height(10) == 4\nraise 'Test failed' unless max_drop_test_height(15) == 5\nraise 'Test failed' unless max_drop_test_height(6) == 3\nraise 'Test failed' unless max_drop_test_height(100) == 9\n\n\nputs 'All tests passed!'", "entry_point": "max_drop_test_height", "signature": "def max_drop_test_height(n)", "docstring": "Determines the maximum number of drop tests needed to find the drop tolerance height of a device from a building with a given height.\nThe function takes a single argument, n, which is the height of the building (number of floors).\nIt returns the maximum number of tests needed to find the exact floor from which if the device is dropped, it will break.\n\nThe problem assumes the worst-case scenario, where the outcome of each test is the least favorable, thus requiring the maximum number of tests.\n\nExample:\n>>> max_drop_test_height(3)\n2\n>>> max_drop_test_height(10)\n4", "instruction": "Write a ruby function `def max_drop_test_height(n)` to solve the following problem:\nDetermines the maximum number of drop tests needed to find the drop tolerance height of a device from a building with a given height.\nThe function takes a single argument, n, which is the height of the building (number of floors).\nIt returns the maximum number of tests needed to find the exact floor from which if the device is dropped, it will break.\n\nThe problem assumes the worst-case scenario, where the outcome of each test is the least favorable, thus requiring the maximum number of tests.\n\nExample:\n>>> max_drop_test_height(3)\n2\n>>> max_drop_test_height(10)\n4", "level": "middle"}
{"task_id": "Ruby/16", "prompt": "# Computes the repeated sum of digits of a given number string until it reduces to a single digit.\n# The function takes a single argument, `input_string`, which is a string representing a non-negative number.\n# It repeatedly sums the digits of the number until the sum is a single digit, then returns this single digit.\n#\n# Example:\n# >>> digit_sum_to_single(\"35379\")\n# 9\n# >>> digit_sum_to_single(\"24815\")\n# 3\n\n\ndef digit_sum_to_single(input_string)", "canonical_solution": "    sum = input_string.chars.map(&:to_i).sum\n    while sum > 9\n      sum = sum.to_s.chars.map(&:to_i).sum\n    end\n    sum\n  end", "test": "raise 'Test failed' unless digit_sum_to_single(\"35379\") == 9\nraise 'Test failed' unless digit_sum_to_single(\"24815\") == 2\nraise 'Test failed' unless digit_sum_to_single(\"9999\") == 9\nraise 'Test failed' unless digit_sum_to_single(\"12345\") == 6\nraise 'Test failed' unless digit_sum_to_single(\"0\") == 0\n  \n\nputs 'All tests passed!'", "entry_point": "digit_sum_to_single", "signature": "def digit_sum_to_single(input_string)", "docstring": "Computes the repeated sum of digits of a given number string until it reduces to a single digit.\nThe function takes a single argument, `input_string`, which is a string representing a non-negative number.\nIt repeatedly sums the digits of the number until the sum is a single digit, then returns this single digit.\n\nExample:\n>>> digit_sum_to_single(\"35379\")\n9\n>>> digit_sum_to_single(\"24815\")\n3", "instruction": "Write a ruby function `def digit_sum_to_single(input_string)` to solve the following problem:\nComputes the repeated sum of digits of a given number string until it reduces to a single digit.\nThe function takes a single argument, `input_string`, which is a string representing a non-negative number.\nIt repeatedly sums the digits of the number until the sum is a single digit, then returns this single digit.\n\nExample:\n>>> digit_sum_to_single(\"35379\")\n9\n>>> digit_sum_to_single(\"24815\")\n3", "level": "easy"}
{"task_id": "Ruby/17", "prompt": "# Calculates the minimum number of seat swaps required to group representatives of the same company together.\n# Given a string representing a sequence of seats occupied by representatives of three companies, A, B, and T,\n# the function returns the minimum number of swaps needed so that all representatives of each company are seated together.\n# The input string contains only the characters 'A', 'B', and 'T', and each character represents a seat taken by a representative from the respective companies.\n#\n# Examples:\n# >>> minimum_swaps_to_group_companies(\\\"TABTABBTTTT\\\")\n# 3\n# >>> minimum_swaps_to_group_companies(\\\"BBTAAT\\\")\n# 1\ndef minimum_swaps_to_group_companies(s)", "canonical_solution": "    def func(s, a, b, c)\n        count_a = count_b = count_c = 0\n        abc = ab = ba = bc = 0\n      \n        s.chars.each_with_index do |char, i|\n        \n          count_a += 1 if char == a\n          count_b += 1 if char == b\n          count_c += 1 if char == c\n        end \n        (0..count_a-1).each do |i|\n           \n            abc += 1 if s.chars[i] != a\n            ab += 1 if s.chars[i] == b\n        end \n        (count_a..count_a+count_b-1).each do |i|\n            ba += 1 if s.chars[i] == a\n            bc += 1 if s.chars[i] == c\n        end\n        res = abc + bc + ba - [ba, ab].min\n        res\n    end\n    permutations = ['BAT', 'ATB', 'TBA', 'BTA', 'ABT', 'TAB']\n    min_swaps = Float::INFINITY\n  \n    permutations.each do |perm|\n      swaps = func(s, perm[0], perm[1], perm[2])\n      min_swaps = [min_swaps, swaps].min\n    end\n    min_swaps\n  end", "test": "raise 'Test failed' unless minimum_swaps_to_group_companies(\"TABTABBTTTT\") == 3\nraise 'Test failed' unless minimum_swaps_to_group_companies(\"BBTAAT\") == 1\nraise 'Test failed' unless minimum_swaps_to_group_companies(\"AABBBTTT\") == 0\nraise 'Test failed' unless minimum_swaps_to_group_companies(\"ATBT\") == 1\nraise 'Test failed' unless minimum_swaps_to_group_companies(\"TTABAB\") == 1\n  \n\n\n\nputs 'All tests passed!'", "entry_point": "minimum_swaps_to_group_companies", "signature": "def minimum_swaps_to_group_companies(s)", "docstring": "Calculates the minimum number of seat swaps required to group representatives of the same company together.\nGiven a string representing a sequence of seats occupied by representatives of three companies, A, B, and T,\nthe function returns the minimum number of swaps needed so that all representatives of each company are seated together.\nThe input string contains only the characters 'A', 'B', and 'T', and each character represents a seat taken by a representative from the respective companies.\n\nExamples:\n>>> minimum_swaps_to_group_companies(\\\"TABTABBTTTT\\\")\n3\n>>> minimum_swaps_to_group_companies(\\\"BBTAAT\\\")\n1", "instruction": "Write a ruby function `def minimum_swaps_to_group_companies(s)` to solve the following problem:\nCalculates the minimum number of seat swaps required to group representatives of the same company together.\nGiven a string representing a sequence of seats occupied by representatives of three companies, A, B, and T,\nthe function returns the minimum number of swaps needed so that all representatives of each company are seated together.\nThe input string contains only the characters 'A', 'B', and 'T', and each character represents a seat taken by a representative from the respective companies.\n\nExamples:\n>>> minimum_swaps_to_group_companies(\\\"TABTABBTTTT\\\")\n3\n>>> minimum_swaps_to_group_companies(\\\"BBTAAT\\\")\n1", "level": "hard"}
{"task_id": "Ruby/18", "prompt": "# Calculates the final minimum weight of fish in a simulated feeding game.\n# In this game, there are 'n' fish, each with an initial weight given in the 'weights' array.\n# The game proceeds for 'm' rounds. In each round, the lightest fish eats the second lightest,\n# and its weight becomes the sum of both. The function returns the weight of the lightest fish\n# after 'm' rounds.\n#\n# Arguments:\n# n (Integer) -- The number of fish.\n# m (Integer) -- The number of rounds the game will be played.\n# weights (Array of Integers) -- An array representing the weights of each fish.\n#\n# Example:\n# >>> final_min_weight_fish(1, [1, 2, 3])\n# 3\n# >>> final_min_weight_fish(2, [4, 3, 2, 1])\n# 4\n\ndef final_min_weight_fish(m, weights)", "canonical_solution": "  # Sort the weights array to ensure the lightest fish are at the beginning.\n  sorted_weights = weights.sort\n\n  m.times do\n    # The lightest fish eats the second lightest.\n    sorted_weights[0] += sorted_weights[1]\n    # Remove the second lightest fish since it has been eaten.\n    sorted_weights.delete_at(1)\n    # Re-sort the weights to find the new lightest and second lightest for the next round.\n    sorted_weights.sort!\n  end\n\n  # After 'm' rounds, return the weight of the lightest fish.\n  sorted_weights[0]\nend", "test": "raise 'Test failed' unless final_min_weight_fish(1, [1, 2, 3]) == 3\nraise 'Test failed' unless final_min_weight_fish(2, [4, 3, 2, 1]) == 4\nraise 'Test failed' unless final_min_weight_fish(2, [5, 4, 3, 2, 1]) == 4\nraise 'Test failed' unless final_min_weight_fish(2, [3, 2, 1]) == 6\nraise 'Test failed' unless final_min_weight_fish(3, [1, 2, 3, 4]) == 10\n  \nputs 'All tests passed!'", "entry_point": "final_min_weight_fish", "signature": "def final_min_weight_fish(m, weights)", "docstring": "Calculates the final minimum weight of fish in a simulated feeding game.\nIn this game, there are 'n' fish, each with an initial weight given in the 'weights' array.\nThe game proceeds for 'm' rounds. In each round, the lightest fish eats the second lightest,\nand its weight becomes the sum of both. The function returns the weight of the lightest fish\nafter 'm' rounds.\n\nArguments:\nn (Integer) -- The number of fish.\nm (Integer) -- The number of rounds the game will be played.\nweights (Array of Integers) -- An array representing the weights of each fish.\n\nExample:\n>>> final_min_weight_fish(1, [1, 2, 3])\n3\n>>> final_min_weight_fish(2, [4, 3, 2, 1])\n4", "instruction": "Write a ruby function `def final_min_weight_fish(m, weights)` to solve the following problem:\nCalculates the final minimum weight of fish in a simulated feeding game.\nIn this game, there are 'n' fish, each with an initial weight given in the 'weights' array.\nThe game proceeds for 'm' rounds. In each round, the lightest fish eats the second lightest,\nand its weight becomes the sum of both. The function returns the weight of the lightest fish\nafter 'm' rounds.\n\nArguments:\nn (Integer) -- The number of fish.\nm (Integer) -- The number of rounds the game will be played.\nweights (Array of Integers) -- An array representing the weights of each fish.\n\nExample:\n>>> final_min_weight_fish(1, [1, 2, 3])\n3\n>>> final_min_weight_fish(2, [4, 3, 2, 1])\n4", "level": "hard"}
{"task_id": "Ruby/19", "prompt": "# Sorts a list of patient information based on their age and registration order.\n# The function takes an array of arrays, where each sub-array contains a patient's ID (a string) and age (an integer).\n# The sorting criteria are as follows:\n# 1. Patients aged 60 and above are given priority over younger patients.\n# 2. Elderly patients (aged 60+) are sorted in descending order of age. If ages are equal, they are sorted by their registration order.\n# 3. Younger patients (below 60) are sorted based on their registration order.\n#\n# Example:\n# >>> sort_patients([[\"021075\", 40], [\"004003\", 15], [\"010158\", 67], [\"021033\", 75], [\"102012\", 30]])\n# [[\"021033\", 75], [\"010158\", 67], [\"021075\", 40], [\"004003\", 15], [\"102012\", 30]]\n\n\n\ndef sort_patients(patient_info)", "canonical_solution": "    elderly, non_elderly = patient_info.partition { |_, age| age >= 60 }\n    sorted_elderly = elderly.sort_by { |_, age| -age }\n    sorted_elderly + non_elderly\n  end", "test": "raise 'Test failed' unless sort_patients([[\"021075\", 40], [\"004003\", 15], [\"010158\", 67], [\"021033\", 75], [\"102012\", 30]]) == [[\"021033\", 75], [\"010158\", 67], [\"021075\", 40], [\"004003\", 15], [\"102012\", 30]]\nraise 'Test failed' unless sort_patients([[\"001122\", 60], [\"003344\", 60], [\"005566\", 30]]) == [[\"001122\", 60], [\"003344\", 60], [\"005566\", 30]]\nraise 'Test failed' unless sort_patients([[\"987654\", 45], [\"123456\", 65], [\"543210\", 55]]) == [[\"123456\", 65], [\"987654\", 45], [\"543210\", 55]]\n\n\n\nputs 'All tests passed!'", "entry_point": "sort_patients", "signature": "def sort_patients(patient_info)", "docstring": "Sorts a list of patient information based on their age and registration order.\nThe function takes an array of arrays, where each sub-array contains a patient's ID (a string) and age (an integer).\nThe sorting criteria are as follows:\n1. Patients aged 60 and above are given priority over younger patients.\n2. Elderly patients (aged 60+) are sorted in descending order of age. If ages are equal, they are sorted by their registration order.\n3. Younger patients (below 60) are sorted based on their registration order.\n\nExample:\n>>> sort_patients([[\"021075\", 40], [\"004003\", 15], [\"010158\", 67], [\"021033\", 75], [\"102012\", 30]])\n[[\"021033\", 75], [\"010158\", 67], [\"021075\", 40], [\"004003\", 15], [\"102012\", 30]]", "instruction": "Write a ruby function `def sort_patients(patient_info)` to solve the following problem:\nSorts a list of patient information based on their age and registration order.\nThe function takes an array of arrays, where each sub-array contains a patient's ID (a string) and age (an integer).\nThe sorting criteria are as follows:\n1. Patients aged 60 and above are given priority over younger patients.\n2. Elderly patients (aged 60+) are sorted in descending order of age. If ages are equal, they are sorted by their registration order.\n3. Younger patients (below 60) are sorted based on their registration order.\n\nExample:\n>>> sort_patients([[\"021075\", 40], [\"004003\", 15], [\"010158\", 67], [\"021033\", 75], [\"102012\", 30]])\n[[\"021033\", 75], [\"010158\", 67], [\"021075\", 40], [\"004003\", 15], [\"102012\", 30]]", "level": "easy"}
{"task_id": "Ruby/20", "prompt": "# Finds the intersection point of two linear functions.\n# This function takes four arguments: slope1, intercept1, slope2, intercept2.\n# slope1 and slope2 are the slopes of the two lines, while intercept1 and intercept2 are their y-intercepts.\n# The function calculates and returns the coordinates of the intersection point of these two lines, if it exists.\n# The coordinates are returned as a two-element array [x, y], rounded to two decimal places.\n#\n# Example:\n# >>> find_intersection(1.0, 0.0, -1.0, 2.0)\n# [1.00, 1.00]\n# >>> find_intersection(2.0, 3.0, 2.0, -1.0)\n# nil # Parallel lines with no intersection\n\n\ndef find_intersection(slope1, intercept1, slope2, intercept2)", "canonical_solution": "    # Handle parallel lines which never intersect\n    return nil if slope1 == slope2\n  \n    # Calculate intersection point\n    x = (intercept2 - intercept1).to_f / (slope1 - slope2)\n    y = slope1 * x + intercept1\n  \n    # Round the coordinates to two decimal places\n    [x.round(2), y.round(2)]\n  end", "test": "raise 'Test failed' unless find_intersection(1.0, 0.0, -1.0, 2.0) == [1.00, 1.00]\nraise 'Test failed' unless find_intersection(2.0, 3.0, 2.0, -1.0).nil?\nraise 'Test failed' unless find_intersection(0.5, 1.0, -0.5, -1.0) == [-2.00, 0.00]\nraise 'Test failed' unless find_intersection(3.0, 2.0, -1.0, 4.0) == [0.50, 3.50]\nraise 'Test failed' unless find_intersection(2.0, 0.0, 0.0, 2.0) == [1.0, 2.0]\n  \n\nputs 'All tests passed!'", "entry_point": "find_intersection", "signature": "def find_intersection(slope1, intercept1, slope2, intercept2)", "docstring": "Finds the intersection point of two linear functions.\nThis function takes four arguments: slope1, intercept1, slope2, intercept2.\nslope1 and slope2 are the slopes of the two lines, while intercept1 and intercept2 are their y-intercepts.\nThe function calculates and returns the coordinates of the intersection point of these two lines, if it exists.\nThe coordinates are returned as a two-element array [x, y], rounded to two decimal places.\n\nExample:\n>>> find_intersection(1.0, 0.0, -1.0, 2.0)\n[1.00, 1.00]\n>>> find_intersection(2.0, 3.0, 2.0, -1.0)\nnil  Parallel lines with no intersection", "instruction": "Write a ruby function `def find_intersection(slope1, intercept1, slope2, intercept2)` to solve the following problem:\nFinds the intersection point of two linear functions.\nThis function takes four arguments: slope1, intercept1, slope2, intercept2.\nslope1 and slope2 are the slopes of the two lines, while intercept1 and intercept2 are their y-intercepts.\nThe function calculates and returns the coordinates of the intersection point of these two lines, if it exists.\nThe coordinates are returned as a two-element array [x, y], rounded to two decimal places.\n\nExample:\n>>> find_intersection(1.0, 0.0, -1.0, 2.0)\n[1.00, 1.00]\n>>> find_intersection(2.0, 3.0, 2.0, -1.0)\nnil  Parallel lines with no intersection", "level": "middle"}
{"task_id": "Ruby/21", "prompt": "# This method calculates the minimum number of steps required to transform a given number into a palindrome by repeatedly reversing its digits and adding the result to the original number. The process is stopped when a palindrome is obtained. If the palindrome is not obtained within 8 steps, the method returns 0.\n# The function takes a single argument, m, which is a positive integer between 12 and 100, and returns the number of steps taken to reach a palindrome. The input number m itself is not a palindrome.\n#\n# Examples:\n# >>> palindrome_sum_steps(12)\n# 1\n# >>> palindrome_sum_steps(87)\n# 4\n# >>> palindrome_sum_steps(89)\n# 0\n\ndef palindrome_sum_steps(m)", "canonical_solution": "  steps = 0\n  until m.to_s == m.to_s.reverse || steps == 8\n    m += m.to_s.reverse.to_i\n    steps += 1\n    return steps if m.to_s == m.to_s.reverse\n  end\n  steps < 8 ? steps : 0\nend", "test": "raise 'Test failed' unless palindrome_sum_steps(12) == 1\nraise 'Test failed' unless palindrome_sum_steps(87) == 4\nraise 'Test failed' unless palindrome_sum_steps(89) == 0\nraise 'Test failed' unless palindrome_sum_steps(56) == 1\nraise 'Test failed' unless palindrome_sum_steps(95) == 3\n\nputs 'All tests passed!'", "entry_point": "palindrome_sum_steps", "signature": "def palindrome_sum_steps(m)", "docstring": "This method calculates the minimum number of steps required to transform a given number into a palindrome by repeatedly reversing its digits and adding the result to the original number. The process is stopped when a palindrome is obtained. If the palindrome is not obtained within 8 steps, the method returns 0.\nThe function takes a single argument, m, which is a positive integer between 12 and 100, and returns the number of steps taken to reach a palindrome. The input number m itself is not a palindrome.\n\nExamples:\n>>> palindrome_sum_steps(12)\n1\n>>> palindrome_sum_steps(87)\n4\n>>> palindrome_sum_steps(89)\n0", "instruction": "Write a ruby function `def palindrome_sum_steps(m)` to solve the following problem:\nThis method calculates the minimum number of steps required to transform a given number into a palindrome by repeatedly reversing its digits and adding the result to the original number. The process is stopped when a palindrome is obtained. If the palindrome is not obtained within 8 steps, the method returns 0.\nThe function takes a single argument, m, which is a positive integer between 12 and 100, and returns the number of steps taken to reach a palindrome. The input number m itself is not a palindrome.\n\nExamples:\n>>> palindrome_sum_steps(12)\n1\n>>> palindrome_sum_steps(87)\n4\n>>> palindrome_sum_steps(89)\n0", "level": "easy"}
{"task_id": "Ruby/22", "prompt": "# This function calculates the number of different prime pairs whose sum equals a given even number.\n# The function accepts a single argument, even_number, which is an even number greater than 6 and less than 32767.\n# It returns the count of distinct prime pairs whose sum equals the given even number.\n# A prime pair is considered distinct if the primes in the pair are different, regardless of their order.\n#\n# Example:\n# >>> count_prime_pairs(10)\n# 2 (since 10 can be expressed as 3+7 and 5+5)\n# >>> count_prime_pairs(14)\n# 2 (since 14 can be expressed as 3+11 and 7+7)\n \ndef count_prime_pairs(even_number)", "canonical_solution": "    # Helper function to check if a number is prime\n    def is_prime?(num)\n      return false if num <= 1\n      (2...num).none? { |i| num % i == 0 }\n    end\n  \n    # Generating a list of primes up to even_number\n    primes = (2...even_number).select { |num| is_prime?(num) }\n  \n    # Counting distinct prime pairs\n    count = 0\n    primes.each_with_index do |prime, index|\n      count += 1 if primes[index..-1].any? { |other_prime| prime + other_prime == even_number }\n    end\n  \n    count\n  end\n", "test": "raise 'Test failed' unless count_prime_pairs(10) == 2\nraise 'Test failed' unless count_prime_pairs(14) == 2\nraise 'Test failed' unless count_prime_pairs(20) == 2\nraise 'Test failed' unless count_prime_pairs(26) == 3\nraise 'Test failed' unless count_prime_pairs(100) == 6\nraise 'Test failed' unless count_prime_pairs(1234) == 25\n\n\nputs 'All tests passed!'", "entry_point": "count_prime_pairs", "signature": "def count_prime_pairs(even_number)", "docstring": "This function calculates the number of different prime pairs whose sum equals a given even number.\nThe function accepts a single argument, even_number, which is an even number greater than 6 and less than 32767.\nIt returns the count of distinct prime pairs whose sum equals the given even number.\nA prime pair is considered distinct if the primes in the pair are different, regardless of their order.\n\nExample:\n>>> count_prime_pairs(10)\n2 (since 10 can be expressed as 3+7 and 5+5)\n>>> count_prime_pairs(14)\n2 (since 14 can be expressed as 3+11 and 7+7)", "instruction": "Write a ruby function `def count_prime_pairs(even_number)` to solve the following problem:\nThis function calculates the number of different prime pairs whose sum equals a given even number.\nThe function accepts a single argument, even_number, which is an even number greater than 6 and less than 32767.\nIt returns the count of distinct prime pairs whose sum equals the given even number.\nA prime pair is considered distinct if the primes in the pair are different, regardless of their order.\n\nExample:\n>>> count_prime_pairs(10)\n2 (since 10 can be expressed as 3+7 and 5+5)\n>>> count_prime_pairs(14)\n2 (since 14 can be expressed as 3+11 and 7+7)", "level": "hard"}
{"task_id": "Ruby/23", "prompt": "# Calculates the minimum number of character operations needed to transform one string into another.\n# The function takes two string arguments, str_a and str_b. The operations allowed are:\n# 1. Delete a character;\n# 2. Insert a character;\n# 3. Replace a character with another.\n# It returns an integer representing the minimum number of operations required to transform str_a into str_b.\n# Both strings should have a length less than 200.\n#\n# Example:\n# >>> min_operations_to_transform(\"apple\", \"aple\")\n# 1\n# >>> min_operations_to_transform(\"kitten\", \"sitting\")\n# 3\n\ndef min_operations_to_transform(str_a, str_b)", "canonical_solution": "    m, n = str_a.length, str_b.length\n    dp = Array.new(m + 1) { Array.new(n + 1) }\n  \n    (0..m).each { |i| dp[i][0] = i }\n    (0..n).each { |j| dp[0][j] = j }\n  \n    (1..m).each do |i|\n      (1..n).each do |j|\n        if str_a[i - 1] == str_b[j - 1]\n          dp[i][j] = dp[i - 1][j - 1]\n        else\n          dp[i][j] = [dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]].min + 1\n        end\n      end\n    end\n  \n    dp[m][n]\n  end", "test": "raise 'Test failed' unless min_operations_to_transform(\"apple\", \"aple\") == 1\nraise 'Test failed' unless min_operations_to_transform(\"kitten\", \"sitting\") == 3\nraise 'Test failed' unless min_operations_to_transform(\"sfdxbqw\", \"gfdgw\") == 4\nraise 'Test failed' unless min_operations_to_transform(\"horse\", \"ros\") == 3\nraise 'Test failed' unless min_operations_to_transform(\"\", \"abc\") == 3\n\n\n\nputs 'All tests passed!'", "entry_point": "min_operations_to_transform", "signature": "def min_operations_to_transform(str_a, str_b)", "docstring": "Calculates the minimum number of character operations needed to transform one string into another.\nThe function takes two string arguments, str_a and str_b. The operations allowed are:\n1. Delete a character;\n2. Insert a character;\n3. Replace a character with another.\nIt returns an integer representing the minimum number of operations required to transform str_a into str_b.\nBoth strings should have a length less than 200.\n\nExample:\n>>> min_operations_to_transform(\"apple\", \"aple\")\n1\n>>> min_operations_to_transform(\"kitten\", \"sitting\")\n3", "instruction": "Write a ruby function `def min_operations_to_transform(str_a, str_b)` to solve the following problem:\nCalculates the minimum number of character operations needed to transform one string into another.\nThe function takes two string arguments, str_a and str_b. The operations allowed are:\n1. Delete a character;\n2. Insert a character;\n3. Replace a character with another.\nIt returns an integer representing the minimum number of operations required to transform str_a into str_b.\nBoth strings should have a length less than 200.\n\nExample:\n>>> min_operations_to_transform(\"apple\", \"aple\")\n1\n>>> min_operations_to_transform(\"kitten\", \"sitting\")\n3", "level": "hard"}
{"task_id": "Ruby/24", "prompt": "# Reverses the order of words in a given sentence and reverses each word itself.\n# The function takes a single argument, 'sentence', which is a string. It returns \n# a new string with each word in the sentence reversed and the order of words also reversed.\n# Punctuation (spaces, commas, periods, exclamation marks, question marks) is used to identify words \n# and is removed in the returned string.\n#\n# Example:\n# >>> reverse_words_in_sentence(\"hello world!\")\n# \"dlrow olleh\"\n# >>> reverse_words_in_sentence(\"This is, a test.\")\n# \"tset a si sihT\"\n\ndef reverse_words_in_sentence(sentence)", "canonical_solution": "    # Removing punctuation and splitting the sentence into words\n    words = sentence.gsub(/[,.!?]/, '').split\n    # Reversing each word and then reversing the order of words\n    reversed_sentence = words.map(&:reverse).reverse.join(' ')\n    reversed_sentence\n  end", "test": "raise 'Test failed' unless reverse_words_in_sentence(\"hello world!\") == \"dlrow olleh\"\nraise 'Test failed' unless reverse_words_in_sentence(\"This is, a test.\") == \"tset a si sihT\"\nraise 'Test failed' unless reverse_words_in_sentence(\"Ruby, programming!\") == \"gnimmargorp ybuR\"\nraise 'Test failed' unless reverse_words_in_sentence(\"Keep calm and code on.\") == \"no edoc dna mlac peeK\"\nraise 'Test failed' unless reverse_words_in_sentence(\"Simple sentence.\") == \"ecnetnes elpmiS\"\n\n\n\nputs 'All tests passed!'", "entry_point": "reverse_words_in_sentence", "signature": "def reverse_words_in_sentence(sentence)", "docstring": "Reverses the order of words in a given sentence and reverses each word itself.\nThe function takes a single argument, 'sentence', which is a string. It returns\na new string with each word in the sentence reversed and the order of words also reversed.\nPunctuation (spaces, commas, periods, exclamation marks, question marks) is used to identify words\nand is removed in the returned string.\n\nExample:\n>>> reverse_words_in_sentence(\"hello world!\")\n\"dlrow olleh\"\n>>> reverse_words_in_sentence(\"This is, a test.\")\n\"tset a si sihT\"", "instruction": "Write a ruby function `def reverse_words_in_sentence(sentence)` to solve the following problem:\nReverses the order of words in a given sentence and reverses each word itself.\nThe function takes a single argument, 'sentence', which is a string. It returns\na new string with each word in the sentence reversed and the order of words also reversed.\nPunctuation (spaces, commas, periods, exclamation marks, question marks) is used to identify words\nand is removed in the returned string.\n\nExample:\n>>> reverse_words_in_sentence(\"hello world!\")\n\"dlrow olleh\"\n>>> reverse_words_in_sentence(\"This is, a test.\")\n\"tset a si sihT\"", "level": "middle"}
{"task_id": "Ruby/25", "prompt": "# Calculates the number of unique permutations of a given string.\n# The function takes a single argument, str, which is a string consisting of\n# lowercase letters. It returns the total number of unique permutations that\n# can be formed with the characters in str.\n#\n# Example:\n# >>> unique_permutations_count(\"aacc\")\n# 6\n# >>> unique_permutations_count(\"abc\")\n# 6\n\ndef unique_permutations_count(str)", "canonical_solution": "    return 1 if str.empty?\n  \n    # Count frequency of each character\n    freq = Hash.new(0)\n    str.each_char { |char| freq[char] += 1 }\n  \n    # Calculate the factorial of the length of the string\n    total_permutations = (1..str.length).inject(:*)\n  \n    # Divide by the factorial of the frequency of each character\n    freq.each_value do |value|\n      total_permutations /= (1..value).inject(:*)\n    end\n  \n    total_permutations\n  end", "test": "raise 'Test failed' unless unique_permutations_count(\"aacc\") == 6\nraise 'Test failed' unless unique_permutations_count(\"abc\") == 6\nraise 'Test failed' unless unique_permutations_count(\"abcd\") == 24\nraise 'Test failed' unless unique_permutations_count(\"aaa\") == 1\nraise 'Test failed' unless unique_permutations_count(\"ab\") == 2\nraise 'Test failed' unless unique_permutations_count(\"aacdarwqea\") == 151200\n\n  \n\nputs 'All tests passed!'", "entry_point": "unique_permutations_count", "signature": "def unique_permutations_count(str)", "docstring": "Calculates the number of unique permutations of a given string.\nThe function takes a single argument, str, which is a string consisting of\nlowercase letters. It returns the total number of unique permutations that\ncan be formed with the characters in str.\n\nExample:\n>>> unique_permutations_count(\"aacc\")\n6\n>>> unique_permutations_count(\"abc\")\n6", "instruction": "Write a ruby function `def unique_permutations_count(str)` to solve the following problem:\nCalculates the number of unique permutations of a given string.\nThe function takes a single argument, str, which is a string consisting of\nlowercase letters. It returns the total number of unique permutations that\ncan be formed with the characters in str.\n\nExample:\n>>> unique_permutations_count(\"aacc\")\n6\n>>> unique_permutations_count(\"abc\")\n6", "level": "hard"}
{"task_id": "Ruby/26", "prompt": "# Finds the longest palindrome within a given string.\n# The function takes a single argument, str, which is a string that may include letters, numbers, and symbols.\n# It returns the length of the longest palindrome that can be found within the string.\n# Palindromes are sequences that read the same backward as forward.\n# Note: The function is case-sensitive and considers each character.\n#\n# Example:\n# >>> find_longest_palindrome(\"ABBA\")\n# 4\n# >>> find_longest_palindrome(\"12ABBA\")\n# 4\n# >>> find_longest_palindrome(\"A\")\n# 1\n# >>> find_longest_palindrome(\"ABAKK\")\n# 3\n# >>> find_longest_palindrome(\"51233214\")\n# 6\n# >>> find_longest_palindrome(\"abaaab\")\n# 5\n\n\ndef find_longest_palindrome(str)", "canonical_solution": "    return 0 if str.nil? || str.empty?\n  \n    longest = 0\n  \n    (0...str.length).each do |i|\n      # check for odd length palindromes\n      odd_palindrome = expand_around_center(str, i, i)\n      longest = [longest, odd_palindrome].max\n  \n      # check for even length palindromes\n      even_palindrome = expand_around_center(str, i, i + 1)\n      longest = [longest, even_palindrome].max\n    end\n  \n    longest\n  end\n  \n  def expand_around_center(str, left, right)\n    while left >= 0 && right < str.length && str[left] == str[right]\n      left -= 1\n      right += 1\n    end\n  \n    right - left - 1\n  end", "test": "raise 'Test failed' unless find_longest_palindrome(\"ABBA\") == 4\nraise 'Test failed' unless find_longest_palindrome(\"12ABBA\") == 4\nraise 'Test failed' unless find_longest_palindrome(\"A\") == 1\nraise 'Test failed' unless find_longest_palindrome(\"ABAKK\") == 3\nraise 'Test failed' unless find_longest_palindrome(\"51233214\") == 6\nraise 'Test failed' unless find_longest_palindrome(\"abaaab\") == 5\n\n\nputs 'All tests passed!'", "entry_point": "find_longest_palindrome", "signature": "def find_longest_palindrome(str)", "docstring": "Finds the longest palindrome within a given string.\nThe function takes a single argument, str, which is a string that may include letters, numbers, and symbols.\nIt returns the length of the longest palindrome that can be found within the string.\nPalindromes are sequences that read the same backward as forward.\nNote: The function is case-sensitive and considers each character.\n\nExample:\n>>> find_longest_palindrome(\"ABBA\")\n4\n>>> find_longest_palindrome(\"12ABBA\")\n4\n>>> find_longest_palindrome(\"A\")\n1\n>>> find_longest_palindrome(\"ABAKK\")\n3\n>>> find_longest_palindrome(\"51233214\")\n6\n>>> find_longest_palindrome(\"abaaab\")\n5", "instruction": "Write a ruby function `def find_longest_palindrome(str)` to solve the following problem:\nFinds the longest palindrome within a given string.\nThe function takes a single argument, str, which is a string that may include letters, numbers, and symbols.\nIt returns the length of the longest palindrome that can be found within the string.\nPalindromes are sequences that read the same backward as forward.\nNote: The function is case-sensitive and considers each character.\n\nExample:\n>>> find_longest_palindrome(\"ABBA\")\n4\n>>> find_longest_palindrome(\"12ABBA\")\n4\n>>> find_longest_palindrome(\"A\")\n1\n>>> find_longest_palindrome(\"ABAKK\")\n3\n>>> find_longest_palindrome(\"51233214\")\n6\n>>> find_longest_palindrome(\"abaaab\")\n5", "level": "hard"}
{"task_id": "Ruby/27", "prompt": "# Calculates the sum of two integers as perceived by Xiao Ming, a child who \n# simplifies numbers larger than 99 to their last two digits before addition, \n# and also keeps only the last two digits of the result if it exceeds 99.\n#\n# The function takes two arguments, a and b, which are non-negative integers, and \n# returns the final sum according to Xiao Ming's calculation method.\n#\n# Examples:\n# >>> ming_sum(35, 80)\n# 15\n# >>> ming_sum(15, 1152)\n# 67\n\ndef ming_sum(a, b)", "canonical_solution": "    a %= 100\n    b %= 100\n    (a + b) % 100\n  end", "test": "raise 'Test failed' unless ming_sum(35, 80) == 15\nraise 'Test failed' unless ming_sum(15, 1152) == 67\nraise 'Test failed' unless ming_sum(1234, 5678) == 12\nraise 'Test failed' unless ming_sum(0, 99) == 99\nraise 'Test failed' unless ming_sum(50, 50) == 0\n\n\n\n\nputs 'All tests passed!'", "entry_point": "ming_sum", "signature": "def ming_sum(a, b)", "docstring": "Calculates the sum of two integers as perceived by Xiao Ming, a child who\nsimplifies numbers larger than 99 to their last two digits before addition,\nand also keeps only the last two digits of the result if it exceeds 99.\n\nThe function takes two arguments, a and b, which are non-negative integers, and\nreturns the final sum according to Xiao Ming's calculation method.\n\nExamples:\n>>> ming_sum(35, 80)\n15\n>>> ming_sum(15, 1152)\n67", "instruction": "Write a ruby function `def ming_sum(a, b)` to solve the following problem:\nCalculates the sum of two integers as perceived by Xiao Ming, a child who\nsimplifies numbers larger than 99 to their last two digits before addition,\nand also keeps only the last two digits of the result if it exceeds 99.\n\nThe function takes two arguments, a and b, which are non-negative integers, and\nreturns the final sum according to Xiao Ming's calculation method.\n\nExamples:\n>>> ming_sum(35, 80)\n15\n>>> ming_sum(15, 1152)\n67", "level": "easy"}
{"task_id": "Ruby/28", "prompt": "# Finds the longest word in a given sentence.\n# The function takes a single argument, sentence, which is a string containing multiple words separated by spaces.\n# Each word is composed only of lowercase letters. The function returns the longest word found in the sentence.\n# If there are multiple words of the same longest length, it returns the first one encountered.\n#\n# Example:\n# >>> find_longest_word(\"I am a student\")\n# \"student\"\n# >>> find_longest_word(\"The quick brown fox\")\n# \"quick\"\n\ndef find_longest_word(sentence)", "canonical_solution": "  words = sentence.split(' ')\n  longest_word = words.max_by(&:length)\n  longest_word\nend", "test": "raise 'Test failed' unless find_longest_word(\"I am a student\") == \"student\"\nraise 'Test failed' unless find_longest_word(\"The quick brown fox jumps over the lazy dog\") == \"quick\"\nraise 'Test failed' unless find_longest_word(\"Hello world\") == \"Hello\"\nraise 'Test failed' unless find_longest_word(\"A B C D EFG HI\") == \"EFG\"\nraise 'Test failed' unless find_longest_word(\"Ruby Python Java\") == \"Python\"", "entry_point": "find_longest_word", "signature": "def find_longest_word(sentence)", "docstring": "Finds the longest word in a given sentence.\nThe function takes a single argument, sentence, which is a string containing multiple words separated by spaces.\nEach word is composed only of lowercase letters. The function returns the longest word found in the sentence.\nIf there are multiple words of the same longest length, it returns the first one encountered.\n\nExample:\n>>> find_longest_word(\"I am a student\")\n\"student\"\n>>> find_longest_word(\"The quick brown fox\")\n\"quick\"", "instruction": "Write a ruby function `def find_longest_word(sentence)` to solve the following problem:\nFinds the longest word in a given sentence.\nThe function takes a single argument, sentence, which is a string containing multiple words separated by spaces.\nEach word is composed only of lowercase letters. The function returns the longest word found in the sentence.\nIf there are multiple words of the same longest length, it returns the first one encountered.\n\nExample:\n>>> find_longest_word(\"I am a student\")\n\"student\"\n>>> find_longest_word(\"The quick brown fox\")\n\"quick\"", "level": "easy"}
{"task_id": "Ruby/29", "prompt": "# Decrypts a message encrypted with Caesar's cipher.\n# The cipher shifts each letter in the message 5 positions to the right in the alphabet.\n# Non-letter characters are left unchanged. All letters are in uppercase.\n#\n# Example:\n# >>> decrypt_caesar_cipher('NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX')\n# 'IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES'\n# >>> decrypt_caesar_cipher('N BTZQI WFYMJW GJ KNWXY NS F QNYYQJ NGJWNFS ANQQFLJ YMFS XJHTSI NS WTRJ')\n# 'I WOULD RATHER BE FIRST IN A LITTLE IBERIAN VILLAGE THAN SECOND IN ROME'\n\ndef decrypt_caesar_cipher(message)", "canonical_solution": "    message.chars.map do |char|\n      if char.match?(/[A-Z]/)\n        ((char.ord - 'A'.ord - 5) % 26 + 'A'.ord).chr\n      else\n        char\n      end\n    end.join\n  end", "test": "raise 'Test failed' unless decrypt_caesar_cipher('NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX') == 'IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES'\nraise 'Test failed' unless decrypt_caesar_cipher('N BTZQI WFYMJW GJ KNWXY NS F QNYYQJ NGJWNFS ANQQFLJ YMFS XJHTSI NS WTRJ') == 'I WOULD RATHER BE FIRST IN A LITTLE IBERIAN VILLAGE THAN SECOND IN ROME'\nraise 'Test failed' unless decrypt_caesar_cipher('IFSLJW PSTBX KZQQ BJQQ YMFY HFJXFW NX RTWJ IFSLJWTZX YMFS MJ') == 'DANGER KNOWS FULL WELL THAT CAESAR IS MORE DANGEROUS THAN HE'\nraise 'Test failed' unless decrypt_caesar_cipher('ABCDEF') == 'VWXYZA'\nraise 'Test failed' unless decrypt_caesar_cipher('XYZ') == 'STU'\n\n  \n\n\nputs 'All tests passed!'", "entry_point": "decrypt_caesar_cipher", "signature": "def decrypt_caesar_cipher(message)", "docstring": "Decrypts a message encrypted with Caesar's cipher.\nThe cipher shifts each letter in the message 5 positions to the right in the alphabet.\nNon-letter characters are left unchanged. All letters are in uppercase.\n\nExample:\n>>> decrypt_caesar_cipher('NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX')\n'IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES'\n>>> decrypt_caesar_cipher('N BTZQI WFYMJW GJ KNWXY NS F QNYYQJ NGJWNFS ANQQFLJ YMFS XJHTSI NS WTRJ')\n'I WOULD RATHER BE FIRST IN A LITTLE IBERIAN VILLAGE THAN SECOND IN ROME'", "instruction": "Write a ruby function `def decrypt_caesar_cipher(message)` to solve the following problem:\nDecrypts a message encrypted with Caesar's cipher.\nThe cipher shifts each letter in the message 5 positions to the right in the alphabet.\nNon-letter characters are left unchanged. All letters are in uppercase.\n\nExample:\n>>> decrypt_caesar_cipher('NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX')\n'IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES'\n>>> decrypt_caesar_cipher('N BTZQI WFYMJW GJ KNWXY NS F QNYYQJ NGJWNFS ANQQFLJ YMFS XJHTSI NS WTRJ')\n'I WOULD RATHER BE FIRST IN A LITTLE IBERIAN VILLAGE THAN SECOND IN ROME'", "level": "easy"}
{"task_id": "Ruby/30", "prompt": "# Calculates the number of possible photo arrangements for a group of people.\n# In this arrangement, people are lined up in such a way that the age difference\n# between any two adjacent persons is no more than two years.\n# The function takes a single integer argument, n, representing the number of people\n# in the group, where each person has a distinct age from 1 to n years.\n#\n# Example:\n# >>> photo_arrangements_count(4)\n# 4\n# >>> photo_arrangements_count(5)\n# 6\n\ndef photo_arrangements_count(n)", "canonical_solution": "    # Array to store the count of arrangements for each number up to N\n    arrangements = [1, 1, 2] # Base cases: N=1, N=2, and N=3\n  \n    # Calculating arrangements for N > 3\n    (3...n).each do |i|\n      arrangements[i] = arrangements[i - 1] + arrangements[i - 3] + 1\n    end\n  \n    arrangements[n - 1]\n  end", "test": "  \nraise 'Test failed' unless photo_arrangements_count(4) == 4\nraise 'Test failed' unless photo_arrangements_count(5) == 6\nraise 'Test failed' unless photo_arrangements_count(6) == 9\nraise 'Test failed' unless photo_arrangements_count(7) == 14\nraise 'Test failed' unless photo_arrangements_count(8) == 21\n  \n\nputs 'All tests passed!'", "entry_point": "photo_arrangements_count", "signature": "def photo_arrangements_count(n)", "docstring": "Calculates the number of possible photo arrangements for a group of people.\nIn this arrangement, people are lined up in such a way that the age difference\nbetween any two adjacent persons is no more than two years.\nThe function takes a single integer argument, n, representing the number of people\nin the group, where each person has a distinct age from 1 to n years.\n\nExample:\n>>> photo_arrangements_count(4)\n4\n>>> photo_arrangements_count(5)\n6", "instruction": "Write a ruby function `def photo_arrangements_count(n)` to solve the following problem:\nCalculates the number of possible photo arrangements for a group of people.\nIn this arrangement, people are lined up in such a way that the age difference\nbetween any two adjacent persons is no more than two years.\nThe function takes a single integer argument, n, representing the number of people\nin the group, where each person has a distinct age from 1 to n years.\n\nExample:\n>>> photo_arrangements_count(4)\n4\n>>> photo_arrangements_count(5)\n6", "level": "middle"}
{"task_id": "Ruby/31", "prompt": "# Converts a numerical score into a corresponding letter grade based on predefined ranges.\n# The function takes a single argument, score, which is an integer representing the score.\n# It returns a string representing the letter grade, or an error message for invalid scores.\n#\n# Grade Conversion:\n# 90-100: 'A'\n# 80-89: 'B'\n# 70-79: 'C'\n# 60-69: 'D'\n# 0-59: 'E'\n# Any other score: 'Score is error!'\n#\n# Examples:\n# >>> convert_score_to_grade(56)\n# 'E'\n# >>> convert_score_to_grade(100)\n# 'A'\n# >>> convert_score_to_grade(123)\n# 'Score is error!'\n\ndef convert_score_to_grade(score)", "canonical_solution": "    return 'Score is error!' if score < 0 || score > 100\n  \n    case score\n    when 90..100\n      'A'\n    when 80...90\n      'B'\n    when 70...80\n      'C'\n    when 60...70\n      'D'\n    when 0...60\n      'E'\n    else\n      'Score is error!'\n    end\n  end", "test": "raise 'Test failed' unless convert_score_to_grade(56) == 'E'\nraise 'Test failed' unless convert_score_to_grade(67) == 'D'\nraise 'Test failed' unless convert_score_to_grade(100) == 'A'\nraise 'Test failed' unless convert_score_to_grade(123) == 'Score is error!'\nraise 'Test failed' unless convert_score_to_grade(-5) == 'Score is error!'\nraise 'Test failed' unless convert_score_to_grade(85) == 'B'\n  \n\nputs 'All tests passed!'", "entry_point": "convert_score_to_grade", "signature": "def convert_score_to_grade(score)", "docstring": "Converts a numerical score into a corresponding letter grade based on predefined ranges.\nThe function takes a single argument, score, which is an integer representing the score.\nIt returns a string representing the letter grade, or an error message for invalid scores.\n\nGrade Conversion:\n90-100: 'A'\n80-89: 'B'\n70-79: 'C'\n60-69: 'D'\n0-59: 'E'\nAny other score: 'Score is error!'\n\nExamples:\n>>> convert_score_to_grade(56)\n'E'\n>>> convert_score_to_grade(100)\n'A'\n>>> convert_score_to_grade(123)\n'Score is error!'", "instruction": "Write a ruby function `def convert_score_to_grade(score)` to solve the following problem:\nConverts a numerical score into a corresponding letter grade based on predefined ranges.\nThe function takes a single argument, score, which is an integer representing the score.\nIt returns a string representing the letter grade, or an error message for invalid scores.\n\nGrade Conversion:\n90-100: 'A'\n80-89: 'B'\n70-79: 'C'\n60-69: 'D'\n0-59: 'E'\nAny other score: 'Score is error!'\n\nExamples:\n>>> convert_score_to_grade(56)\n'E'\n>>> convert_score_to_grade(100)\n'A'\n>>> convert_score_to_grade(123)\n'Score is error!'", "level": "easy"}
{"task_id": "Ruby/32", "prompt": "# Calculates the minimum time required to reverse the order of M people standing in a circle.\n# In each minute, only a pair of adjacent people can swap places. The function returns the \n# minimum number of minutes required to reverse the order of the people, such that each person's \n# left neighbor becomes their right neighbor and vice versa.\n#\n# Args:\n# - m: A positive integer representing the number of people in the circle.\n#\n# Returns:\n# - An integer representing the minimum number of minutes required to achieve the reversed order.\n#\n# Examples:\n# >>> min_time_to_reverse_order(4)\n# 2\n# >>> min_time_to_reverse_order(5)\n# 4\n# >>> min_time_to_reverse_order(6)\n# 6\n\ndef min_time_to_reverse_order(m)", "canonical_solution": "    if m.even?\n      (m / 2) * (m / 2 - 1)\n    else\n      (m - 1) * (m - 1) / 4\n    end\n  end", "test": "raise 'Test failed' unless min_time_to_reverse_order(4) == 2\nraise 'Test failed' unless min_time_to_reverse_order(5) == 4\nraise 'Test failed' unless min_time_to_reverse_order(6) == 6\nraise 'Test failed' unless min_time_to_reverse_order(7) == 9\nraise 'Test failed' unless min_time_to_reverse_order(10) == 20\n\n\n\nputs 'All tests passed!'", "entry_point": "min_time_to_reverse_order", "signature": "def min_time_to_reverse_order(m)", "docstring": "Calculates the minimum time required to reverse the order of M people standing in a circle.\nIn each minute, only a pair of adjacent people can swap places. The function returns the\nminimum number of minutes required to reverse the order of the people, such that each person's\nleft neighbor becomes their right neighbor and vice versa.\n\nArgs:\n- m: A positive integer representing the number of people in the circle.\n\nReturns:\n- An integer representing the minimum number of minutes required to achieve the reversed order.\n\nExamples:\n>>> min_time_to_reverse_order(4)\n2\n>>> min_time_to_reverse_order(5)\n4\n>>> min_time_to_reverse_order(6)\n6", "instruction": "Write a ruby function `def min_time_to_reverse_order(m)` to solve the following problem:\nCalculates the minimum time required to reverse the order of M people standing in a circle.\nIn each minute, only a pair of adjacent people can swap places. The function returns the\nminimum number of minutes required to reverse the order of the people, such that each person's\nleft neighbor becomes their right neighbor and vice versa.\n\nArgs:\n- m: A positive integer representing the number of people in the circle.\n\nReturns:\n- An integer representing the minimum number of minutes required to achieve the reversed order.\n\nExamples:\n>>> min_time_to_reverse_order(4)\n2\n>>> min_time_to_reverse_order(5)\n4\n>>> min_time_to_reverse_order(6)\n6", "level": "easy"}
{"task_id": "Ruby/33", "prompt": "# Generates all unique four-digit permutations using the given four digits.\n# Each digit is used exactly once in each permutation. The function accepts\n# four integers as arguments and returns an array of strings, each representing\n# a unique permutation. The permutations are sorted in ascending order.\n#\n# Example:\n# >>> generate_four_digit_permutations(1, 2, 3, 4)\n# [\"1234\", \"1243\", \"1324\", \"1342\", \"1423\", \"1432\", ...]\n# >>> generate_four_digit_permutations(1, 2, 3, 5)\n# [\"1235\", \"1253\", \"1325\", \"1352\", \"1523\", \"1532\", ...]\n\n\ndef generate_four_digit_permutations(*digits)", "canonical_solution": "    permutations = digits.permutation(4).to_a\n    permutations.map! { |perm| perm.join }\n    permutations.sort\n  end", "test": "raise 'Test failed' unless generate_four_digit_permutations(1, 2, 3, 4) == [\"1234\", \"1243\", \"1324\", \"1342\", \"1423\", \"1432\", \"2134\", \"2143\", \"2314\", \"2341\", \"2413\", \"2431\", \"3124\", \"3142\", \"3214\", \"3241\", \"3412\", \"3421\", \"4123\", \"4132\", \"4213\", \"4231\", \"4312\", \"4321\"]\n\nraise 'Test failed' unless generate_four_digit_permutations(1, 2, 3, 5) == [\"1235\", \"1253\", \"1325\", \"1352\", \"1523\", \"1532\", \"2135\", \"2153\", \"2315\", \"2351\", \"2513\", \"2531\", \"3125\", \"3152\", \"3215\", \"3251\", \"3512\", \"3521\", \"5123\", \"5132\", \"5213\", \"5231\", \"5312\", \"5321\"]\n   \n\n\nputs 'All tests passed!'", "entry_point": "generate_four_digit_permutations", "signature": "def generate_four_digit_permutations(*digits)", "docstring": "Generates all unique four-digit permutations using the given four digits.\nEach digit is used exactly once in each permutation. The function accepts\nfour integers as arguments and returns an array of strings, each representing\na unique permutation. The permutations are sorted in ascending order.\n\nExample:\n>>> generate_four_digit_permutations(1, 2, 3, 4)\n[\"1234\", \"1243\", \"1324\", \"1342\", \"1423\", \"1432\", ...]\n>>> generate_four_digit_permutations(1, 2, 3, 5)\n[\"1235\", \"1253\", \"1325\", \"1352\", \"1523\", \"1532\", ...]", "instruction": "Write a ruby function `def generate_four_digit_permutations(*digits)` to solve the following problem:\nGenerates all unique four-digit permutations using the given four digits.\nEach digit is used exactly once in each permutation. The function accepts\nfour integers as arguments and returns an array of strings, each representing\na unique permutation. The permutations are sorted in ascending order.\n\nExample:\n>>> generate_four_digit_permutations(1, 2, 3, 4)\n[\"1234\", \"1243\", \"1324\", \"1342\", \"1423\", \"1432\", ...]\n>>> generate_four_digit_permutations(1, 2, 3, 5)\n[\"1235\", \"1253\", \"1325\", \"1352\", \"1523\", \"1532\", ...]", "level": "easy"}
{"task_id": "Ruby/34", "prompt": "# Counts the number of numbers less than or equal to n that are either multiples of 7 or contain the digit '7'.\n# The function takes a single argument, n, which is a positive integer, and returns the count of numbers \n# that are related to 7 as per the criteria.\n#\n# Example:\n# >>> count_seven_related_numbers(20)\n# 3\n# >>> count_seven_related_numbers(15)\n# 2\n\ndef count_seven_related_numbers(n)", "canonical_solution": "    count = 0\n    (1..n).each do |num|\n      count += 1 if num % 7 == 0 || num.to_s.include?('7')\n    end\n    count\n  end", "test": "raise 'Test failed' unless count_seven_related_numbers(20) == 3\nraise 'Test failed' unless count_seven_related_numbers(15) == 2\nraise 'Test failed' unless count_seven_related_numbers(50) == 11\nraise 'Test failed' unless count_seven_related_numbers(28) == 6\nraise 'Test failed' unless count_seven_related_numbers(100) == 30\n  \n\nputs 'All tests passed!'", "entry_point": "count_seven_related_numbers", "signature": "def count_seven_related_numbers(n)", "docstring": "Counts the number of numbers less than or equal to n that are either multiples of 7 or contain the digit '7'.\nThe function takes a single argument, n, which is a positive integer, and returns the count of numbers\nthat are related to 7 as per the criteria.\n\nExample:\n>>> count_seven_related_numbers(20)\n3\n>>> count_seven_related_numbers(15)\n2", "instruction": "Write a ruby function `def count_seven_related_numbers(n)` to solve the following problem:\nCounts the number of numbers less than or equal to n that are either multiples of 7 or contain the digit '7'.\nThe function takes a single argument, n, which is a positive integer, and returns the count of numbers\nthat are related to 7 as per the criteria.\n\nExample:\n>>> count_seven_related_numbers(20)\n3\n>>> count_seven_related_numbers(15)\n2", "level": "easy"}
{"task_id": "Ruby/35", "prompt": "# Finds all possible last two digits of a number that, when added to the number 'a',\n# makes it divisible by 'b'. The function takes two arguments, 'a' and 'b', where 'a' is \n# a positive integer less than 10000, and 'b' is a positive integer between 10 and 100.\n# The function returns an array of strings representing the possible two-digit suffixes.\n#\n# Example:\n# >>> find_possible_last_digits(200, 40)\n# [\"00\", \"40\", \"80\"]\n# >>> find_possible_last_digits(1992, 95)\n# [\"15\"]\n\ndef find_possible_last_digits(a, b)", "canonical_solution": "    possible_digits = []\n    (0..99).each do |i|\n      suffix = '%02d' % i # Ensures a two-digit format\n      combined_number = (a.to_s + suffix).to_i\n      possible_digits << suffix if combined_number % b == 0\n    end\n    possible_digits\n  end", "test": "raise 'Test failed' unless find_possible_last_digits(200, 40) == [\"00\", \"40\", \"80\"]\nraise 'Test failed' unless find_possible_last_digits(1992, 95) == [\"15\"]\nraise 'Test failed' unless find_possible_last_digits(1500, 25) == [\"00\", \"25\", \"50\", \"75\"]\nraise 'Test failed' unless find_possible_last_digits(300, 30) == [\"00\", \"30\", \"60\", \"90\"]\n  \nputs 'All tests passed!'", "entry_point": "find_possible_last_digits", "signature": "def find_possible_last_digits(a, b)", "docstring": "Finds all possible last two digits of a number that, when added to the number 'a',\nmakes it divisible by 'b'. The function takes two arguments, 'a' and 'b', where 'a' is\na positive integer less than 10000, and 'b' is a positive integer between 10 and 100.\nThe function returns an array of strings representing the possible two-digit suffixes.\n\nExample:\n>>> find_possible_last_digits(200, 40)\n[\"00\", \"40\", \"80\"]\n>>> find_possible_last_digits(1992, 95)\n[\"15\"]", "instruction": "Write a ruby function `def find_possible_last_digits(a, b)` to solve the following problem:\nFinds all possible last two digits of a number that, when added to the number 'a',\nmakes it divisible by 'b'. The function takes two arguments, 'a' and 'b', where 'a' is\na positive integer less than 10000, and 'b' is a positive integer between 10 and 100.\nThe function returns an array of strings representing the possible two-digit suffixes.\n\nExample:\n>>> find_possible_last_digits(200, 40)\n[\"00\", \"40\", \"80\"]\n>>> find_possible_last_digits(1992, 95)\n[\"15\"]", "level": "easy"}
{"task_id": "Ruby/36", "prompt": "# Calculates the minimum number of square tiles required to completely cover a square room of size n x n.\n# The tiles used must be smaller than n x n and can be of varying sizes. \n# The function takes a single argument, n, which is a positive integer representing the size of the room, \n# and returns the minimum number of tiles required.\n#\n# Example:\n# >>> min_tiles_required(4)\n# 4\n# >>> min_tiles_required(5)\n# 8\n\n\ndef min_tiles_required(n)", "canonical_solution": "    # Base case: If the room size is 1, only one tile is needed\n    return 1 if n == 1\n  \n    # If the room size is even, divide it into four equal parts\n    if n.even?\n      return 4 \n    else\n    \n      return (n+3)\n    end\n  end", "test": "raise 'Test failed' unless min_tiles_required(4) == 4\nraise 'Test failed' unless min_tiles_required(5) == 8\nraise 'Test failed' unless min_tiles_required(2) == 4\nraise 'Test failed' unless min_tiles_required(10) == 4\nraise 'Test failed' unless min_tiles_required(7) == 10\n  \nputs 'All tests passed!'   ", "entry_point": "min_tiles_required", "signature": "def min_tiles_required(n)", "docstring": "Calculates the minimum number of square tiles required to completely cover a square room of size n x n.\nThe tiles used must be smaller than n x n and can be of varying sizes.\nThe function takes a single argument, n, which is a positive integer representing the size of the room,\nand returns the minimum number of tiles required.\n\nExample:\n>>> min_tiles_required(4)\n4\n>>> min_tiles_required(5)\n8", "instruction": "Write a ruby function `def min_tiles_required(n)` to solve the following problem:\nCalculates the minimum number of square tiles required to completely cover a square room of size n x n.\nThe tiles used must be smaller than n x n and can be of varying sizes.\nThe function takes a single argument, n, which is a positive integer representing the size of the room,\nand returns the minimum number of tiles required.\n\nExample:\n>>> min_tiles_required(4)\n4\n>>> min_tiles_required(5)\n8", "level": "easy"}
{"task_id": "Ruby/37", "prompt": "# Sorts a list of dates in the format 'MM/DD/YYYY'.\n# The function takes an array of string dates and returns an array of dates sorted in ascending order.\n# The sorting is done based on the chronological order of the dates.\n#\n# Examples:\n# >>> sort_dates([\"15/12/1999\", \"10/21/2003\", \"02/12/2004\"])\n# [\"15/12/1999\", \"10/21/2003\", \"02/12/2004\"]\n# >>> sort_dates([\"12/31/2005\", \"11/30/2005\", \"10/22/2003\"])\n# [\"10/22/2003\", \"11/30/2005\", \"12/31/2005\"]\n\ndef sort_dates(dates)", "canonical_solution": "    dates.sort_by { |date| date.split('/').rotate(-1).join }\n  end", "test": "raise 'Test failed' unless sort_dates([\"10/21/2003\", \"15/12/1999\",  \"02/12/2004\"]) == [\"15/12/1999\", \"10/21/2003\", \"02/12/2004\"]\nraise 'Test failed' unless sort_dates([\"12/31/2005\", \"11/30/2005\", \"10/22/2003\"]) == [\"10/22/2003\", \"11/30/2005\", \"12/31/2005\"]\nraise 'Test failed' unless sort_dates([\"01/01/2000\", \"12/31/1999\"]) == [\"12/31/1999\", \"01/01/2000\"]\n  \n\nputs 'All tests passed!'", "entry_point": "sort_dates", "signature": "def sort_dates(dates)", "docstring": "Sorts a list of dates in the format 'MM/DD/YYYY'.\nThe function takes an array of string dates and returns an array of dates sorted in ascending order.\nThe sorting is done based on the chronological order of the dates.\n\nExamples:\n>>> sort_dates([\"15/12/1999\", \"10/21/2003\", \"02/12/2004\"])\n[\"15/12/1999\", \"10/21/2003\", \"02/12/2004\"]\n>>> sort_dates([\"12/31/2005\", \"11/30/2005\", \"10/22/2003\"])\n[\"10/22/2003\", \"11/30/2005\", \"12/31/2005\"]", "instruction": "Write a ruby function `def sort_dates(dates)` to solve the following problem:\nSorts a list of dates in the format 'MM/DD/YYYY'.\nThe function takes an array of string dates and returns an array of dates sorted in ascending order.\nThe sorting is done based on the chronological order of the dates.\n\nExamples:\n>>> sort_dates([\"15/12/1999\", \"10/21/2003\", \"02/12/2004\"])\n[\"15/12/1999\", \"10/21/2003\", \"02/12/2004\"]\n>>> sort_dates([\"12/31/2005\", \"11/30/2005\", \"10/22/2003\"])\n[\"10/22/2003\", \"11/30/2005\", \"12/31/2005\"]", "level": "easy"}
{"task_id": "Ruby/38", "prompt": "# Finds the largest letter(s) in the input string (considering 'A' and 'a' as the same letter) and inserts \"(max)\" after each of its occurrences.\n# The function takes one argument, input_string, which is a string of letters and possibly digits.\n# Returns a new string with \"(max)\" inserted after each occurrence of the largest letter(s).\n#\n# Examples:\n# >>> insert_max_after_largest_letters(\"abcdefgfedcba\")\n# \"abcdefg(max)fedcba\"\n# >>> insert_max_after_largest_letters(\"aAbBcC\")\n# \"aAbBc(max)C(max)\"\n\ndef insert_max_after_largest_letters(input_string)", "canonical_solution": "    # Normalize the string to lowercase for comparison\n    normalized_string = input_string.downcase\n  \n    # Find the largest letter\n    largest_letter = normalized_string.chars.max\n  \n    # Insert '(max)' after each occurrence of the largest letter\n    result = ''\n    input_string.each_char do |char|\n      result += char\n      result += '(max)' if char.downcase == largest_letter\n    end\n  \n    result\n  end", "test": "raise 'Test failed' unless insert_max_after_largest_letters(\"abcdefgfedcba\") == \"abcdefg(max)fedcba\"\nraise 'Test failed' unless insert_max_after_largest_letters(\"xxxxx\") == \"x(max)x(max)x(max)x(max)x(max)\"\nraise 'Test failed' unless insert_max_after_largest_letters(\"Hello World!\") == \"Hello W(max)orld!\"\nraise 'Test failed' unless insert_max_after_largest_letters(\"Ruby123\") == \"Ruby(max)123\"\nraise 'Test failed' unless insert_max_after_largest_letters(\"\") == \"\"\nraise 'Test failed' unless insert_max_after_largest_letters(\"aAbBcC\") == \"aAbBc(max)C(max)\"\n  \n\nputs 'All tests passed!'", "entry_point": "insert_max_after_largest_letters", "signature": "def insert_max_after_largest_letters(input_string)", "docstring": "Finds the largest letter(s) in the input string (considering 'A' and 'a' as the same letter) and inserts \"(max)\" after each of its occurrences.\nThe function takes one argument, input_string, which is a string of letters and possibly digits.\nReturns a new string with \"(max)\" inserted after each occurrence of the largest letter(s).\n\nExamples:\n>>> insert_max_after_largest_letters(\"abcdefgfedcba\")\n\"abcdefg(max)fedcba\"\n>>> insert_max_after_largest_letters(\"aAbBcC\")\n\"aAbBc(max)C(max)\"", "instruction": "Write a ruby function `def insert_max_after_largest_letters(input_string)` to solve the following problem:\nFinds the largest letter(s) in the input string (considering 'A' and 'a' as the same letter) and inserts \"(max)\" after each of its occurrences.\nThe function takes one argument, input_string, which is a string of letters and possibly digits.\nReturns a new string with \"(max)\" inserted after each occurrence of the largest letter(s).\n\nExamples:\n>>> insert_max_after_largest_letters(\"abcdefgfedcba\")\n\"abcdefg(max)fedcba\"\n>>> insert_max_after_largest_letters(\"aAbBcC\")\n\"aAbBc(max)C(max)\"", "level": "middle"}
{"task_id": "Ruby/39", "prompt": "# Calculates the total number of ways to safely place nuclear materials in N pits arranged in a line\n# such that no three consecutive pits contain nuclear materials, avoiding an explosion.\n# The function takes a single argument, n, which is a positive integer representing the number of pits,\n# and returns the total count of safe placement combinations for the given number of pits.\n#\n# Example:\n# >>> count_safe_placements(1)\n# 2\n# >>> count_safe_placements(4)\n# 13\n# >>> count_safe_placements(10)\n# 504\n\ndef count_safe_placements(n)", "canonical_solution": "    dp = [0, 2, 4, 7]\n    (4..n).each do |i|\n      dp[i] = dp[i-1] + dp[i-2] + dp[i-3]\n    end\n    dp[n]\n  end", "test": "raise 'Test failed' unless count_safe_placements(1) == 2\nraise 'Test failed' unless count_safe_placements(4) == 13\nraise 'Test failed' unless count_safe_placements(10) == 504\nraise 'Test failed' unless count_safe_placements(3) == 7\nraise 'Test failed' unless count_safe_placements(2) == 4\n    \n\nputs 'All tests passed!'", "entry_point": "count_safe_placements", "signature": "def count_safe_placements(n)", "docstring": "Calculates the total number of ways to safely place nuclear materials in N pits arranged in a line\nsuch that no three consecutive pits contain nuclear materials, avoiding an explosion.\nThe function takes a single argument, n, which is a positive integer representing the number of pits,\nand returns the total count of safe placement combinations for the given number of pits.\n\nExample:\n>>> count_safe_placements(1)\n2\n>>> count_safe_placements(4)\n13\n>>> count_safe_placements(10)\n504", "instruction": "Write a ruby function `def count_safe_placements(n)` to solve the following problem:\nCalculates the total number of ways to safely place nuclear materials in N pits arranged in a line\nsuch that no three consecutive pits contain nuclear materials, avoiding an explosion.\nThe function takes a single argument, n, which is a positive integer representing the number of pits,\nand returns the total count of safe placement combinations for the given number of pits.\n\nExample:\n>>> count_safe_placements(1)\n2\n>>> count_safe_placements(4)\n13\n>>> count_safe_placements(10)\n504", "level": "easy"}
{"task_id": "Ruby/40", "prompt": "# Calculates the time needed to hang a saline solution.\n#\n# The function takes two arguments: vul, which is the total volume of the saline solution in milliliters,\n# and d, which is the volume of each drop in milliliters. The function assumes that each drop takes \n# one second to fall and there is a one-second pause after a certain number of drops, which increases \n# sequentially (1 drop, then a pause, 2 drops, then a pause, and so on).\n# The function returns the total time in seconds required to hang the entire volume of saline solution.\n#\n# Examples:\n# >>> calculate_hanging_time(10, 1)\n# 13\n# >>> calculate_hanging_time(20, 2)\n# 13\n\n\ndef calculate_hanging_time(vul, d)", "canonical_solution": "    time = 0\n    count = 0\n    i = 1\n  \n    while vul > 0\n      vul -= d\n      time += 1\n      count += 1\n  \n      if count == i && vul > 0\n        time += 1\n        i += 1\n        count = 0\n      end\n    end\n  \n    time\n  end", "test": "raise 'Test failed' unless calculate_hanging_time(10, 1) == 13\nraise 'Test failed' unless calculate_hanging_time(20, 2) == 13\nraise 'Test failed' unless calculate_hanging_time(15, 3) == 7\nraise 'Test failed' unless calculate_hanging_time(50, 5) == 13\nraise 'Test failed' unless calculate_hanging_time(100, 10) == 13\n\n  \nputs 'All tests passed!'", "entry_point": "calculate_hanging_time", "signature": "def calculate_hanging_time(vul, d)", "docstring": "Calculates the time needed to hang a saline solution.\n\nThe function takes two arguments: vul, which is the total volume of the saline solution in milliliters,\nand d, which is the volume of each drop in milliliters. The function assumes that each drop takes\none second to fall and there is a one-second pause after a certain number of drops, which increases\nsequentially (1 drop, then a pause, 2 drops, then a pause, and so on).\nThe function returns the total time in seconds required to hang the entire volume of saline solution.\n\nExamples:\n>>> calculate_hanging_time(10, 1)\n13\n>>> calculate_hanging_time(20, 2)\n13", "instruction": "Write a ruby function `def calculate_hanging_time(vul, d)` to solve the following problem:\nCalculates the time needed to hang a saline solution.\n\nThe function takes two arguments: vul, which is the total volume of the saline solution in milliliters,\nand d, which is the volume of each drop in milliliters. The function assumes that each drop takes\none second to fall and there is a one-second pause after a certain number of drops, which increases\nsequentially (1 drop, then a pause, 2 drops, then a pause, and so on).\nThe function returns the total time in seconds required to hang the entire volume of saline solution.\n\nExamples:\n>>> calculate_hanging_time(10, 1)\n13\n>>> calculate_hanging_time(20, 2)\n13", "level": "easy"}
{"task_id": "Ruby/41", "prompt": "# Counts the number of pairs of students who are considered \"equally matched opponents\".\n# Two students are \"equally matched\" if the difference in scores for each subject (Chinese, Mathematics, English) \n# is no more than 5 points, and the total score difference is no more than 10 points.\n# The function takes an array of arrays, where each sub-array represents a student's scores in the three subjects,\n# and returns the total count of \"equally matched\" student pairs.\n#\n# Example:\n# >>> count_matching_pairs([[90, 90, 90], [85, 95, 90], [80, 100, 91]])\n# 2\n\n\ndef count_matching_pairs(students_scores)", "canonical_solution": "  # Initialize a counter for matching pairs\n  matching_pairs_count = 0\n  \n  # Iterate over the array of students_scores with indices\n  students_scores.each_with_index do |student1, index1|\n    # Compare the current student with every other student ahead in the list\n    students_scores[(index1+1)..-1].each do |student2|\n      # Calculate the absolute differences in scores for each subject\n      differences = student1.zip(student2).map { |score1, score2| (score1 - score2).abs }\n      \n      # Calculate the total scores for each student to check the total score difference\n      total_score_diff = (student1.sum - student2.sum).abs\n      \n      # Check if the pair is \"equally matched\"\n      if differences.all? { |diff| diff <= 5 } && total_score_diff <= 10\n        # If they are equally matched, increment the counter\n        matching_pairs_count += 1\n      end\n    end\n  end\n  \n  # Return the total count of equally matched pairs\n\n  matching_pairs_count\nend", "test": "raise 'Test failed' unless count_matching_pairs([[90, 90, 90], [85, 95, 90], [80, 100, 91]]) == 2\nraise 'Test failed' unless count_matching_pairs([[100, 100, 100], [100, 100, 105], [90, 90, 90]]) == 1\nraise 'Test failed' unless count_matching_pairs([[90, 90, 90], [85, 80, 85], [80, 85, 80], [76, 81, 85]]) == 2\nraise 'Test failed' unless count_matching_pairs([[100, 100, 100]]) == 0\nraise 'Test failed' unless count_matching_pairs([]) == 0", "entry_point": "count_matching_pairs", "signature": "def count_matching_pairs(students_scores)", "docstring": "Counts the number of pairs of students who are considered \"equally matched opponents\".\n Two students are \"equally matched\" if the difference in scores for each subject (Chinese, Mathematics, English) \n is no more than 5 points, and the total score difference is no more than 10 points.\n The function takes an array of arrays, where each sub-array represents a student's scores in the three subjects,\n and returns the total count of \"equally matched\" student pairs.\n\n Example:\n >>> count_matching_pairs([[90, 90, 90], [85, 95, 90], [80, 100, 91]])\n 2", "instruction": "Write a ruby function `def count_matching_pairs(students_scores)` to solve the following problem:\nCounts the number of pairs of students who are considered \"equally matched opponents\".\n Two students are \"equally matched\" if the difference in scores for each subject (Chinese, Mathematics, English) \n is no more than 5 points, and the total score difference is no more than 10 points.\n The function takes an array of arrays, where each sub-array represents a student's scores in the three subjects,\n and returns the total count of \"equally matched\" student pairs.\n\n Example:\n >>> count_matching_pairs([[90, 90, 90], [85, 95, 90], [80, 100, 91]])\n 2", "level": "hard"}
{"task_id": "Ruby/42", "prompt": "# Calculates the total number of cigarettes Peter can smoke given an initial\n# amount of cigarettes and a conversion rate of cigarette butts to new cigarettes.\n# Peter starts with n cigarettes and can turn every k butts into a new cigarette.\n#\n# The function takes two arguments, n and k, where n is the initial number of\n# cigarettes and k is the number of butts required for a new cigarette. It\n# returns the total number of cigarettes Peter can smoke.\n#\n# Examples:\n# >>> total_smoked_cigarettes(4, 3)\n# 5\n# >>> total_smoked_cigarettes(10, 3)\n# 14\ndef total_smoked_cigarettes(n, k)", "canonical_solution": "    total_smoked = n\n    butts = n\n    \n    while butts >= k\n      new_cigarettes = butts / k\n      total_smoked += new_cigarettes\n      butts = butts % k + new_cigarettes\n    end\n  \n    total_smoked\n  end", "test": "raise 'Test failed' unless total_smoked_cigarettes(4, 3) == 5\nraise 'Test failed' unless total_smoked_cigarettes(10, 3) == 14\nraise 'Test failed' unless total_smoked_cigarettes(20, 4) == 26\nraise 'Test failed' unless total_smoked_cigarettes(1, 2) == 1\nraise 'Test failed' unless total_smoked_cigarettes(100, 5) == 124\n  ", "entry_point": "total_smoked_cigarettes", "signature": "def total_smoked_cigarettes(n, k)", "docstring": "Calculates the total number of cigarettes Peter can smoke given an initial\n amount of cigarettes and a conversion rate of cigarette butts to new cigarettes.\n Peter starts with n cigarettes and can turn every k butts into a new cigarette.\n\n The function takes two arguments, n and k, where n is the initial number of\n cigarettes and k is the number of butts required for a new cigarette. It\n returns the total number of cigarettes Peter can smoke.\n\n Examples:\n >>> total_smoked_cigarettes(4, 3)\n 5\n >>> total_smoked_cigarettes(10, 3)\n 14", "instruction": "Write a ruby function `def total_smoked_cigarettes(n, k)` to solve the following problem:\nCalculates the total number of cigarettes Peter can smoke given an initial\n amount of cigarettes and a conversion rate of cigarette butts to new cigarettes.\n Peter starts with n cigarettes and can turn every k butts into a new cigarette.\n\n The function takes two arguments, n and k, where n is the initial number of\n cigarettes and k is the number of butts required for a new cigarette. It\n returns the total number of cigarettes Peter can smoke.\n\n Examples:\n >>> total_smoked_cigarettes(4, 3)\n 5\n >>> total_smoked_cigarettes(10, 3)\n 14", "level": "easy"}
{"task_id": "Ruby/43", "prompt": "# Finds the length of the longest consecutive sequence in an array of integers.\n# The function takes an array of integers as an argument and returns the length\n# of the longest consecutive sequence of numbers present in the array.\n#\n# Example:\n# >>> longest_consecutive_sequence([1, 5, 6, 2, 3, 4, 5, 6, 8, 9])\n# 6  # Because the longest consecutive sequence is 1, 2, 3, 4, 5, 6\n# >>> longest_consecutive_sequence([10, 4, 20, 1, 3, 2])\n# 4  # Because the longest consecutive sequence is 1, 2, 3, 4\ndef longest_consecutive_sequence(arr)", "canonical_solution": "    # Return 0 if the array is empty\n    return 0 if arr.empty?\n  \n    # Sort the array\n    sorted_arr = arr.sort.uniq  # Also remove duplicates to handle repeated numbers\n  \n    max_length = 1\n    current_length = 1\n  \n    (1...sorted_arr.length).each do |i|\n      # Check if the current number is consecutive to the previous\n      if sorted_arr[i] == sorted_arr[i - 1] + 1\n        current_length += 1\n        max_length = [max_length, current_length].max\n      else\n        current_length = 1\n      end\n    end\n  \n    max_length\n  end", "test": "raise 'Test failed' unless longest_consecutive_sequence([1, 5, 6, 2, 3, 4, 5, 6, 8, 9]) ==6\nraise 'Test failed' unless longest_consecutive_sequence([10, 4, 20, 1, 3, 2]) == 4\nraise 'Test failed' unless longest_consecutive_sequence([100, 4, 200, 1, 3, 2]) == 4\nraise 'Test failed' unless longest_consecutive_sequence([1, 2, 0, 1]) == 3\nraise 'Test failed' unless longest_consecutive_sequence([]) == 0\nraise 'Test failed' unless longest_consecutive_sequence([1]) == 1", "entry_point": "longest_consecutive_sequence", "signature": "def longest_consecutive_sequence(arr)", "docstring": "Finds the length of the longest consecutive sequence in an array of integers.\n The function takes an array of integers as an argument and returns the length\n of the longest consecutive sequence of numbers present in the array.\n\n Example:\n >>> longest_consecutive_sequence([1, 5, 6, 2, 3, 4, 5, 6, 8, 9])\n 6   Because the longest consecutive sequence is 1, 2, 3, 4, 5, 6\n >>> longest_consecutive_sequence([10, 4, 20, 1, 3, 2])\n 4   Because the longest consecutive sequence is 1, 2, 3, 4", "instruction": "Write a ruby function `def longest_consecutive_sequence(arr)` to solve the following problem:\nFinds the length of the longest consecutive sequence in an array of integers.\n The function takes an array of integers as an argument and returns the length\n of the longest consecutive sequence of numbers present in the array.\n\n Example:\n >>> longest_consecutive_sequence([1, 5, 6, 2, 3, 4, 5, 6, 8, 9])\n 6   Because the longest consecutive sequence is 1, 2, 3, 4, 5, 6\n >>> longest_consecutive_sequence([10, 4, 20, 1, 3, 2])\n 4   Because the longest consecutive sequence is 1, 2, 3, 4", "level": "hard"}
{"task_id": "Ruby/44", "prompt": "# Compares the area of a square with side length 'a' to the area of a rectangle with sides 'b' and 'c'.\n# The function takes three arguments, a, b, and c, which are positive integers representing the side length of the square and the sides of the rectangle, respectively.\n# It returns a string indicating whose shape has the greater area: \"Alice\" if the square's area is larger, and \"Bob\" if the rectangle's area is larger.\n#\n# Examples:\n# >>> compare_area(5, 4, 6)\n# \"Alice\"\n# >>> compare_area(7, 5, 10)\n# \"Bob\"\n\ndef compare_area(a, b, c)", "canonical_solution": "    square_area = a * a\n    rectangle_area = b * c\n    if square_area > rectangle_area\n      \"Alice\"\n    else\n      \"Bob\"\n    end\n  end", "test": "raise 'Test failed' unless compare_area(5, 4, 6) == \"Alice\"\nraise 'Test failed' unless compare_area(7, 5, 10) == \"Bob\"\nraise 'Test failed' unless compare_area(6, 3, 12) == \"Bob\"\nraise 'Test failed' unless compare_area(10, 10, 1) == \"Alice\"\nraise 'Test failed' unless compare_area(8, 8, 8) == \"Bob\" # Case where areas are equal, but based on the problem statement, Bob wins in a tie.", "entry_point": "compare_area", "signature": "def compare_area(a, b, c)", "docstring": "Compares the area of a square with side length 'a' to the area of a rectangle with sides 'b' and 'c'.\n The function takes three arguments, a, b, and c, which are positive integers representing the side length of the square and the sides of the rectangle, respectively.\n It returns a string indicating whose shape has the greater area: \"Alice\" if the square's area is larger, and \"Bob\" if the rectangle's area is larger.\n\n Examples:\n >>> compare_area(5, 4, 6)\n \"Alice\"\n >>> compare_area(7, 5, 10)\n \"Bob\"", "instruction": "Write a ruby function `def compare_area(a, b, c)` to solve the following problem:\nCompares the area of a square with side length 'a' to the area of a rectangle with sides 'b' and 'c'.\n The function takes three arguments, a, b, and c, which are positive integers representing the side length of the square and the sides of the rectangle, respectively.\n It returns a string indicating whose shape has the greater area: \"Alice\" if the square's area is larger, and \"Bob\" if the rectangle's area is larger.\n\n Examples:\n >>> compare_area(5, 4, 6)\n \"Alice\"\n >>> compare_area(7, 5, 10)\n \"Bob\"", "level": "easy"}
{"task_id": "Ruby/45", "prompt": "# Finds M positive integers whose sum is N, such that their product is maximized.\n# The function returns an array of these integers in lexicographically smallest order.\n#\n# Args:\n#   n: A positive integer representing the sum of the integers to find.\n#   m: A positive integer representing the number of integers to find.\n#\n# Returns:\n#   An array of integers that are the lexicographically smallest set of integers\n#   whose sum is N and whose product is maximized.\n#\n# Examples:\n#   >>> max_product_partition(6, 3)\n#   [2, 2, 2]\n#   >>> max_product_partition(8, 3)\n#   [2, 3, 3]\n\n\ndef max_product_partition(n, m)", "canonical_solution": "    # The base number each part should be at least.\n    base = n / m\n    \n    # The remainder when N is not perfectly divisible by M, \n    # indicating how many numbers should be base + 1\n    remainder = n % m\n    \n    # Initialize the result array with base values\n    result = [base] * (m - remainder)\n    \n    # Add the necessary numbers to make the sum equal to N\n    result += [base + 1] * remainder\n    \n    result\n  end", "test": "raise 'Test failed' unless max_product_partition(6, 3) == [2, 2, 2]\nraise 'Test failed' unless max_product_partition(8, 3) == [2, 3, 3]\nraise 'Test failed' unless max_product_partition(10, 2) == [5, 5]\nraise 'Test failed' unless max_product_partition(7, 3) == [2, 2, 3]\nraise 'Test failed' unless max_product_partition(20, 5) == [4, 4, 4, 4, 4]", "entry_point": "max_product_partition", "signature": "def max_product_partition(n, m)", "docstring": "Finds M positive integers whose sum is N, such that their product is maximized.\n The function returns an array of these integers in lexicographically smallest order.\n\n Args:\n   n: A positive integer representing the sum of the integers to find.\n   m: A positive integer representing the number of integers to find.\n\n Returns:\n   An array of integers that are the lexicographically smallest set of integers\n   whose sum is N and whose product is maximized.\n\n Examples:\n   >>> max_product_partition(6, 3)\n   [2, 2, 2]\n   >>> max_product_partition(8, 3)\n   [2, 3, 3]", "instruction": "Write a ruby function `def max_product_partition(n, m)` to solve the following problem:\nFinds M positive integers whose sum is N, such that their product is maximized.\n The function returns an array of these integers in lexicographically smallest order.\n\n Args:\n   n: A positive integer representing the sum of the integers to find.\n   m: A positive integer representing the number of integers to find.\n\n Returns:\n   An array of integers that are the lexicographically smallest set of integers\n   whose sum is N and whose product is maximized.\n\n Examples:\n   >>> max_product_partition(6, 3)\n   [2, 2, 2]\n   >>> max_product_partition(8, 3)\n   [2, 3, 3]", "level": "middle"}
{"task_id": "Ruby/46", "prompt": "# Counts the number of characters in a given title, excluding spaces and newline characters.\n# The function takes a single argument, title, which is a string representing the title of an essay.\n# It returns the count of characters in the title, excluding any spaces and newline characters.\n#\n# Examples:\n# >>> count_chars_in_title(\"234\")\n# 3\n# >>> count_chars_in_title(\"Ca 45\")\n# 4\n# >>> count_chars_in_title(\"Hello World\\n\")\n# 10\n\ndef count_chars_in_title(title)", "canonical_solution": "    title.count(\"^ \\n\")\n  end", "test": "raise 'Test failed' unless count_chars_in_title(\"234\") == 3\nraise 'Test failed' unless count_chars_in_title(\"Ca 45\") == 4\nraise 'Test failed' unless count_chars_in_title(\"Hello World\\n\") == 10\nraise 'Test failed' unless count_chars_in_title(\"Ruby Programming 101 \") == 18\nraise 'Test failed' unless count_chars_in_title(\"\\nNew Line\\n\") == 7", "entry_point": "count_chars_in_title", "signature": "def count_chars_in_title(title)", "docstring": "Counts the number of characters in a given title, excluding spaces and newline characters.\n The function takes a single argument, title, which is a string representing the title of an essay.\n It returns the count of characters in the title, excluding any spaces and newline characters.\n\n Examples:\n >>> count_chars_in_title(\"234\")\n 3\n >>> count_chars_in_title(\"Ca 45\")\n 4\n >>> count_chars_in_title(\"Hello World\\n\")\n 10", "instruction": "Write a ruby function `def count_chars_in_title(title)` to solve the following problem:\nCounts the number of characters in a given title, excluding spaces and newline characters.\n The function takes a single argument, title, which is a string representing the title of an essay.\n It returns the count of characters in the title, excluding any spaces and newline characters.\n\n Examples:\n >>> count_chars_in_title(\"234\")\n 3\n >>> count_chars_in_title(\"Ca 45\")\n 4\n >>> count_chars_in_title(\"Hello World\\n\")\n 10", "level": "easy"}
{"task_id": "Ruby/47", "prompt": "# Counts the number of students who have enrolled in both courses A and B.\n# This function takes four arguments: n and m are the number of students enrolled in courses A and B, respectively.\n# a_n is an array of student IDs enrolled in course A, and b_m is an array of student IDs enrolled in course B.\n# The function returns the count of students who have enrolled in both courses.\n#\n# Example:\n# >>> count_common_students(5, 5, [1, 2, 3, 4, 5], [1, 3, 4, 5, 6])\n# 4\n# >>> count_common_students(3, 2, [1, 2, 3], [2, 4])\n# 1\ndef count_common_students(n, m, a_n, b_m)", "canonical_solution": "    # Using the '&' operator to find the intersection of the two arrays\n    common_students = a_n & b_m\n    \n    # Returning the count of common students\n    common_students.count\n  end", "test": "raise 'Test failed' unless count_common_students(5, 5, [1, 2, 3, 4, 5], [1, 3, 4, 5, 6]) == 4\nraise 'Test failed' unless count_common_students(3, 2, [1, 2, 3], [2, 4]) == 1\nraise 'Test failed' unless count_common_students(4, 4, [7, 8, 9, 10], [10, 11, 12, 13]) == 1\nraise 'Test failed' unless count_common_students(2, 3, [14, 15], [15, 16, 17]) == 1\nraise 'Test failed' unless count_common_students(6, 5, [18, 19, 20, 21, 22, 23], [20, 21, 24, 25, 26]) == 2", "entry_point": "count_common_students", "signature": "def count_common_students(n, m, a_n, b_m)", "docstring": "Counts the number of students who have enrolled in both courses A and B.\n This function takes four arguments: n and m are the number of students enrolled in courses A and B, respectively.\n a_n is an array of student IDs enrolled in course A, and b_m is an array of student IDs enrolled in course B.\n The function returns the count of students who have enrolled in both courses.\n\n Example:\n >>> count_common_students(5, 5, [1, 2, 3, 4, 5], [1, 3, 4, 5, 6])\n 4\n >>> count_common_students(3, 2, [1, 2, 3], [2, 4])\n 1", "instruction": "Write a ruby function `def count_common_students(n, m, a_n, b_m)` to solve the following problem:\nCounts the number of students who have enrolled in both courses A and B.\n This function takes four arguments: n and m are the number of students enrolled in courses A and B, respectively.\n a_n is an array of student IDs enrolled in course A, and b_m is an array of student IDs enrolled in course B.\n The function returns the count of students who have enrolled in both courses.\n\n Example:\n >>> count_common_students(5, 5, [1, 2, 3, 4, 5], [1, 3, 4, 5, 6])\n 4\n >>> count_common_students(3, 2, [1, 2, 3], [2, 4])\n 1", "level": "easy"}
{"task_id": "Ruby/48", "prompt": "# Calculates the total earnings of Deliv-e-droid based on the number of successfully delivered\n# and failed deliveries. For each successful delivery, Deliv-e-droid earns 50 units of money,\n# and for each failed delivery, it loses 10 units. If the number of successful deliveries is\n# greater than the number of failed ones, Deliv-e-droid receives a bonus of 500 units.\n#\n# Arguments:\n# - delivered: Integer representing the number of successfully delivered packages (0 <= delivered <= 100).\n# - failed: Integer representing the number of failed deliveries (0 <= failed <= 100).\n#\n# Returns:\n# - Integer: The total earnings of Deliv-e-droid, which can be negative if the losses outweigh the gains.\n#\n# Examples:\n# >>> calculate_droid_earnings(5, 2)\n# 730\n# >>> calculate_droid_earnings(0, 10)\n# -100\n\ndef calculate_droid_earnings(delivered, failed)", "canonical_solution": "    earnings = delivered * 50 - failed * 10\n    earnings += 500 if delivered > failed\n    earnings\n  end", "test": "raise 'Test failed' unless calculate_droid_earnings(5, 2) == 730\nraise 'Test failed' unless calculate_droid_earnings(0, 10) == -100\nraise 'Test failed' unless calculate_droid_earnings(10, 0) == 1000\nraise 'Test failed' unless calculate_droid_earnings(3, 5) == 100\nraise 'Test failed' unless calculate_droid_earnings(20, 20) == 800", "entry_point": "calculate_droid_earnings", "signature": "def calculate_droid_earnings(delivered, failed)", "docstring": "Calculates the total earnings of Deliv-e-droid based on the number of successfully delivered\n and failed deliveries. For each successful delivery, Deliv-e-droid earns 50 units of money,\n and for each failed delivery, it loses 10 units. If the number of successful deliveries is\n greater than the number of failed ones, Deliv-e-droid receives a bonus of 500 units.\n\n Arguments:\n - delivered: Integer representing the number of successfully delivered packages (0 <= delivered <= 100).\n - failed: Integer representing the number of failed deliveries (0 <= failed <= 100).\n\n Returns:\n - Integer: The total earnings of Deliv-e-droid, which can be negative if the losses outweigh the gains.\n\n Examples:\n >>> calculate_droid_earnings(5, 2)\n 730\n >>> calculate_droid_earnings(0, 10)\n -100", "instruction": "Write a ruby function `def calculate_droid_earnings(delivered, failed)` to solve the following problem:\nCalculates the total earnings of Deliv-e-droid based on the number of successfully delivered\n and failed deliveries. For each successful delivery, Deliv-e-droid earns 50 units of money,\n and for each failed delivery, it loses 10 units. If the number of successful deliveries is\n greater than the number of failed ones, Deliv-e-droid receives a bonus of 500 units.\n\n Arguments:\n - delivered: Integer representing the number of successfully delivered packages (0 <= delivered <= 100).\n - failed: Integer representing the number of failed deliveries (0 <= failed <= 100).\n\n Returns:\n - Integer: The total earnings of Deliv-e-droid, which can be negative if the losses outweigh the gains.\n\n Examples:\n >>> calculate_droid_earnings(5, 2)\n 730\n >>> calculate_droid_earnings(0, 10)\n -100", "level": "easy"}
{"task_id": "Ruby/49", "prompt": "# Finds the missing (broken) and duplicate ID in a sequence of ticket IDs.\n# The function takes a nested array (array of arrays) where each sub-array\n# contains ticket IDs for a particular batch. It returns an array with two elements:\n# the first is the missing ID, and the second is the duplicate ID.\n#\n# Example:\n# >>> find_missing_and_duplicate_ids([[5, 6, 8, 11, 9], [10, 12, 9]])\n# [7, 9]\n# >>> find_missing_and_duplicate_ids([[1, 2, 4], [3, 5, 5]])\n# [6, 5]\n\ndef find_missing_and_duplicate_ids(ids)", "canonical_solution": "    all_ids = ids.flatten.sort\n    missing_id = nil\n    duplicate_id = nil\n    expected_sum = (all_ids.first..all_ids.last).sum\n    actual_sum = all_ids.sum\n  \n    all_ids.each_with_index do |id, index|\n      if index > 0 && id == all_ids[index - 1]\n        duplicate_id = id\n      end\n    end\n  \n    missing_id = expected_sum - actual_sum + duplicate_id\n    [missing_id, duplicate_id]\n  end", "test": "raise 'Test failed' unless find_missing_and_duplicate_ids([[5, 6, 8, 11, 9], [10, 12, 9]]) == [7, 9]\nraise 'Test failed' unless find_missing_and_duplicate_ids([[1, 2, 4], [3, 5, 5, 7]]) == [6, 5]\nraise 'Test failed' unless find_missing_and_duplicate_ids([[20, 21, 23], [22, 24, 24, 26]]) == [25, 24]\nraise 'Test failed' unless find_missing_and_duplicate_ids([[100, 102, 106], [101, 103, 103, 105]]) == [104, 103]", "entry_point": "find_missing_and_duplicate_ids", "signature": "def find_missing_and_duplicate_ids(ids)", "docstring": "Finds the missing (broken) and duplicate ID in a sequence of ticket IDs.\n The function takes a nested array (array of arrays) where each sub-array\n contains ticket IDs for a particular batch. It returns an array with two elements:\n the first is the missing ID, and the second is the duplicate ID.\n\n Example:\n >>> find_missing_and_duplicate_ids([[5, 6, 8, 11, 9], [10, 12, 9]])\n [7, 9]\n >>> find_missing_and_duplicate_ids([[1, 2, 4], [3, 5, 5]])\n [6, 5]", "instruction": "Write a ruby function `def find_missing_and_duplicate_ids(ids)` to solve the following problem:\nFinds the missing (broken) and duplicate ID in a sequence of ticket IDs.\n The function takes a nested array (array of arrays) where each sub-array\n contains ticket IDs for a particular batch. It returns an array with two elements:\n the first is the missing ID, and the second is the duplicate ID.\n\n Example:\n >>> find_missing_and_duplicate_ids([[5, 6, 8, 11, 9], [10, 12, 9]])\n [7, 9]\n >>> find_missing_and_duplicate_ids([[1, 2, 4], [3, 5, 5]])\n [6, 5]", "level": "middle"}
{"task_id": "Ruby/50", "prompt": "# Counts the number of digits, lowercase letters, and uppercase letters in a given string.\n# The function takes a single argument, s, which is a string of length 8,\n# and returns an array with three integers representing the count of digits,\n# lowercase letters, and uppercase letters in the string, respectively.\n#\n# Examples:\n# >>> count_chars_types(\"yLOI2022\")\n# [4, 1, 3]\n# >>> count_chars_types(\"IAKIOIOI\")\n# [0, 0, 8]\n# >>> count_chars_types(\"1n2s0e1s\")\n# [4, 4, 0]\ndef count_chars_types(s)", "canonical_solution": "    digits_count = s.count(\"0-9\")\n    lowercase_count = s.count(\"a-z\")\n    uppercase_count = s.count(\"A-Z\")\n    [digits_count, lowercase_count, uppercase_count]\n  end", "test": "raise 'Test failed' unless count_chars_types(\"yLOI2022\") == [4, 1, 3]\nraise 'Test failed' unless count_chars_types(\"IAKIOIOI\") == [0, 0, 8]\nraise 'Test failed' unless count_chars_types(\"1n2s0e1s\") == [4, 4, 0]\nraise 'Test failed' unless count_chars_types(\"12345678\") == [8, 0, 0]\nraise 'Test failed' unless count_chars_types(\"abcdefgh\") == [0, 8, 0]", "entry_point": "count_chars_types", "signature": "def count_chars_types(s)", "docstring": "Counts the number of digits, lowercase letters, and uppercase letters in a given string.\n The function takes a single argument, s, which is a string of length 8,\n and returns an array with three integers representing the count of digits,\n lowercase letters, and uppercase letters in the string, respectively.\n\n Examples:\n >>> count_chars_types(\"yLOI2022\")\n [4, 1, 3]\n >>> count_chars_types(\"IAKIOIOI\")\n [0, 0, 8]\n >>> count_chars_types(\"1n2s0e1s\")\n [4, 4, 0]", "instruction": "Write a ruby function `def count_chars_types(s)` to solve the following problem:\nCounts the number of digits, lowercase letters, and uppercase letters in a given string.\n The function takes a single argument, s, which is a string of length 8,\n and returns an array with three integers representing the count of digits,\n lowercase letters, and uppercase letters in the string, respectively.\n\n Examples:\n >>> count_chars_types(\"yLOI2022\")\n [4, 1, 3]\n >>> count_chars_types(\"IAKIOIOI\")\n [0, 0, 8]\n >>> count_chars_types(\"1n2s0e1s\")\n [4, 4, 0]", "level": "easy"}
