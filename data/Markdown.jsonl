{"task_id": "Markdown/1", "prompt": "Create a first level markdown title with the content of Heading level 1", "instruction": "Create a first level markdown title with the content of Heading level 1", "level": "easy"}
{"task_id": "Markdown/2", "prompt": "Please generate a Markdown code based on the following description: Create two paragraphs, which are I really like using Markdown. and I think I'll use it to format all of my documents from now on", "instruction": "Please generate a Markdown code based on the following description: Create two paragraphs, which are I really like using Markdown. and I think I'll use it to format all of my documents from now on", "level": "easy"}
{"task_id": "Markdown/3", "prompt": "Please generate a markdown code based on the following description: Print a paragraph of text and bold the specified parts of the text. The text to be printed is I just love bold text The bold text is the part that needs to be bolded", "instruction": "Please generate a markdown code based on the following description: Print a paragraph of text and bold the specified parts of the text. The text to be printed is I just love bold text The bold text is the part that needs to be bolded", "level": "easy"}
{"task_id": "Markdown/4", "prompt": "Please generate a markdown code based on the following description: Print a paragraph of text and set part of it in bold, part in italics, and part in both bold and italics. The text to be printed is as follows: One red teacher marked, while LLMs are being able to iteratively improve on produced source code, which is a risk The part that needs to be set in bold is the red teamer, the part that needs to be set in italics is the source code, and the part that needs to be set in both bold and italics is iteratively improved", "instruction": "Please generate a markdown code based on the following description: Print a paragraph of text and set part of it in bold, part in italics, and part in both bold and italics. The text to be printed is as follows: One red teacher marked, while LLMs are being able to iteratively improve on produced source code, which is a risk The part that needs to be set in bold is the red teamer, the part that needs to be set in italics is the source code, and the part that needs to be set in both bold and italics is iteratively improved", "level": "middle"}
{"task_id": "Markdown/5", "prompt": "Please generate a markdown code based on the following description: Create a reference block with Dorothy followed her through many of the beautiful rooms in her castle The Witch batch her clean the dots and tickets and sweep the floor and keep the fire fed with wood Implement nested references", "instruction": "Please generate a markdown code based on the following description: Create a reference block with Dorothy followed her through many of the beautiful rooms in her castle The Witch batch her clean the dots and tickets and sweep the floor and keep the fire fed with wood Implement nested references", "level": "hard"}
{"task_id": "Markdown/6", "prompt": "Please generate a markdown code based on the following description: Create a reference block with the content of The quarterly results look great!\nRevenue was off the chart\nProfits were higher than ever. The quarterly results look great! needs to be presented in the form of a three-level title in the reference block,\nRevenue was off the chart\nProfits were higher than ever. need to be presented in an unordered list form in the reference block", "instruction": "Please generate a markdown code based on the following description: Create a reference block with the content of The quarterly results look great!\nRevenue was off the chart\nProfits were higher than ever. The quarterly results look great! needs to be presented in the form of a three-level title in the reference block,\nRevenue was off the chart\nProfits were higher than ever. need to be presented in an unordered list form in the reference block", "level": "middle"}
{"task_id": "Markdown/7", "prompt": "Please generate a markdown code based on the following description: Create a sequential list, where the contents of the ordered list are\nFirst item\nSecond item\nThird item\nFourth item", "instruction": "Please generate a markdown code based on the following description: Create a sequential list, where the contents of the ordered list are\nFirst item\nSecond item\nThird item\nFourth item", "level": "easy"}
{"task_id": "Markdown/8", "prompt": "Please generate a markdown code based on the following description: Create an unordered list, where the contents of the unordered list are\nFirst item\nSecond item\nThird item\nFourth item", "instruction": "Please generate a markdown code based on the following description: Create an unordered list, where the contents of the unordered list are\nFirst item\nSecond item\nThird item\nFourth item", "level": "easy"}
{"task_id": "Markdown/9", "prompt": "Please generate a markdown code based on the following description: Create a sequential list, where the contents of the unordered list are\nFirst item\nSecond item\nThird item\nAt the same time, it is required to insert a paragraph in the middle of the sequence table and ensure the continuity of the list. The inserted content is\nI need to add another paragraph below the second list item\nInsert between Second item and Third item", "instruction": "Please generate a markdown code based on the following description: Create a sequential list, where the contents of the unordered list are\nFirst item\nSecond item\nThird item\nAt the same time, it is required to insert a paragraph in the middle of the sequence table and ensure the continuity of the list. The inserted content is\nI need to add another paragraph below the second list item\nInsert between Second item and Third item", "level": "middle"}
{"task_id": "Markdown/10", "prompt": "Please generate a markdown code based on the following description: represent the following paragraph as code\nUse `code` in your Markdown file", "instruction": "Please generate a markdown code based on the following description: represent the following paragraph as code\nUse `code` in your Markdown file", "level": "easy"}
{"task_id": "Markdown/11", "prompt": "Please generate a markdown code based on the following description: Create a fence code block, which contains the following content:\n{\n\"FirstName\": \"John\",\n\"LastName\": \"Smith\",\n\"Age\": 25\n}", "instruction": "Please generate a markdown code based on the following description: Create a fence code block, which contains the following content:\n{\n\"FirstName\": \"John\",\n\"LastName\": \"Smith\",\n\"Age\": 25\n}", "level": "easy"}
{"task_id": "Markdown/12", "prompt": "Please generate a markdown code based on the following description: Create a link with the hyperlink address https://markdown.com.cn\nThe name displayed in the hyperlink is Markdown", "instruction": "Please generate a markdown code based on the following description: Create a link with the hyperlink address https://markdown.com.cn\nThe name displayed in the hyperlink is Markdown", "level": "easy"}
{"task_id": "Markdown/13", "prompt": "Please generate a markdown code based on the following description: Create an image with the image link as/sets/img/philly magic garden. jpg\nThe title of the image is Magic Gardens\nImage alt is Picture", "instruction": "Please generate a markdown code based on the following description: Create an image with the image link as/sets/img/philly magic garden. jpg\nThe title of the image is Magic Gardens\nImage alt is Picture", "level": "easy"}
{"task_id": "Markdown/14", "prompt": "Please generate a markdown code based on the following description: Create a task list with the content of the list as\nWrite the press release\nUpdate the website\nContact the media", "instruction": "Please generate a markdown code based on the following description: Create a task list with the content of the list as\nWrite the press release\nUpdate the website\nContact the media", "level": "easy"}
{"task_id": "Markdown/15", "prompt": "Please generate a markdown code based on the following description: Create a fence code block which contains the following content:\n{\n\"FirstName\": \"John\",\n\"LastName\": \"Smith\",\n\"Age\": 25\n}\nAnd achieve highlighting of JSON syntax", "instruction": "Please generate a markdown code based on the following description: Create a fence code block which contains the following content:\n{\n\"FirstName\": \"John\",\n\"LastName\": \"Smith\",\n\"Age\": 25\n}\nAnd achieve highlighting of JSON syntax", "level": "easy"}
{"task_id": "Markdown/16", "prompt": "Generate Markdown code according to the following requirements:Horizontal Rule: The document starts with a horizontal rule, created using three hyphens (---).\nFront Matter (YAML): Following the horizontal rule is a block of YAML front matter. YAML front matter is used to specify metadata for the document. In this context, it likely configures the settings or properties for an issue template on a platform like GitHub. The front matter is enclosed between two horizontal rule markers (---) at the start and end. It includes:\nname: Specifies the name of the template, set to \"\u6f0f\u6d1e\u53cd\u9988\" (translated as \"Bug Feedback\").\nabout: Provides a description of the template's purpose, \"\u62a5\u9519\u6216\u6f0f\u6d1e\u8bf7\u4f7f\u7528\u8fd9\u4e2a\u6a21\u677f\u521b\u5efa\" (translated as \"Please use this template to report errors or bugs\").\ntitle: Sets a default title for issues created with this template, prefixed with \"[BUG]\".\nlabels: Assigns a default label, 'bug', to the issue.\nassignees: Leaves the assignees field empty, indicating no default assignee is set.\nHorizontal Rule: The document ends with another horizontal rule, identical to the one at the start, marking the end of the YAML front matter.", "level": "easy", "instruction": "Generate Markdown code according to the following requirements:Horizontal Rule: The document starts with a horizontal rule, created using three hyphens (---).\nFront Matter (YAML): Following the horizontal rule is a block of YAML front matter. YAML front matter is used to specify metadata for the document. In this context, it likely configures the settings or properties for an issue template on a platform like GitHub. The front matter is enclosed between two horizontal rule markers (---) at the start and end. It includes:\nname: Specifies the name of the template, set to \"\u6f0f\u6d1e\u53cd\u9988\" (translated as \"Bug Feedback\").\nabout: Provides a description of the template's purpose, \"\u62a5\u9519\u6216\u6f0f\u6d1e\u8bf7\u4f7f\u7528\u8fd9\u4e2a\u6a21\u677f\u521b\u5efa\" (translated as \"Please use this template to report errors or bugs\").\ntitle: Sets a default title for issues created with this template, prefixed with \"[BUG]\".\nlabels: Assigns a default label, 'bug', to the issue.\nassignees: Leaves the assignees field empty, indicating no default assignee is set.\nHorizontal Rule: The document ends with another horizontal rule, identical to the one at the start, marking the end of the YAML front matter."}
{"task_id": "Markdown/17", "prompt": "Generate Markdown code according to the following requirements:\nTo regenerate the provided markdown accurately, the description would be as follows:\nStart with an instruction to \"Use the\" followed by a hyperlink. The hyperlink text is \"GitLens: Welcome (Quick Setup)\".\nThe hyperlink is not a standard URL but a command. The command embedded in the hyperlink is command:gitlens.showWelcomePage?%22quick-setup%22. This suggests that the markdown is intended for a specific application or interface that can interpret commands embedded in hyperlinks.\nFollow the hyperlink text with \"command from the\" and then another hyperlink. The second hyperlink text is \"Command Palette\".\nSimilar to the first hyperlink, the second hyperlink also contains a command instead of a standard URL. The command for the second hyperlink is command:workbench.action.quickOpen?%22>GitLens%3A%20Welcome%22.\nConclude with \"to open it.\" indicating that following these instructions will lead to opening something, presumably the GitLens Welcome or Quick Setup page.", "level": "easy", "instruction": "Generate Markdown code according to the following requirements:\nTo regenerate the provided markdown accurately, the description would be as follows:\nStart with an instruction to \"Use the\" followed by a hyperlink. The hyperlink text is \"GitLens: Welcome (Quick Setup)\".\nThe hyperlink is not a standard URL but a command. The command embedded in the hyperlink is command:gitlens.showWelcomePage?%22quick-setup%22. This suggests that the markdown is intended for a specific application or interface that can interpret commands embedded in hyperlinks.\nFollow the hyperlink text with \"command from the\" and then another hyperlink. The second hyperlink text is \"Command Palette\".\nSimilar to the first hyperlink, the second hyperlink also contains a command instead of a standard URL. The command for the second hyperlink is command:workbench.action.quickOpen?%22>GitLens%3A%20Welcome%22.\nConclude with \"to open it.\" indicating that following these instructions will lead to opening something, presumably the GitLens Welcome or Quick Setup page."}
{"task_id": "Markdown/18", "prompt": "Generate Markdown code according to the following requirements:\nTo accurately regenerate the provided Markdown content, focus on the structure and formatting elements as described below:\nThe document begins with a statement about GitLens adding Git authorship CodeLens to specific parts of a file. This statement is straightforward and not formatted for emphasis.\nThe phrase \"recent change\" is emphasized using double asterisks (**) for bold formatting, indicating it's a key term or feature within the context.\nFollowing the bolded term, there is a description that explains the functionality of the \"recent change\" CodeLens, including its capability to show the author and date of the most recent commit for a code block or file. This description is plain text and flows directly after the bolded term without any special formatting or line breaks.\nAnother key term, \"authors,\" is also emphasized with double asterisks (**) for bold formatting, similar to \"recent change,\" signifying another important feature or concept.\nThe description of the \"authors\" CodeLens feature follows the bolded term, explaining that it shows the number of authors of the code block or file and highlights the most prominent author if there are multiple. This explanation is also in plain text and continues in the same paragraph without special formatting or line breaks.", "level": "hard", "instruction": "Generate Markdown code according to the following requirements:\nTo accurately regenerate the provided Markdown content, focus on the structure and formatting elements as described below:\nThe document begins with a statement about GitLens adding Git authorship CodeLens to specific parts of a file. This statement is straightforward and not formatted for emphasis.\nThe phrase \"recent change\" is emphasized using double asterisks (**) for bold formatting, indicating it's a key term or feature within the context.\nFollowing the bolded term, there is a description that explains the functionality of the \"recent change\" CodeLens, including its capability to show the author and date of the most recent commit for a code block or file. This description is plain text and flows directly after the bolded term without any special formatting or line breaks.\nAnother key term, \"authors,\" is also emphasized with double asterisks (**) for bold formatting, similar to \"recent change,\" signifying another important feature or concept.\nThe description of the \"authors\" CodeLens feature follows the bolded term, explaining that it shows the number of authors of the code block or file and highlights the most prominent author if there are multiple. This explanation is also in plain text and continues in the same paragraph without special formatting or line breaks."}
{"task_id": "Markdown/19", "prompt": "Generate Markdown code according to the following requirements: The content consists of a heading level 2, indicated by ## at the beginning of the line. The text for the heading is \"GitLens+ Features\".", "level": "easy", "instruction": "Generate Markdown code according to the following requirements: The content consists of a heading level 2, indicated by ## at the beginning of the line. The text for the heading is \"GitLens+ Features\"."}
{"task_id": "Markdown/20", "prompt": "Generate Markdown code according to the following requirements:The document starts with a descriptive sentence introducing the context or action, which is \"To use this directly from your terminal, e.g. when running git rebase -i,\", where git rebase -i is enclosed in backticks (`) to indicate inline code formatting. This formatting is typically used to distinguish commands or code within a text.\nAfter the introductory sentence, there's a line break followed by a bulleted list item indicated by a hyphen (-). The item text is \"set VS Code as your default Git editor\".\nNested within the bulleted list item, indented further from the parent item, there's a sub-item also indicated by a hyphen (-). This sub-item contains a specific command to be executed, given as git config --global core.editor \"code --wait\", where the entire command is enclosed in backticks (`) to apply inline code formatting, making it stand out as a command or code snippet.", "level": "hard", "instruction": "Generate Markdown code according to the following requirements:The document starts with a descriptive sentence introducing the context or action, which is \"To use this directly from your terminal, e.g. when running git rebase -i,\", where git rebase -i is enclosed in backticks (`) to indicate inline code formatting. This formatting is typically used to distinguish commands or code within a text.\nAfter the introductory sentence, there's a line break followed by a bulleted list item indicated by a hyphen (-). The item text is \"set VS Code as your default Git editor\".\nNested within the bulleted list item, indented further from the parent item, there's a sub-item also indicated by a hyphen (-). This sub-item contains a specific command to be executed, given as git config --global core.editor \"code --wait\", where the entire command is enclosed in backticks (`) to apply inline code formatting, making it stand out as a command or code snippet."}
{"task_id": "Markdown/21", "prompt": "Generate Markdown code according to the following requirements:content consists of a blockquote, indicated by the > symbol at the beginning of the line. Within this blockquote, there's instructional text that advises on how to use the Insiders edition of VS Code, specifically mentioning to replace code with code-insiders. Both code and code-insiders are enclosed in backticks (`) to apply inline code formatting, which highlights these terms as specific commands or code snippets within the text. ", "level": "easy", "instruction": "Generate Markdown code according to the following requirements:content consists of a blockquote, indicated by the > symbol at the beginning of the line. Within this blockquote, there's instructional text that advises on how to use the Insiders edition of VS Code, specifically mentioning to replace code with code-insiders. Both code and code-insiders are enclosed in backticks (`) to apply inline code formatting, which highlights these terms as specific commands or code snippets within the text. "}
{"task_id": "Markdown/22", "prompt": "Generate Markdown code according to the following requirements:content is a mix of explanatory text and inline code formatting. The format specifics are as follows:\nThe text begins with a statement regarding the std::vector in the C++ standard library, describing it as a dynamic array that provides various methods for inserting elements.\nThe term std::vector is highlighted with inline code formatting, indicated by backticks (`), distinguishing it as a code element within the text.\nThe explanation continues\uff0cdetailing how to insert elements from the beginning using the std::vector's insert function combined with iterators.\nSimilarly, the terms insert and the second instance of std::vector within the explanation are also enclosed in backticks (`), applying inline code formatting to these terms as well.", "level": "hard", "instruction": "Generate Markdown code according to the following requirements:content is a mix of explanatory text and inline code formatting. The format specifics are as follows:\nThe text begins with a statement regarding the std::vector in the C++ standard library, describing it as a dynamic array that provides various methods for inserting elements.\nThe term std::vector is highlighted with inline code formatting, indicated by backticks (`), distinguishing it as a code element within the text.\nThe explanation continues\uff0cdetailing how to insert elements from the beginning using the std::vector's insert function combined with iterators.\nSimilarly, the terms insert and the second instance of std::vector within the explanation are also enclosed in backticks (`), applying inline code formatting to these terms as well."}
{"task_id": "Markdown/23", "prompt": "Generate Markdown code according to the following requirements:The first line uses a single hash symbol (#) to create a level 1 heading, which is the highest level of heading and typically used for main titles. The text for this heading is \"streams WG Meeting 2015-01-30\", indicating the title or main subject of the document, possibly a meeting related to the streams working group dated January 30, 2015.\nThe second section begins with a level 2 heading, indicated by two hash symbols (##). The text for this heading is \"Links\", which suggests this section is intended to list or reference links related to the document's subject. This heading indicates a subsection or a specific category within the document, typically used for organizing content into thematic areas.", "level": "easy", "instruction": "Generate Markdown code according to the following requirements:The first line uses a single hash symbol (#) to create a level 1 heading, which is the highest level of heading and typically used for main titles. The text for this heading is \"streams WG Meeting 2015-01-30\", indicating the title or main subject of the document, possibly a meeting related to the streams working group dated January 30, 2015.\nThe second section begins with a level 2 heading, indicated by two hash symbols (##). The text for this heading is \"Links\", which suggests this section is intended to list or reference links related to the document's subject. This heading indicates a subsection or a specific category within the document, typically used for organizing content into thematic areas."}
{"task_id": "Markdown/24", "prompt": "Generate Markdown code according to the following requirements:content is a bulleted list, with each item containing bold text followed by a URL. The format specifics are:\nEach list item starts with an asterisk (*), indicating a bullet point in Markdown. This format is used to create unordered lists.\nWithin each list item, there is a segment of text that is bolded, achieved by wrapping the text with double asterisks (**). The bold text serves as a label or title for the URL that follows, providing a description of the link's content. The labels are \"Google Hangouts Video\", \"GitHub Issue\", and \"Original Minutes Google Doc\".\nFollowing the bold text in each item, there is a URL presented in plain text, not hyperlink markdown format. These URLs are for a YouTube video, a GitHub issue, and a Google Doc, respectively. They are provided directly after the descriptions without any additional Markdown formatting to turn them into clickable links, relying on the Markdown viewer's capability to automatically linkify URLs.", "level": "easy", "instruction": "Generate Markdown code according to the following requirements:content is a bulleted list, with each item containing bold text followed by a URL. The format specifics are:\nEach list item starts with an asterisk (*), indicating a bullet point in Markdown. This format is used to create unordered lists.\nWithin each list item, there is a segment of text that is bolded, achieved by wrapping the text with double asterisks (**). The bold text serves as a label or title for the URL that follows, providing a description of the link's content. The labels are \"Google Hangouts Video\", \"GitHub Issue\", and \"Original Minutes Google Doc\".\nFollowing the bold text in each item, there is a URL presented in plain text, not hyperlink markdown format. These URLs are for a YouTube video, a GitHub issue, and a Google Doc, respectively. They are provided directly after the descriptions without any additional Markdown formatting to turn them into clickable links, relying on the Markdown viewer's capability to automatically linkify URLs."}
{"task_id": "Markdown/25", "prompt": "Generate Markdown code according to the following requirements:content consists of an unordered list, each item of which includes a topic or action followed by a linked issue number. The specifics of the format are as follows:\nThe list is initiated with asterisks (*), which are used to mark each item in an unordered list in Markdown. This format creates a bulleted list to organize the items visually.\nEach list item begins with a descriptive phrase or action item, such as \"adopt a charter\", \"release and versioning strategy\", \"simpler stream creation\", and \"proposal: deprecate implicit flowing of streams\". These phrases describe the topic or action proposed or discussed, providing a clear and concise summary of each item's content.\nFollowing the descriptive phrase in each list item, there is an issue number encapsulated in square brackets ([]), which is directly linked to a URL enclosed in parentheses (()). This syntax creates a clickable hyperlink with the issue number as the link text, leading to the corresponding issue on GitHub. The issue numbers and URLs are specific to items in the iojs/readable-stream repository on GitHub, such as [#105](https://github.com/iojs/readable-stream/issues/105).", "level": "middle", "instruction": "Generate Markdown code according to the following requirements:content consists of an unordered list, each item of which includes a topic or action followed by a linked issue number. The specifics of the format are as follows:\nThe list is initiated with asterisks (*), which are used to mark each item in an unordered list in Markdown. This format creates a bulleted list to organize the items visually.\nEach list item begins with a descriptive phrase or action item, such as \"adopt a charter\", \"release and versioning strategy\", \"simpler stream creation\", and \"proposal: deprecate implicit flowing of streams\". These phrases describe the topic or action proposed or discussed, providing a clear and concise summary of each item's content.\nFollowing the descriptive phrase in each list item, there is an issue number encapsulated in square brackets ([]), which is directly linked to a URL enclosed in parentheses (()). This syntax creates a clickable hyperlink with the issue number as the link text, leading to the corresponding issue on GitHub. The issue numbers and URLs are specific to items in the iojs/readable-stream repository on GitHub, such as [#105](https://github.com/iojs/readable-stream/issues/105)."}
{"task_id": "Markdown/26", "prompt": "Generate Markdown code according to the following requirements:content begins with a level 3 heading, followed by an unordered list and a concluding line of text. The format specifics are as follows:\nLevel 3 Heading: The document starts with a level 3 heading, indicated by three hash symbols (###). The heading is a question, \"What versioning scheme should be adopted?\", serving as a topic or section title.\nUnordered List: Immediately following the heading, there is an unordered list, each item of which begins with an asterisk (*). This list includes:\nContributions or statements attributed to specific individuals or groups. Each item starts with a name or identifier (e.g., \"group:\", \"domenic+group:\", \"mikeal:\", \"mikeal+domenic:\"), followed by a statement or opinion related to the versioning scheme topic.\nThese statements vary in content, discussing versioning preferences and strategies, such as adopting a specific version number, pulling in patches, suggesting versioning practices for io.js, and coordinating with the Technical Committee (TC) regarding changes.\nConcluding Line of Text: After the list, there is a line of text, \"simpler stream creation\", which seems to be a statement or topic on its own. This line is not part of the unordered list and does not have any specific Markdown formatting, such as a list marker or heading style, making it stand out from the structured list above.", "level": "hard", "instruction": "Generate Markdown code according to the following requirements:content begins with a level 3 heading, followed by an unordered list and a concluding line of text. The format specifics are as follows:\nLevel 3 Heading: The document starts with a level 3 heading, indicated by three hash symbols (###). The heading is a question, \"What versioning scheme should be adopted?\", serving as a topic or section title.\nUnordered List: Immediately following the heading, there is an unordered list, each item of which begins with an asterisk (*). This list includes:\nContributions or statements attributed to specific individuals or groups. Each item starts with a name or identifier (e.g., \"group:\", \"domenic+group:\", \"mikeal:\", \"mikeal+domenic:\"), followed by a statement or opinion related to the versioning scheme topic.\nThese statements vary in content, discussing versioning preferences and strategies, such as adopting a specific version number, pulling in patches, suggesting versioning practices for io.js, and coordinating with the Technical Committee (TC) regarding changes.\nConcluding Line of Text: After the list, there is a line of text, \"simpler stream creation\", which seems to be a statement or topic on its own. This line is not part of the unordered list and does not have any specific Markdown formatting, such as a list marker or heading style, making it stand out from the structured list above."}
{"task_id": "Markdown/27", "prompt": "Generate Markdown code according to the following requirements:content is organized with a bolded introductory phrase followed by an unordered list that includes specific tasks and a highlighted individual's name. Here's the breakdown:\nBolded Introductory Phrase: The document starts with the phrase \"action items:\" which is emphasized using double asterisks (**) on both sides. This creates a bold effect, drawing attention to the section title or key theme of the list that follows.\nUnordered List: Below the bolded phrase, there's an unordered list, indicated by asterisks (*). This list outlines various tasks or action items, each presented as a bullet point. The format includes straightforward task descriptions, suggesting actions to be taken, such as asking individuals for specific contributions or implementing new features.\nHighlighted Individual's Name: Within the list, one item specifically mentions an individual, \"chris\", whose name is also bolded using double asterisks. This emphasizes the person's responsibility or involvement with the task, distinguishing it from other items in the list.\nTasks Description: The tasks vary in nature and are described directly without additional formatting except for the bolded name. They include requests for information or action from specific people or groups, as well as suggestions for adding new features or documentation sections.", "level": "hard", "instruction": "Generate Markdown code according to the following requirements:content is organized with a bolded introductory phrase followed by an unordered list that includes specific tasks and a highlighted individual's name. Here's the breakdown:\nBolded Introductory Phrase: The document starts with the phrase \"action items:\" which is emphasized using double asterisks (**) on both sides. This creates a bold effect, drawing attention to the section title or key theme of the list that follows.\nUnordered List: Below the bolded phrase, there's an unordered list, indicated by asterisks (*). This list outlines various tasks or action items, each presented as a bullet point. The format includes straightforward task descriptions, suggesting actions to be taken, such as asking individuals for specific contributions or implementing new features.\nHighlighted Individual's Name: Within the list, one item specifically mentions an individual, \"chris\", whose name is also bolded using double asterisks. This emphasizes the person's responsibility or involvement with the task, distinguishing it from other items in the list.\nTasks Description: The tasks vary in nature and are described directly without additional formatting except for the bolded name. They include requests for information or action from specific people or groups, as well as suggestions for adding new features or documentation sections."}
{"task_id": "Markdown/28", "prompt": "Generate Markdown code according to the following requirements:content is structured with a level 2 heading followed by an unordered list of references, each with a descriptive text linked to a URL. Here's the breakdown:\nLevel 2 Heading: The document starts with \"References:\" which is formatted as a level 2 heading, indicated by two hash symbols (##). This serves as the title or introduction to the section that follows, implying that the content will list sources or further reading materials.\nUnordered List: Below the heading, there's an unordered list for references, indicated by asterisks (*). Each item in the list combines descriptive text with a hyperlink. The format specifics for each item are:\nDescriptive text followed by a colon (e.g., \"SemEval task:\", \".ann format:\"), which provides a brief description or name of the reference.\nA URL (e.g., https://scienceie.github.io/, http://brat.nlplab.org/standoff.html) immediately follows the descriptive text, linked without additional descriptive link text. This makes the entire URL visible and clickable in the rendered Markdown.", "level": "easy", "instruction": "Generate Markdown code according to the following requirements:content is structured with a level 2 heading followed by an unordered list of references, each with a descriptive text linked to a URL. Here's the breakdown:\nLevel 2 Heading: The document starts with \"References:\" which is formatted as a level 2 heading, indicated by two hash symbols (##). This serves as the title or introduction to the section that follows, implying that the content will list sources or further reading materials.\nUnordered List: Below the heading, there's an unordered list for references, indicated by asterisks (*). Each item in the list combines descriptive text with a hyperlink. The format specifics for each item are:\nDescriptive text followed by a colon (e.g., \"SemEval task:\", \".ann format:\"), which provides a brief description or name of the reference.\nA URL (e.g., https://scienceie.github.io/, http://brat.nlplab.org/standoff.html) immediately follows the descriptive text, linked without additional descriptive link text. This makes the entire URL visible and clickable in the rendered Markdown."}
{"task_id": "Markdown/29", "prompt": "Generate Markdown code according to the following requirements: content is organized into sections with headings and includes linked list items. Here's the detailed breakdown:\nLevel 2 Heading: The document begins with \"Accessibility guidelines\" as a level 2 heading, indicated by two hash symbols (##). This serves as the title for the first section, suggesting it will cover guidelines related to accessibility.\nLinked List Item under Level 2 Heading: Directly under the level 2 heading, there's a bulleted list item that includes a link. The link text is \"WCAG 1.1.1\" and the URL points to a specific page on the W3.org website about understanding non-text content. This is formatted as a Markdown link, where the link text is enclosed in square brackets ([]) and the URL is enclosed in parentheses (()).\nLevel 3 Heading: Following the first section, there's a level 3 heading titled \"Resources\", indicated by three hash symbols (###). This marks the beginning of a new section focused on providing additional materials or references.\nLinked List Item under Level 3 Heading: Under the level 3 heading, there's another bulleted list item with a link. The link text here is \"L\u00e9onie Watson, Accessible Emoji\", which points to an article on tink.uk about accessible emoji. Similar to the first link, the text is enclosed in square brackets and the URL in parentheses, forming a clickable hyperlink in Markdown format.", "level": "easy", "instruction": "Generate Markdown code according to the following requirements: content is organized into sections with headings and includes linked list items. Here's the detailed breakdown:\nLevel 2 Heading: The document begins with \"Accessibility guidelines\" as a level 2 heading, indicated by two hash symbols (##). This serves as the title for the first section, suggesting it will cover guidelines related to accessibility.\nLinked List Item under Level 2 Heading: Directly under the level 2 heading, there's a bulleted list item that includes a link. The link text is \"WCAG 1.1.1\" and the URL points to a specific page on the W3.org website about understanding non-text content. This is formatted as a Markdown link, where the link text is enclosed in square brackets ([]) and the URL is enclosed in parentheses (()).\nLevel 3 Heading: Following the first section, there's a level 3 heading titled \"Resources\", indicated by three hash symbols (###). This marks the beginning of a new section focused on providing additional materials or references.\nLinked List Item under Level 3 Heading: Under the level 3 heading, there's another bulleted list item with a link. The link text here is \"L\u00e9onie Watson, Accessible Emoji\", which points to an article on tink.uk about accessible emoji. Similar to the first link, the text is enclosed in square brackets and the URL in parentheses, forming a clickable hyperlink in Markdown format."}
{"task_id": "Markdown/30", "prompt": "Generate Markdown code according to the following requirements:\nThe provided Markdown content is formatted as a table with a header row and a single data row. Here's a detailed breakdown of its format:\nHeader Row: The table begins with a header row containing three columns: \"Function Name\", \"Filesystem\", and \"FilePathsBase\". Each header is separated by a vertical bar (|), which is used to delimit columns in Markdown tables.\nDelimiter Row: Following the header row, there's a delimiter row consisting of three sets of three dashes (---), each set separated by a vertical bar (|). This row is used to indicate that the row above it is a header row and to separate the header from the data rows that follow. The dashes specify the alignment of the columns; in this case, the default alignment is used (left-aligned).\nData Row: After the delimiter row, there's a single data row containing values corresponding to each column in the header: \"cd\" under \"Function Name\", \"AbstractString\" under \"Filesystem\", and \"AbstractPath\" under \"FilePathsBase\". Each value is also separated by a vertical bar (|), aligning with the structure of the header row.", "level": "easy", "instruction": "Generate Markdown code according to the following requirements:\nThe provided Markdown content is formatted as a table with a header row and a single data row. Here's a detailed breakdown of its format:\nHeader Row: The table begins with a header row containing three columns: \"Function Name\", \"Filesystem\", and \"FilePathsBase\". Each header is separated by a vertical bar (|), which is used to delimit columns in Markdown tables.\nDelimiter Row: Following the header row, there's a delimiter row consisting of three sets of three dashes (---), each set separated by a vertical bar (|). This row is used to indicate that the row above it is a header row and to separate the header from the data rows that follow. The dashes specify the alignment of the columns; in this case, the default alignment is used (left-aligned).\nData Row: After the delimiter row, there's a single data row containing values corresponding to each column in the header: \"cd\" under \"Function Name\", \"AbstractString\" under \"Filesystem\", and \"AbstractPath\" under \"FilePathsBase\". Each value is also separated by a vertical bar (|), aligning with the structure of the header row."}
{"task_id": "Markdown/31", "prompt": "Generate Markdown code according to the following requirements:\nThe provided Markdown content consists of a level 1 heading followed by two paragraphs of text. Here's the breakdown of its format:\nLevel 1 Heading: The document starts with a level 1 heading, which is indicated by a single hash symbol (#) followed by a space and then the text \"Heading level 1\". This creates a prominent, large, and bold heading at the top of the document, typically used as the main title.\nParagraphs: After the heading, there are two separate paragraphs of plain text. The first paragraph states, \"I really like using Markdown.\" The second paragraph begins on a new line, separated from the first by a blank line, and says, \"I think I'll use it to format all of my documents from now on.\" This separation creates distinct blocks of text, each considered a separate paragraph in Markdown.", "level": "middle", "instruction": "Generate Markdown code according to the following requirements:\nThe provided Markdown content consists of a level 1 heading followed by two paragraphs of text. Here's the breakdown of its format:\nLevel 1 Heading: The document starts with a level 1 heading, which is indicated by a single hash symbol (#) followed by a space and then the text \"Heading level 1\". This creates a prominent, large, and bold heading at the top of the document, typically used as the main title.\nParagraphs: After the heading, there are two separate paragraphs of plain text. The first paragraph states, \"I really like using Markdown.\" The second paragraph begins on a new line, separated from the first by a blank line, and says, \"I think I'll use it to format all of my documents from now on.\" This separation creates distinct blocks of text, each considered a separate paragraph in Markdown."}
{"task_id": "Markdown/32", "prompt": "Generate Markdown code according to the following requirements:It starts with an inline code snippet: allowedInvalidRules is highlighted as code.\nFollowed by a descriptive text: \"is an optional string array of custom roles that should be allowed in addition to the ARIA spec, such as for cases when you\".\nContains a clickable hyperlink with the text \"need to use a non-standard role\" pointing to the URL \"https://axesslab.com/text-splitting\".", "level": "hard", "instruction": "Generate Markdown code according to the following requirements:It starts with an inline code snippet: allowedInvalidRules is highlighted as code.\nFollowed by a descriptive text: \"is an optional string array of custom roles that should be allowed in addition to the ARIA spec, such as for cases when you\".\nContains a clickable hyperlink with the text \"need to use a non-standard role\" pointing to the URL \"https://axesslab.com/text-splitting\"."}
{"task_id": "Markdown/33", "prompt": "Generate Markdown code according to the following requirements:Begins with a third-level heading titled \"Resources\".\nFollows with an unordered list of three items, each being a hyperlink to an external resource:\nThe first link's text is \"Chrome Audit Rules, AX_ARIA_01\" and points to a GitHub page within the GoogleChrome organization's accessibility-developer-tools wiki, specifically the Audit Rules section with an anchor to #ax_aria_01.\nThe second link's text is \"DPUB-ARIA roles\" and leads to a W3C document for DPUB-ARIA 1.0.\nThe third link's text is \"MDN: Using ARIA: Roles, states, and properties\" and directs to a Mozilla Developer Network (MDN) page about using ARIA techniques.", "level": "easy", "instruction": "Generate Markdown code according to the following requirements:Begins with a third-level heading titled \"Resources\".\nFollows with an unordered list of three items, each being a hyperlink to an external resource:\nThe first link's text is \"Chrome Audit Rules, AX_ARIA_01\" and points to a GitHub page within the GoogleChrome organization's accessibility-developer-tools wiki, specifically the Audit Rules section with an anchor to #ax_aria_01.\nThe second link's text is \"DPUB-ARIA roles\" and leads to a W3C document for DPUB-ARIA 1.0.\nThe third link's text is \"MDN: Using ARIA: Roles, states, and properties\" and directs to a Mozilla Developer Network (MDN) page about using ARIA techniques."}
{"task_id": "Markdown/34", "prompt": "Generate Markdown code according to the following requirements:Starts with a third-level heading: \"Confirming on items\".\nFollowed by a paragraph explaining that items can be validated using a specific option, referred to as ensureItem (highlighted as inline code).\nIntroduces an unordered list with two items, specifying the outcomes of using the ensureItem option:\nThe first item mentions the return of a new instance of an array with coerced item values.\nThe second item describes that the error message will list up to three items which are invalid.", "level": "hard", "instruction": "Generate Markdown code according to the following requirements:Starts with a third-level heading: \"Confirming on items\".\nFollowed by a paragraph explaining that items can be validated using a specific option, referred to as ensureItem (highlighted as inline code).\nIntroduces an unordered list with two items, specifying the outcomes of using the ensureItem option:\nThe first item mentions the return of a new instance of an array with coerced item values.\nThe second item describes that the error message will list up to three items which are invalid."}
{"task_id": "Markdown/35", "prompt": "Generate Markdown code according to the following requirements:The first line contains a sequence of words separated by backticks without spaces, likely intended to be viewed as inline code segments. The exact sequence is: backtick, lots, backtick, of, backtick, backticks, backtick.\nThe second line attempts a more complex structure with double backticks separating words, possibly intended to test parsing behavior. The sequence is: double backtick, i, double backtick, wonder, double backtick, how, double backtick, this, double backtick, will, double backtick, be, double backtick, parsed, double backtick.", "level": "easy", "instruction": "Generate Markdown code according to the following requirements:The first line contains a sequence of words separated by backticks without spaces, likely intended to be viewed as inline code segments. The exact sequence is: backtick, lots, backtick, of, backtick, backticks, backtick.\nThe second line attempts a more complex structure with double backticks separating words, possibly intended to test parsing behavior. The sequence is: double backtick, i, double backtick, wonder, double backtick, how, double backtick, this, double backtick, will, double backtick, be, double backtick, parsed, double backtick."}
{"task_id": "Markdown/36", "prompt": "Generate Markdown code according to the following requirements:The first line is a heading of level 1, indicated by a single # followed by a space and then the text \"Heading level 1\".\nThe second line contains a sentence \"I just love bold text\" where the phrase \"bold text\" is emphasized by being wrapped in double asterisks **, which makes it appear in bold.", "level": "easy", "instruction": "Generate Markdown code according to the following requirements:The first line is a heading of level 1, indicated by a single # followed by a space and then the text \"Heading level 1\".\nThe second line contains a sentence \"I just love bold text\" where the phrase \"bold text\" is emphasized by being wrapped in double asterisks **, which makes it appear in bold."}
{"task_id": "Markdown/37", "prompt": "Generate Markdown code according to the following requirements:The first sentence starts with plain text: \"One\".\nIt then emphasizes the phrase \"red teacher\" in bold, indicated by double asterisks ** before and after the phrase.\nThe sentence continues with plain text: \"marked, while LLMs are being able to\".\nThe phrase \"iteratively improve\" is emphasized in both bold and italic, shown by three asterisks *** before and after the phrase.\nThe sentence goes on with italicized text: \"on produced\", using a single asterisk * at the start and end.\nIt then returns to plain text for \"source code,\", which is followed by a concluding clause in plain text: \"which is a risk.\"\nThe second line is a separate sentence: \"I just love bold text\", where \"bold text\" is emphasized in bold using double asterisks.", "level": "middle", "instruction": "Generate Markdown code according to the following requirements:The first sentence starts with plain text: \"One\".\nIt then emphasizes the phrase \"red teacher\" in bold, indicated by double asterisks ** before and after the phrase.\nThe sentence continues with plain text: \"marked, while LLMs are being able to\".\nThe phrase \"iteratively improve\" is emphasized in both bold and italic, shown by three asterisks *** before and after the phrase.\nThe sentence goes on with italicized text: \"on produced\", using a single asterisk * at the start and end.\nIt then returns to plain text for \"source code,\", which is followed by a concluding clause in plain text: \"which is a risk.\"\nThe second line is a separate sentence: \"I just love bold text\", where \"bold text\" is emphasized in bold using double asterisks."}
{"task_id": "Markdown/38", "prompt": "Generate Markdown code according to the following requirements:Begins with a level 1 heading: \"Changelog\".\nFollows with a level 2 heading for version \"v1.1.0\".\nUnder the version heading, there are two list items:\nThe first item starts with \"test:\" and describes a requirement handled by mocha.\nThe second item starts with \"package:\" and mentions the update to coffeescript 2 and the use of semver tilde.", "level": "easy", "instruction": "Generate Markdown code according to the following requirements:Begins with a level 1 heading: \"Changelog\".\nFollows with a level 2 heading for version \"v1.1.0\".\nUnder the version heading, there are two list items:\nThe first item starts with \"test:\" and describes a requirement handled by mocha.\nThe second item starts with \"package:\" and mentions the update to coffeescript 2 and the use of semver tilde."}
{"task_id": "Markdown/39", "prompt": "Generate Markdown code according to the following requirements:It starts with an image link, indicated by an exclamation mark ! followed by square brackets [] containing the alt text \"Build Status\".\nInside the parentheses (), there is a URL pointing to an image source, which is the build status badge hosted on https://secure.travis-ci.org/adaltas/node-csv-parse.svg.\nFollowing the image link, there is a reference-style link definition. The reference label [travis] matches the label at the end of the image link but is not directly followed by a URL in the snippet provided. This implies the URL for [travis] should be defined elsewhere in the document or is intended to link to the Travis CI project page for node-csv-parse.", "level": "easy", "instruction": "Generate Markdown code according to the following requirements:It starts with an image link, indicated by an exclamation mark ! followed by square brackets [] containing the alt text \"Build Status\".\nInside the parentheses (), there is a URL pointing to an image source, which is the build status badge hosted on https://secure.travis-ci.org/adaltas/node-csv-parse.svg.\nFollowing the image link, there is a reference-style link definition. The reference label [travis] matches the label at the end of the image link but is not directly followed by a URL in the snippet provided. This implies the URL for [travis] should be defined elsewhere in the document or is intended to link to the Travis CI project page for node-csv-parse."}
{"task_id": "Markdown/40", "prompt": "Generate Markdown code according to the following requirements:The paragraph begins with plain text: \"Part of the\".\nFollows with a reference-style hyperlink: the text \"CSV module\" is linked, indicated by square brackets [CSV module], followed immediately by another set of square brackets [csv_home] which serves as the reference identifier for the URL (the URL itself is not provided in the snippet but is assumed to be defined elsewhere in the document).\nThe paragraph continues with more plain text: \", this project is a parser converting CSV text input into arrays or objects. It implements the Node.js\".", "level": "middle", "instruction": "Generate Markdown code according to the following requirements:The paragraph begins with plain text: \"Part of the\".\nFollows with a reference-style hyperlink: the text \"CSV module\" is linked, indicated by square brackets [CSV module], followed immediately by another set of square brackets [csv_home] which serves as the reference identifier for the URL (the URL itself is not provided in the snippet but is assumed to be defined elsewhere in the document).\nThe paragraph continues with more plain text: \", this project is a parser converting CSV text input into arrays or objects. It implements the Node.js\"."}
{"task_id": "Markdown/41", "prompt": "Generate Markdown code according to the following requirements:Starts with a level 1 heading indicated by a single #, followed by the text \"Release history\".\nThe next line contains a sentence in bold: \"All notable changes to this project will be documented in this file.\" The bold formatting is achieved by wrapping the sentence in double asterisks ** at both the beginning and the end.", "level": "easy", "instruction": "Generate Markdown code according to the following requirements:Starts with a level 1 heading indicated by a single #, followed by the text \"Release history\".\nThe next line contains a sentence in bold: \"All notable changes to this project will be documented in this file.\" The bold formatting is achieved by wrapping the sentence in double asterisks ** at both the beginning and the end."}
{"task_id": "Markdown/42", "prompt": "Generate Markdown code according to the following requirements:The first list item begins with plain text: \"Readme link\".\nIt includes an inline link with the text \"fixed\" pointing to a specific commit on GitHub. The link text is enclosed in square brackets [fixed], and the URL is enclosed in parentheses immediately following the link text (https://github.com/micromatch/picomatch/pull/13/commits/a96ab3aa2b11b6861c23289964613d85563b05df).\nThe item concludes with \"by @danez.\", where \"@danez\" is plain text, likely referencing a GitHub username.\nThe second list item starts with inline code: \"options.capture\".\nThe sentence continues as plain text: \"now works as expected when fastpaths are enabled.\"\nIt includes a plain URL https://github.com/micromatch/picomatch/pull/12/commits/26aefd71f1cfaf95c37f1c1fcab68a693b037304 after \"See\", which is not hyperlinked or labeled.\nThe item ends with \"Thanks to @DrPizza.\", with \"@DrPizza\" being plain text.", "level": "middle", "instruction": "Generate Markdown code according to the following requirements:The first list item begins with plain text: \"Readme link\".\nIt includes an inline link with the text \"fixed\" pointing to a specific commit on GitHub. The link text is enclosed in square brackets [fixed], and the URL is enclosed in parentheses immediately following the link text (https://github.com/micromatch/picomatch/pull/13/commits/a96ab3aa2b11b6861c23289964613d85563b05df).\nThe item concludes with \"by @danez.\", where \"@danez\" is plain text, likely referencing a GitHub username.\nThe second list item starts with inline code: \"options.capture\".\nThe sentence continues as plain text: \"now works as expected when fastpaths are enabled.\"\nIt includes a plain URL https://github.com/micromatch/picomatch/pull/12/commits/26aefd71f1cfaf95c37f1c1fcab68a693b037304 after \"See\", which is not hyperlinked or labeled.\nThe item ends with \"Thanks to @DrPizza.\", with \"@DrPizza\" being plain text."}
{"task_id": "Markdown/43", "prompt": "Generate Markdown code according to the following requirements:Begins with a level 2 heading that includes a version number in square brackets [1.0.0], followed by a hyphen -, and then a date 2018-11-05.\nThe heading is followed by an unordered list with four items describing the updates:\nThe first item mentions the addition of a new option: \"adds .onMatch option\".\nThe second item notes improvements to a method: \"improvements to .scan method\".\nThe third item highlights general enhancements: \"numerous improvements and optimizations for matching and parsing\".\nThe fourth item focuses on platform-specific handling: \"better windows path handling\"", "level": "hard", "instruction": "Generate Markdown code according to the following requirements:Begins with a level 2 heading that includes a version number in square brackets [1.0.0], followed by a hyphen -, and then a date 2018-11-05.\nThe heading is followed by an unordered list with four items describing the updates:\nThe first item mentions the addition of a new option: \"adds .onMatch option\".\nThe second item notes improvements to a method: \"improvements to .scan method\".\nThe third item highlights general enhancements: \"numerous improvements and optimizations for matching and parsing\".\nThe fourth item focuses on platform-specific handling: \"better windows path handling\""}
{"task_id": "Markdown/44", "prompt": "Generate Markdown code according to the following requirements:The phrase \"gyp-next\" at the beginning is in bold and italicized, indicated by double underscores __ surrounding it.\nFollowing this, there's plain text introducing the concept of a release.\nThe word \"released\" serves as the text for the first hyperlink, pointing to the URL https://github.com/nodejs/gyp-next/releases. This is achieved by placing the word in square brackets [released] followed by the URL in parentheses.\nThe phrase \"Python Packaging Index\" is also in bold and italicized, similar to \"gyp-next\", and serves as the text for the second hyperlink, which points to https://pypi.org/project/gyp-next. This link is formatted similarly to the first, with the phrase in square brackets and the URL in parentheses immediately after.\nThe sentence concludes with the mention of PyPI in parentheses and includes instructions that it \"can be installed with the command:\", which is plain text.", "level": "easy", "instruction": "Generate Markdown code according to the following requirements:The phrase \"gyp-next\" at the beginning is in bold and italicized, indicated by double underscores __ surrounding it.\nFollowing this, there's plain text introducing the concept of a release.\nThe word \"released\" serves as the text for the first hyperlink, pointing to the URL https://github.com/nodejs/gyp-next/releases. This is achieved by placing the word in square brackets [released] followed by the URL in parentheses.\nThe phrase \"Python Packaging Index\" is also in bold and italicized, similar to \"gyp-next\", and serves as the text for the second hyperlink, which points to https://pypi.org/project/gyp-next. This link is formatted similarly to the first, with the phrase in square brackets and the URL in parentheses immediately after.\nThe sentence concludes with the mention of PyPI in parentheses and includes instructions that it \"can be installed with the command:\", which is plain text."}
{"task_id": "Markdown/45", "prompt": "Generate Markdown code according to the following requirements:The sentence begins with plain text: \"Documents are available at\".\nIt includes an inline hyperlink with the text \"gyp.gsrc.io\" pointing to the URL https://gyp.gsrc.io. The link text is enclosed in square brackets [gyp.gsrc.io], and the URL is enclosed in parentheses immediately following the link text (https://gyp.gsrc.io).\nThe sentence continues with more plain text: \", or you can check out\", followed by an inline code block.\nThe inline code block contains the branch name \"md-pages\". Unlike typical inline code that uses single backticks, this uses triple backticks ``` to enclose the branch name, which is not standard for inline code and might be interpreted differently by various markdown parsers.\nThe sentence concludes with the text \"branch to read those documents offline.\"", "level": "easy", "instruction": "Generate Markdown code according to the following requirements:The sentence begins with plain text: \"Documents are available at\".\nIt includes an inline hyperlink with the text \"gyp.gsrc.io\" pointing to the URL https://gyp.gsrc.io. The link text is enclosed in square brackets [gyp.gsrc.io], and the URL is enclosed in parentheses immediately following the link text (https://gyp.gsrc.io).\nThe sentence continues with more plain text: \", or you can check out\", followed by an inline code block.\nThe inline code block contains the branch name \"md-pages\". Unlike typical inline code that uses single backticks, this uses triple backticks ``` to enclose the branch name, which is not standard for inline code and might be interpreted differently by various markdown parsers.\nThe sentence concludes with the text \"branch to read those documents offline.\""}
{"task_id": "Markdown/46", "prompt": "Generate Markdown code according to the following requirements:It denote a level 2 heading.\nThe text of the heading is \"Converters\".", "level": "easy", "instruction": "Generate Markdown code according to the following requirements:It denote a level 2 heading.\nThe text of the heading is \"Converters\"."}
{"task_id": "Markdown/47", "prompt": "Generate Markdown code according to the following requirements:The sentence starts with plain text: \"See\".\nIt includes an inline hyperlink with the text \"maybe_types.md\" pointing to a relative path ./maybe_types.md. The link text is enclosed in square brackets [maybe_types.md], and the URL is enclosed in parentheses immediately following the link text (./maybe_types.md).\nThe sentence continues with more plain text: \"for more information on\".\nAn inline code snippet Nan::Maybe is included, indicated by backticks surrounding the text.\nThe sentence concludes with the words \"types.\"", "level": "easy", "instruction": "Generate Markdown code according to the following requirements:The sentence starts with plain text: \"See\".\nIt includes an inline hyperlink with the text \"maybe_types.md\" pointing to a relative path ./maybe_types.md. The link text is enclosed in square brackets [maybe_types.md], and the URL is enclosed in parentheses immediately following the link text (./maybe_types.md).\nThe sentence continues with more plain text: \"for more information on\".\nAn inline code snippet Nan::Maybe is included, indicated by backticks surrounding the text.\nThe sentence concludes with the words \"types.\""}
{"task_id": "Markdown/48", "prompt": "Generate Markdown code according to the following requirements:Starts with a level 3 heading titled \"Example\".\nFollowed by a code block indicated by triple backticks. Inside the backticks, c++ specifies the programming language for syntax highlighting.\nThe code block contains three lines of C++ code:\nDeclaration of a v8::Local<v8::Value> variable named val.\nDeclaration and initialization of a Nan::MaybeLocal<v8::String> variable named str with a call to Nan::To<v8::String>(val).\nDeclaration and initialization of a Nan::Maybe<double> variable named d with a call to Nan::To<double>(val).", "level": "easy", "instruction": "Generate Markdown code according to the following requirements:Starts with a level 3 heading titled \"Example\".\nFollowed by a code block indicated by triple backticks. Inside the backticks, c++ specifies the programming language for syntax highlighting.\nThe code block contains three lines of C++ code:\nDeclaration of a v8::Local<v8::Value> variable named val.\nDeclaration and initialization of a Nan::MaybeLocal<v8::String> variable named str with a call to Nan::To<v8::String>(val).\nDeclaration and initialization of a Nan::Maybe<double> variable named d with a call to Nan::To<double>(val)."}
{"task_id": "Markdown/49", "prompt": "Generate Markdown code according to the following requirements:Begins with a level 1 heading, indicated by a single #, followed by the text \"copy(src, dest, [options, callback])\". This appears to be a function signature or method declaration, including its name \"copy\" and its parameters \"src\", \"dest\", \"options\", and \"callback\". The \"options\" and \"callback\" parameters are enclosed in square brackets, suggesting they are optional.\nFollowing the heading, there's a descriptive sentence: \"Copy a file or directory. The directory can have contents.\" This provides a brief explanation of what the copy function does.\nThe sentence ends with a comparison to a Unix command, highlighted as an inline code snippet: \"cp -r\". This suggests that the function's behavior is similar to the recursive copy operation in Unix-like systems.", "level": "easy", "instruction": "Generate Markdown code according to the following requirements:Begins with a level 1 heading, indicated by a single #, followed by the text \"copy(src, dest, [options, callback])\". This appears to be a function signature or method declaration, including its name \"copy\" and its parameters \"src\", \"dest\", \"options\", and \"callback\". The \"options\" and \"callback\" parameters are enclosed in square brackets, suggesting they are optional.\nFollowing the heading, there's a descriptive sentence: \"Copy a file or directory. The directory can have contents.\" This provides a brief explanation of what the copy function does.\nThe sentence ends with a comparison to a Unix command, highlighted as an inline code snippet: \"cp -r\". This suggests that the function's behavior is similar to the recursive copy operation in Unix-like systems."}
{"task_id": "Markdown/50", "prompt": "Generate Markdown code according to the following requirements:The content is enclosed within triple backticks, indicating a code block without specifying a language, suitable for plain text commands or snippets that don't require syntax highlighting.\nInside the code block, there are three separate lines, each representing a distinct command:\ncrontab -e - A command to edit the crontab file for the current user.\ncrontab -l - A command to list the crontab file for the current user.\nsudo service cron restart - A command to restart the cron service, typically requiring administrative privileges (hence the sudo).", "level": "easy", "instruction": "Generate Markdown code according to the following requirements:The content is enclosed within triple backticks, indicating a code block without specifying a language, suitable for plain text commands or snippets that don't require syntax highlighting.\nInside the code block, there are three separate lines, each representing a distinct command:\ncrontab -e - A command to edit the crontab file for the current user.\ncrontab -l - A command to list the crontab file for the current user.\nsudo service cron restart - A command to restart the cron service, typically requiring administrative privileges (hence the sudo)."}
