{"task_id": "JavaScript/1", "prompt": "\n// return \"Hello, MMCODEEVAL: Masssively Multilingual Code Evaluation\"\nfunction hello_mmcodeeval()", "canonical_solution": "{\n    return \"Hello, MMCODEEVAL: Masssively Multilingual Code Evaluation\";\n}", "test": "(() => {\n    console.assert(hello_mmcodeeval() === \"Hello, MMCODEEVAL: Masssively Multilingual Code Evaluation\");\n})();", "entry_point": "hello_mmcodeeval", "signature": "function hello_mmcodeeval()", "docstring": "return \"Hello, MMCODEEVAL: Masssively Multilingual Code Evaluation\"", "instruction": "Write a JavaScript function `function hello_mmcodeeval()` to solve the following problem:\nreturn \"Hello, MMCODEEVAL: Masssively Multilingual Code Evaluation\"", "level": "easy"}
{"task_id": "JavaScript/2", "prompt": "\n/**\n * Calculate the area of a triangle given its three sides.\n * \n * @param {number} a - Length of side 'a'.\n * @param {number} b - Length of side 'b'.\n * @param {number} c - Length of side 'c'.\n * @returns {string|number} If the provided sides form a triangle, return the calculated area with 2 decimal places. Otherwise, return -1.\n * Example:\n *  calculate_triangle_area(3, 5, 4) // returns 6\n */\nfunction calculate_triangle_area(a, b, c)", "canonical_solution": "{\n    if (a + b > c && a + c > b && b + c > a) {\n        let s = (a + b + c) / 2.0;\n        return Number(Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2));\n    } else {\n        return -1; // Use a special value to indicate not a triangle\n    }\n}", "test": "const testCalculateTriangleArea = () => {\n    // Triangle with sides 3, 5, 4 should return area 6\n    console.assert(Math.abs(calculate_triangle_area(3, 5, 4) - 6) < 1e-6);\n\n    // Not a triangle with sides 1, 1, 4 should return -1\n    console.assert(calculate_triangle_area(1, 1, 4) === -1);\n\n    // Triangle with sides 7, 24, 25 should return area 84\n    console.assert(Math.abs(calculate_triangle_area(7, 24, 25) - 84) < 1e-6);\n\n    // Triangle with sides 10.5, 6.2, 7.3 should return a correct area within precision range\n    console.assert(Math.abs(calculate_triangle_area(10.5, 6.2, 7.3) - 22.15) < 1e-6);\n\n    // console.log(\"All tests passed successfully.\");\n};\n\ntestCalculateTriangleArea();", "entry_point": "calculate_triangle_area", "signature": "function calculate_triangle_area(a, b, c)", "docstring": "Calculate the area of a triangle given its three sides.\n\nParameters:\n- a (number): Length of side 'a'.\n- b (number): Length of side 'b'.\n- c (number): Length of side 'c'.\n\nReturns:\n- string|number: If the provided sides form a triangle, return the calculated area with 2 decimal places. Otherwise, return -1.\nExample:\n calculate_triangle_area(3, 5, 4) // returns 6\n", "instruction": "Write a JavaScript function `function calculate_triangle_area(a, b, c)` to solve the following problem:\nCalculate the area of a triangle given its three sides.\n\nParameters:\n- a (number): Length of side 'a'.\n- b (number): Length of side 'b'.\n- c (number): Length of side 'c'.\n\nReturns:\n- string|number: If the provided sides form a triangle, return the calculated area with 2 decimal places. Otherwise, return -1.\nExample:\n calculate_triangle_area(3, 5, 4) // returns 6\n", "level": "easy"}
{"task_id": "JavaScript/3", "prompt": "\n/**\n * Calculate the value of the function for a given input.\n * \n * Parameters:\n * - x (number): Input value for the function.\n * \n * Returns:\n * - string: If x is not in the defined domain, returns \"Not define\".\n * Otherwise, returns the calculated function value as a string rounded to 5 decimal places.\n * \n * Function Definitions:\n * - For 0 <= x < 10: y = cos(x + 3.0)\n * - For 10 <= x < 20: y = (cos(x + 7.5))^2\n * - For 20 <= x < 30: y = (cos(x + 4.0))^4\n * \n * Examples:\n * calculateFunctionValue(40); // \"Not define\"\n */\nconst calculateFunctionValue = (x) => {", "canonical_solution": "if (0 <= x && x < 10) {\n        return Math.cos(x + 3.0).toFixed(5);\n    } else if (10 <= x && x < 20) {\n        return Math.pow(Math.cos(x + 7.5), 2).toFixed(5);\n    } else if (20 <= x && x < 30) {\n        return Math.pow(Math.cos(x + 4.0), 4).toFixed(5);\n    } else {\n        return \"Not define\";\n    }\n};", "test": "const testCalculateFunctionValue = () => {\n    console.assert(calculateFunctionValue(40) === \"Not define\", \"Test case 40 failed\");\n    console.assert(calculateFunctionValue(5) === \"-0.14550\", \"Test case 5 failed\");\n    console.assert(calculateFunctionValue(15) === \"0.76266\", \"Test case 15 failed\");\n    console.assert(calculateFunctionValue(25) === \"0.31314\", \"Test case 25 failed\");\n    console.assert(calculateFunctionValue(-1) === \"Not define\", \"Test case -1 failed\");\n}\n\ntestCalculateFunctionValue();", "entry_point": "calculateFunctionValue", "signature": "const calculateFunctionValue = (x)", "docstring": "Calculate the value of the function for a given input.\n\nParameters:\n- x (number): Input value for the function.\n\nReturns:\n- string: If x is not in the defined domain, returns \"Not define\".\nOtherwise, returns the calculated function value as a string rounded to 5 decimal places.\n\nFunction Definitions:\n- For 0 <= x < 10: y = cos(x + 3.0)\n- For 10 <= x < 20: y = (cos(x + 7.5))^2\n- For 20 <= x < 30: y = (cos(x + 4.0))^4\n\nExamples:\ncalculateFunctionValue(40); // \"Not define\"\n", "instruction": "Write a JavaScript function `const calculateFunctionValue = (x)` to solve the following problem:\nCalculate the value of the function for a given input.\n\nParameters:\n- x (number): Input value for the function.\n\nReturns:\n- string: If x is not in the defined domain, returns \"Not define\".\nOtherwise, returns the calculated function value as a string rounded to 5 decimal places.\n\nFunction Definitions:\n- For 0 <= x < 10: y = cos(x + 3.0)\n- For 10 <= x < 20: y = (cos(x + 7.5))^2\n- For 20 <= x < 30: y = (cos(x + 4.0))^4\n\nExamples:\ncalculateFunctionValue(40); // \"Not define\"\n", "level": "easy"}
{"task_id": "JavaScript/4", "prompt": "\n/**\n * Find the maximum and minimum of three distinct integers.\n *\n * Parameters:\n * a (number): The first integer.\n * b (number): The second integer.\n * c (number): The third integer.\n *\n * Returns:\n * Object: An object with properties 'max' and 'min'.\n *\n * Example call:\n * const result = findMaxMin(1, 2, 3);\n * console.assert(result.max === 3 && result.min === 1);\n */\nfunction findMaxMin(a, b, c)", "canonical_solution": "{\n    let max, min;\n    \n    if (a > b) {\n        if (a > c) {\n            max = a;\n            min = (b < c) ? b : c;\n        } else {\n            max = c;\n            min = b;\n        }\n    } else {\n        if (b > c) {\n            max = b;\n            min = (a < c) ? a : c;\n        } else {\n            max = c;\n            min = a;\n        }\n    }\n\n    return { max, min };\n}", "test": "function testFindMaxMin() {\n    let result = findMaxMin(1, 2, 3);\n    console.assert(result.max === 3 && result.min === 1);\n\n    // Additional tests\n    result = findMaxMin(5, 3, 4);\n    console.assert(result.max === 5 && result.min === 3);\n\n    result = findMaxMin(10, -2, 7);\n    console.assert(result.max === 10 && result.min === -2);\n\n    result = findMaxMin(-1, -3, -2);\n    console.assert(result.max === -1 && result.min === -3);\n}\n\ntestFindMaxMin();", "entry_point": "findMaxMin", "signature": "function findMaxMin(a, b, c)", "docstring": "Find the maximum and minimum of three distinct integers.\n\nParameters:\n- a (number): The first integer.\n- b (number): The second integer.\n- c (number): The third integer.\n\nReturns:\n- Object: An object with properties 'max' and 'min'.\n\nExample call:\nconst result = findMaxMin(1, 2, 3);\nconsole.assert(result.max === 3 && result.min === 1);", "instruction": "Write a JavaScript function `function findMaxMin(a, b, c)` to solve the following problem:\nFind the maximum and minimum of three distinct integers.\n\nParameters:\n- a (number): The first integer.\n- b (number): The second integer.\n- c (number): The third integer.\n\nReturns:\n- Object: An object with properties 'max' and 'min'.\n\nExample call:\nconst result = findMaxMin(1, 2, 3);\nconsole.assert(result.max === 3 && result.min === 1);", "level": "middle"}
{"task_id": "JavaScript/5", "prompt": "\n/**\n * Calculate the distance between two points A (xa, ya) and B (xb, yb).\n *\n * Parameters:\n * - xa (number): x-coordinate of point A.\n * - ya (number): y-coordinate of point A.\n * - xb (number): x-coordinate of point B.\n * - yb (number): y-coordinate of point B.\n *\n * Returns:\n * number: The distance between points A and B.\n * Example usage:\n * console.log(calculateDistance(0,0,3,4)); // Expected output: 5\n */\nfunction calculateDistance(xa, ya, xb, yb)", "canonical_solution": "{\n    return Math.sqrt(Math.pow(xa - xb, 2) + Math.pow(ya - yb, 2));\n}", "test": "const testCalculateDistance = () => {\n    console.assert(Math.abs(calculateDistance(0, 0, 3, 4) - 5) < 1e-6);\n    console.assert(Math.abs(calculateDistance(0, 0, 0, 0) - 0) < 1e-6);\n    console.assert(Math.abs(calculateDistance(-1, -1, 2, 2) - 4.242640687) < 1e-6);\n    console.assert(Math.abs(calculateDistance(1.5, 3.9, 4.2, -1.1) - 5.68243) < 1e-6);\n    // console.log(\"All test cases passed!\");\n}\n\ntestCalculateDistance();", "entry_point": "calculateDistance", "signature": "function calculateDistance(xa, ya, xb, yb)", "docstring": "Calculate the distance between two points A (xa, ya) and B (xb, yb).\n\nParameters:\n- xa (number): x-coordinate of point A.\n- ya (number): y-coordinate of point A.\n- xb (number): x-coordinate of point B.\n- yb (number): y-coordinate of point B.\n\nReturns:\nnumber: The distance between points A and B.\nExample usage:\nconsole.log(calculateDistance(0,0,3,4)); // Expected output: 5\n", "instruction": "Write a JavaScript function `function calculateDistance(xa, ya, xb, yb)` to solve the following problem:\nCalculate the distance between two points A (xa, ya) and B (xb, yb).\n\nParameters:\n- xa (number): x-coordinate of point A.\n- ya (number): y-coordinate of point A.\n- xb (number): x-coordinate of point B.\n- yb (number): y-coordinate of point B.\n\nReturns:\nnumber: The distance between points A and B.\nExample usage:\nconsole.log(calculateDistance(0,0,3,4)); // Expected output: 5\n", "level": "easy"}
{"task_id": "JavaScript/6", "prompt": "\n/**\n * Find the factorial of N and take the modulo 10007 of the result.\n * \n * Parameters:\n * - N (number): A non-negative integer representing the input value (N <= 10000).\n * \n * Returns:\n * - number: The result after taking the modulo 10007 of the factorial of N.\n * \n * Examples:\n * processRequest(1) returns 1\n */\nfunction processRequest(n)", "canonical_solution": "{\n    // An array to store the precomputed factorial modulo results\n    const MOD = 10007;\n    let factorials = new Array(10001);\n    factorials[0] = factorials[1] = 1; // factorial(0) = factorial(1) = 1\n\n    // Precompute the factorials modulo 10007 for integers up to 10000\n    for (let i = 2; i <= 10000; i++) {\n        factorials[i] = (factorials[i - 1] * i) % MOD;\n    }\n\n    return factorials[n];\n}", "test": "const testProcessRequest = () => {\n    console.assert(processRequest(0) === 1, \"Expected factorial of 0 modulo 10007 is 1\");\n    console.assert(processRequest(1) === 1, \"Expected factorial of 1 modulo 10007 is 1\");\n    console.assert(processRequest(2) === 2, \"Expected factorial of 2 modulo 10007 is 2\");\n    console.assert(processRequest(3) === 6, \"Expected factorial of 3 modulo 10007 is 6\");\n    console.assert(processRequest(4) === 24, \"Expected factorial of 4 modulo 10007 is 24\");\n    console.assert(processRequest(10) === 6266, \"Expected factorial of 10 modulo 10007 is 6266\");\n    console.assert(processRequest(10000) === 6991, \"Expected factorial of 10000 modulo 10007 is 6991\");\n\n    // console.log(\"All tests passed.\");\n}\n\ntestProcessRequest();", "entry_point": "processRequest", "signature": "function processRequest(n)", "docstring": "Find the factorial of N and take the modulo 10007 of the result.\n\nParameters:\n- N (number): A non-negative integer representing the input value (N <= 10000).\n\nReturns:\n- number: The result after taking the modulo 10007 of the factorial of N.\n\nExamples:\nprocessRequest(1) returns 1\n", "instruction": "Write a JavaScript function `function processRequest(n)` to solve the following problem:\nFind the factorial of N and take the modulo 10007 of the result.\n\nParameters:\n- N (number): A non-negative integer representing the input value (N <= 10000).\n\nReturns:\n- number: The result after taking the modulo 10007 of the factorial of N.\n\nExamples:\nprocessRequest(1) returns 1\n", "level": "middle"}
{"task_id": "JavaScript/7", "prompt": "// No direct imports are needed in JavaScript as we are not using any specific external libraries for this code\n/**\n * Calculate the area of a triangle given its base and height.\n * Parameters:\n * - base (number): The base length of the triangle.\n * - height (number): The height of the triangle.\n * Returns:\n * float: The calculated area of the triangle, rounded to one decimal place.\n * Examples:\n * calculate_triangle_area(1,2) returns 1.0\n */\nconst calculate_triangle_area = (base, height) =>", "canonical_solution": "{\n    return (base * height) / 2.0; // The formula for the area of a triangle is (base * height) / 2\n};", "test": "const testCalculateTriangleArea = () => {\n    const epsilon = 1e-6;\n    console.assert(Math.abs(calculate_triangle_area(1, 2) - 1.0) < epsilon);\n    console.assert(Math.abs(calculate_triangle_area(3, 4) - 6.0) < epsilon);\n    console.assert(Math.abs(calculate_triangle_area(5, 8) - 20.0) < epsilon);\n    console.assert(Math.abs(calculate_triangle_area(7, 3) - 10.5) < epsilon);\n    console.assert(Math.abs(calculate_triangle_area(10, 10) - 50.0) < epsilon);\n    \n    // console.log(\"All tests passed.\");\n};\n\ntestCalculateTriangleArea();", "entry_point": "calculate_triangle_area", "signature": "const calculate_triangle_area = (base, height)", "docstring": "Calculate the area of a triangle given its base and height.\nParameters:\n- base (number): The base length of the triangle.\n- height (number): The height of the triangle.\nReturns:\nfloat: The calculated area of the triangle, rounded to one decimal place.\nExamples:\ncalculate_triangle_area(1,2) returns 1.0", "instruction": "Write a JavaScript function `const calculate_triangle_area = (base, height)` to solve the following problem:\nCalculate the area of a triangle given its base and height.\nParameters:\n- base (number): The base length of the triangle.\n- height (number): The height of the triangle.\nReturns:\nfloat: The calculated area of the triangle, rounded to one decimal place.\nExamples:\ncalculate_triangle_area(1,2) returns 1.0", "level": "easy"}
{"task_id": "JavaScript/8", "prompt": "\n/**\n * Calculate the Hamming distance between two integers in their binary representation.\n *\n * Parameters:\n * - x: The first positive integer (x <= 1,000,000,000).\n * - y: The second positive integer (y <= 1,000,000,000).\n *\n * Returns:\n * The Hamming distance between x and y, i.e., the number of bits that need to be\n * flipped to transform x into y.\n * \n * Examples:\n * hammingDistance(1, 2) // returns 2\n */\nfunction hammingDistance(x, y)", "canonical_solution": "{\n    let distance = 0;\n    let xorResult = x ^ y; // XOR x and y to get a number where set bits are the differences\n\n    // Count the number of bits set in xorResult\n    while (xorResult) {\n        distance += xorResult & 1; // Increment distance if the last bit is set\n        xorResult >>= 1; // Shift right by one bit to check the next bit\n    }\n\n    return distance;\n}", "test": "const testHammingDistance = () => {\n    console.assert(hammingDistance(1, 2) === 2, \"01 and 10 have 2 different bits\");\n    console.assert(hammingDistance(4, 7) === 2, \"100 and 111 have 2 different bits\");\n    console.assert(hammingDistance(25, 30) === 3, \"11001 and 11110 have 3 different bits\");\n    console.assert(hammingDistance(0, 0) === 0, \"Same numbers have 0 different bits\");\n    console.assert(hammingDistance(0xFFFFFFF, 0x0000000) === 28,\n                   \"Max unsigned int and 0 have 28 different bits\");\n}\n\n// Run the test function\ntestHammingDistance();", "entry_point": "hammingDistance", "signature": "function hammingDistance(x, y)", "docstring": "Calculate the Hamming distance between two integers in their binary representation.\n\nParameters:\n- x: The first positive integer (x <= 1,000,000,000).\n- y: The second positive integer (y <= 1,000,000,000).\n\nReturns:\n- The Hamming distance between x and y, i.e., the number of bits that need to be\nflipped to transform x into y.\n\nExamples:\n- hammingDistance(1, 2) // returns 2\n", "instruction": "Write a JavaScript function `function hammingDistance(x, y)` to solve the following problem:\nCalculate the Hamming distance between two integers in their binary representation.\n\nParameters:\n- x: The first positive integer (x <= 1,000,000,000).\n- y: The second positive integer (y <= 1,000,000,000).\n\nReturns:\n- The Hamming distance between x and y, i.e., the number of bits that need to be\nflipped to transform x into y.\n\nExamples:\n- hammingDistance(1, 2) // returns 2\n", "level": "middle"}
{"task_id": "JavaScript/9", "prompt": "\n/**\n * Count the number of odd integers in a given list of numbers.\n *\n * @param {number} count - The count of numbers to evaluate.\n * @param {...number} nums - A sequence of integers.\n * @returns {number} The count of odd numbers in the input list.\n * @example\n * countOddNumbers(5, 1, 4, 3, 2, 5) // returns 3\n */\nfunction countOddNumbers(count, ...nums)", "canonical_solution": "{\n    let ans = 0;\n    for (let i = 0; i < count; i++) {\n        if (nums[i] % 2 !== 0) {\n            ans++;\n        }\n    }\n    return ans;\n}", "test": "const testCountOddNumbers = () => {\n    console.assert(countOddNumbers(5, 1, 4, 3, 2, 5) === 3, \"Test 1 failed\");\n    console.assert(countOddNumbers(4, 2, 2, 0, 0) === 0, \"Test 2 failed\");\n    console.assert(countOddNumbers(6, 7, 7, 8, 1, 9, 10) === 4, \"Test 3 failed\"); // Additional Test Sample\n    // console.log(\"All tests passed!\");\n}\n\ntestCountOddNumbers();", "entry_point": "countOddNumbers", "signature": "function countOddNumbers(count, ...nums)", "docstring": "Count the number of odd integers in a given list of numbers.\n\nParameters:\n@param {number} count - The count of numbers to evaluate.\n@param {...number} nums - A sequence of integers.\n\nReturns:\n@returns {number} The count of odd numbers in the input list.\n\nExample:\n@example\n countOddNumbers(5, 1, 4, 3, 2, 5) // returns 3", "instruction": "Write a JavaScript function `function countOddNumbers(count, ...nums)` to solve the following problem:\nCount the number of odd integers in a given list of numbers.\n\nParameters:\n@param {number} count - The count of numbers to evaluate.\n@param {...number} nums - A sequence of integers.\n\nReturns:\n@returns {number} The count of odd numbers in the input list.\n\nExample:\n@example\n countOddNumbers(5, 1, 4, 3, 2, 5) // returns 3", "level": "easy"}
{"task_id": "JavaScript/10", "prompt": "\n/**\n * Calculate the sum of even numbers in a given list.\n * Parameters:\n * - numbers (Array): An array of integers.\n * - size (Number): The size of the array.\n * Returns:\n *   Number: The sum of even numbers in the input array.\n * Example usage:\n *   calculateEvenSum([1, 4, 3, 2, 5], 5)  // returns 6\n */\nfunction calculateEvenSum(numbers, size)", "canonical_solution": "{\n    let ans = 0;\n    for (let i = 0; i < size; i++) {\n        if (numbers[i] % 2 === 0) { // Only sum the even numbers\n            ans += numbers[i];\n        }\n    }\n    return ans;\n}", "test": "const testCalculateEvenSum = () => {\n    console.assert(calculateEvenSum([1, 4, 3, 2, 5], 5) === 6);\n    console.assert(calculateEvenSum([2, 2, 0, 0], 4) === 4);\n    console.assert(calculateEvenSum([7, 11, 19], 3) === 0); // Should return 0 because there are no even numbers\n    console.assert(calculateEvenSum([12, 14, 16, 18, 20], 5) === (12 + 14 + 16 + 18 + 20));\n\n    // console.log(\"All tests passed successfully.\");\n}\n\ntestCalculateEvenSum();", "entry_point": "calculateEvenSum", "signature": "function calculateEvenSum(numbers, size)", "docstring": "Calculate the sum of even numbers in a given list.\nParameters:\n- numbers (Array): An array of integers.\n- size (Number): The size of the array.\nReturns:\n  Number: The sum of even numbers in the input array.\nExample usage:\n  calculateEvenSum([1, 4, 3, 2, 5], 5)  // returns 6\n", "instruction": "Write a JavaScript function `function calculateEvenSum(numbers, size)` to solve the following problem:\nCalculate the sum of even numbers in a given list.\nParameters:\n- numbers (Array): An array of integers.\n- size (Number): The size of the array.\nReturns:\n  Number: The sum of even numbers in the input array.\nExample usage:\n  calculateEvenSum([1, 4, 3, 2, 5], 5)  // returns 6\n", "level": "easy"}
{"task_id": "JavaScript/11", "prompt": "// No import is necessary as we're not using any modules or libraries\n/**\n * Determine if two closed intervals intersect.\n * \n * @param {number} a - Start of the first closed interval, must satisfy 0 <= a <= b <= 1000.\n * @param {number} b - End of the first closed interval, must satisfy 0 <= a <= b <= 1000.\n * @param {number} c - Start of the second closed interval, must satisfy 0 <= c <= d <= 1000.\n * @param {number} d - End of the second closed interval, must satisfy 0 <= c <= d <= 1000.\n * @returns {number} 1 if the intervals intersect, 0 otherwise.\n */\nfunction areIntervalsIntersecting(a, b, c, d)", "canonical_solution": "{\n    if ((c <= a && b <= d) ||\n        (a <= c && c <= b && b <= d) ||\n        (a <= c && d <= b) ||\n        (c <= a && a <= d && d <= b)) {\n        return 1; // Yes\n    } else {\n        return 0; // No\n    }\n}", "test": "const testAreIntervalsIntersecting = () => {\n    console.assert(areIntervalsIntersecting(1, 1, 1, 2) === 1);\n    console.assert(areIntervalsIntersecting(3, 5, 2, 6) === 1);\n    console.assert(areIntervalsIntersecting(3, 5, 4, 7) === 1);\n    console.assert(areIntervalsIntersecting(3, 5, 6, 7) === 0);\n    // Additional test cases\n    console.assert(areIntervalsIntersecting(0, 0, 0, 0) === 1);\n    console.assert(areIntervalsIntersecting(1, 3, 2, 4) === 1);\n    console.assert(areIntervalsIntersecting(1, 3, 4, 6) === 0);\n    console.assert(areIntervalsIntersecting(10, 20, 20, 30) === 1);\n    console.assert(areIntervalsIntersecting(10, 20, 21, 30) === 0);\n\n    // console.log(\"All tests passed.\");\n}\n\ntestAreIntervalsIntersecting();", "entry_point": "areIntervalsIntersecting", "signature": "function areIntervalsIntersecting(a, b, c, d)", "docstring": "Determine if two closed intervals intersect.\n\n@param {number} a - Start of the first closed interval, must satisfy 0 <= a <= b <= 1000.\n@param {number} b - End of the first closed interval, must satisfy 0 <= a <= b <= 1000.\n@param {number} c - Start of the second closed interval, must satisfy 0 <= c <= d <= 1000.\n@param {number} d - End of the second closed interval, must satisfy 0 <= c <= d <= 1000.\n@returns {number} 1 if the intervals intersect, 0 otherwise.\n", "instruction": "Write a JavaScript function `function areIntervalsIntersecting(a, b, c, d)` to solve the following problem:\nDetermine if two closed intervals intersect.\n\n@param {number} a - Start of the first closed interval, must satisfy 0 <= a <= b <= 1000.\n@param {number} b - End of the first closed interval, must satisfy 0 <= a <= b <= 1000.\n@param {number} c - Start of the second closed interval, must satisfy 0 <= c <= d <= 1000.\n@param {number} d - End of the second closed interval, must satisfy 0 <= c <= d <= 1000.\n@returns {number} 1 if the intervals intersect, 0 otherwise.\n", "level": "easy"}
{"task_id": "JavaScript/12", "prompt": "\n/**\n * Given three digits a, b, and c, where two of them are equal and the third is different,\n * this function finds and returns the value that occurs exactly once.\n * Examples:\n * extraNumber(0, 0, 1) // returns 1\n * extraNumber(4, 3, 4) // returns 3\n */\nfunction extraNumber(a, b, c)", "canonical_solution": "{\n    if (a === b) {\n        return c;\n    } else if (a === c) {\n        return b;\n    } else {\n        return a;\n    }\n}", "test": "const testExtraNumber = () => {\n    console.assert(extraNumber(2, 7, 2) === 7, 'Test with 2, 7, 2 failed');\n    console.assert(extraNumber(3, 2, 2) === 3, 'Test with 3, 2, 2 failed');\n    console.assert(extraNumber(5, 5, 1) === 1, 'Test with 5, 5, 1 failed');\n    console.assert(extraNumber(500000000, 3, 500000000) === 3, 'Test with 500000000, 3, 500000000 failed');\n    console.assert(extraNumber(500000000, 500000000, 3) === 3, 'Test with 500000000, 500000000, 3 failed');\n};\n\ntestExtraNumber();", "entry_point": "extraNumber", "signature": "function extraNumber(a, b, c)", "docstring": "Given three digits a, b, and c, where two of them are equal and the third is different,\nthis function finds and returns the value that occurs exactly once.\nExamples:\nextraNumber(0, 0, 1) // returns 1\nextraNumber(4, 3, 4) // returns 3\n", "instruction": "Write a JavaScript function `function extraNumber(a, b, c)` to solve the following problem:\nGiven three digits a, b, and c, where two of them are equal and the third is different,\nthis function finds and returns the value that occurs exactly once.\nExamples:\nextraNumber(0, 0, 1) // returns 1\nextraNumber(4, 3, 4) // returns 3\n", "level": "easy"}
{"task_id": "JavaScript/13", "prompt": "\n/**\n * Calculate the total score for a student based on the scores in different subjects.\n * @param {number} score1 - The score in the first subject.\n * @param {number} score2 - The score in the second subject.\n * @param {number} score3 - The score in the third subject.\n * @param {number} score4 - The score in the fourth subject.\n * @param {number} score5 - The score in the fifth subject.\n * @returns {number} The total score obtained by summing up the scores in all subjects.\n * @example\n * calculateTotalScore(100, 100, 100, 100, 100); // returns 500\n */\nfunction calculateTotalScore(score1, score2, score3, score4, score5)", "canonical_solution": "{\n    return score1 + score2 + score3 + score4 + score5;\n}", "test": "function testCalculateTotalScore() {\n    console.assert(calculateTotalScore(100, 100, 100, 100, 100) === 500, 'Test failed: Expected 500 for all 100 scores');\n    console.assert(calculateTotalScore(0, 0, 0, 0, 0) === 0, 'Test failed: Expected 0 for all 0 scores');\n    console.assert(calculateTotalScore(20, 30, 40, 10, 50) === 150, 'Test failed: Expected 150 for mixed scores');\n    console.assert(calculateTotalScore(23, 45, 67, 89, 12) === 236, 'Test failed: Expected 236 for mixed scores');\n    console.assert(calculateTotalScore(5, 5, 5, 5, 5) === 25, 'Test failed: Expected 25 for all 5 scores');\n}\n\ntestCalculateTotalScore(); // Running the test function to validate our code", "entry_point": "calculateTotalScore", "signature": "function calculateTotalScore(score1, score2, score3, score4, score5)", "docstring": "Calculate the total score for a student based on the scores in different subjects.\n@param {number} score1 - The score in the first subject.\n@param {number} score2 - The score in the second subject.\n@param {number} score3 - The score in the third subject.\n@param {number} score4 - The score in the fourth subject.\n@param {number} score5 - The score in the fifth subject.\n@returns {number} The total score obtained by summing up the scores in all subjects.\n@example\ncalculateTotalScore(100, 100, 100, 100, 100); // returns 500\n", "instruction": "Write a JavaScript function `function calculateTotalScore(score1, score2, score3, score4, score5)` to solve the following problem:\nCalculate the total score for a student based on the scores in different subjects.\n@param {number} score1 - The score in the first subject.\n@param {number} score2 - The score in the second subject.\n@param {number} score3 - The score in the third subject.\n@param {number} score4 - The score in the fourth subject.\n@param {number} score5 - The score in the fifth subject.\n@returns {number} The total score obtained by summing up the scores in all subjects.\n@example\ncalculateTotalScore(100, 100, 100, 100, 100); // returns 500\n", "level": "easy"}
{"task_id": "JavaScript/14", "prompt": "\n/**\n * Decode a series of numbers to reveal the pattern and understand the actual values\n * each digit represents. The patterns are as follows:\n * 0000=4, 8888=8, 1234=1, 5678=3, 9012=2, 1357=0, 2468=4.\n *\n * @param {string} dataStr - A string representing a series of numbers.\n *                           The length does not exceed 100 characters.\n * @return {number} The result corresponding to each data string as per the pattern.\n *\n * Example usage:\n * console.assert(decodeNumbers(\"0000\") === 4);\n */\nfunction decodeNumbers(dataStr)", "canonical_solution": "{\n    // Mapping values as per the given pattern\n    const a = [1, 0, 0, 0, 1, 0, 1, 0, 2, 1];\n    let ans = 0;\n    for (let i = 0; i < dataStr.length; i++) {\n        ans += a[dataStr[i] - '0']; // Subtracting '0' to convert char to actual number\n    }\n    return ans;\n}", "test": "function testDecodeNumbers() {\n    console.assert(decodeNumbers(\"0000\") === 4, \"Test 0000 failed\");\n    console.assert(decodeNumbers(\"8888\") === 8, \"Test 8888 failed\");\n    console.assert(decodeNumbers(\"1234\") === 1, \"Test 1234 failed\");\n    console.assert(decodeNumbers(\"5678\") === 3, \"Test 5678 failed\");\n    console.assert(decodeNumbers(\"9012\") === 2, \"Test 9012 failed\");\n    console.assert(decodeNumbers(\"1357\") === 0, \"Test 1357 failed\");\n    console.assert(decodeNumbers(\"2468\") === 4, \"Test 2468 failed\");\n\n    // Additional test samples\n    console.assert(decodeNumbers(\"9999\") === 4, \"Test 9999 failed\");\n    console.assert(decodeNumbers(\"1111\") === 0, \"Test 1111 failed\");\n    console.assert(decodeNumbers(\"2222\") === 0, \"Test 2222 failed\");\n    console.assert(decodeNumbers(\"3333\") === 0, \"Test 3333 failed\");\n    console.assert(decodeNumbers(\"4444\") === 4, \"Test 4444 failed\");\n    console.assert(decodeNumbers(\"5555\") === 0, \"Test 5555 failed\");\n    console.assert(decodeNumbers(\"6666\") === 4, \"Test 6666 failed\");\n    console.assert(decodeNumbers(\"7777\") === 0, \"Test 7777 failed\");\n    console.assert(decodeNumbers(\"0001\") === 3, \"Test 0001 failed\");\n    console.assert(decodeNumbers(\"2301\") === 1, \"Test 2301 failed\");\n}\n\ntestDecodeNumbers();", "entry_point": "decodeNumbers", "signature": "function decodeNumbers(dataStr)", "docstring": "Decode a series of numbers to reveal the pattern and understand the actual values each digit represents. The patterns are as follows: 0000=4, 8888=8, 1234=1, 5678=3, 9012=2, 1357=0, 2468=4.\n\nParameters:\n- dataStr (string): A string representing a series of numbers. The length does not exceed 100 characters.\n\nReturns:\n- number: The result corresponding to each data string as per the pattern.\n\nExample usage:\nconsole.assert(decodeNumbers(\"0000\") === 4);", "instruction": "Write a JavaScript function `function decodeNumbers(dataStr)` to solve the following problem:\nDecode a series of numbers to reveal the pattern and understand the actual values each digit represents. The patterns are as follows: 0000=4, 8888=8, 1234=1, 5678=3, 9012=2, 1357=0, 2468=4.\n\nParameters:\n- dataStr (string): A string representing a series of numbers. The length does not exceed 100 characters.\n\nReturns:\n- number: The result corresponding to each data string as per the pattern.\n\nExample usage:\nconsole.assert(decodeNumbers(\"0000\") === 4);", "level": "easy"}
{"task_id": "JavaScript/15", "prompt": "// No need to import modules in JavaScript like in C\n/**\n * Counts the number of different coloring methods for n squares with m colors,\n * considering the requirement that adjacent squares and the first/last squares\n * must have different colors.\n * @param {number} n - The number of squares.\n * @param {number} m - The number of colors.\n * @return {number} The count of different coloring methods satisfying the conditions,\n *                  result is modulo 1000003.\n * Example:\n * count_coloring_methods(1,1) // 1\n * count_coloring_methods(2,3) // 6\n */\nfunction count_coloring_methods(n, m)", "canonical_solution": "{\n    const MOD = 1000003;\n    let f = new Array(1111); // Array to store results\n    if (n === 1) return m;\n    if (n === 2) return (m * (m - 1)) % MOD;\n\n    // Initialize the first three elements\n    f[1] = m;\n    f[2] = (m * (m - 1)) % MOD;\n    // Formula derived from the given gold.c code\n    f[3] = (f[2] * (m - 2)) % MOD;\n\n    for (let i = 4; i <= n; i++) {\n        f[i] = ((f[i - 1] * (m - 2)) % MOD +\n                (f[i - 2] * (m - 1)) % MOD) % MOD;\n    }\n    return f[n];\n}", "test": "(function testCountColoringMethods() {\n    console.assert(count_coloring_methods(1, 1) === 1, 'Test case 1 failed');\n    console.assert(count_coloring_methods(2, 2) === 2, 'Test case 2 failed');\n    console.assert(count_coloring_methods(3, 3) === 6, 'Test case 3 failed');\n    console.assert(count_coloring_methods(4, 2) === 2, 'Test case 4 failed');\n    // For large numbers like 1000, 10 in JavaScript sometimes it might not be possible \n    // to directly assert the expected result since it is not provided in the original code.\n    console.assert(count_coloring_methods(2, 3) === 6, 'Test case 5 failed');\n    console.assert(count_coloring_methods(1000, 1000) === 67911, 'Test case 6 failed');\n    console.assert(count_coloring_methods(999, 66) === 501817, 'Test case 7 failed');\n    console.assert(count_coloring_methods(5, 3) === 30, 'Test case 8 failed');\n    \n    // console.log(\"All tests passed!\");\n})();", "entry_point": "count_coloring_methods", "signature": "function count_coloring_methods(n, m)", "docstring": "Counts the number of different coloring methods for n squares with m colors,\nconsidering the requirement that adjacent squares and the first/last squares\nmust have different colors.\nParameters:\n- n (number): The number of squares.\n- m (number): The number of colors.\nReturns:\n- number: The count of different coloring methods satisfying the conditions,\n           result is modulo 1000003.\nExample:\n- count_coloring_methods(1,1) // 1\n- count_coloring_methods(2,3) // 6", "instruction": "Write a JavaScript function `function count_coloring_methods(n, m)` to solve the following problem:\nCounts the number of different coloring methods for n squares with m colors,\nconsidering the requirement that adjacent squares and the first/last squares\nmust have different colors.\nParameters:\n- n (number): The number of squares.\n- m (number): The number of colors.\nReturns:\n- number: The count of different coloring methods satisfying the conditions,\n           result is modulo 1000003.\nExample:\n- count_coloring_methods(1,1) // 1\n- count_coloring_methods(2,3) // 6", "level": "middle"}
{"task_id": "JavaScript/16", "prompt": "\n/**\n * Count the number of valid coin toss sequences with no consecutive heads in n tosses.\n *\n * Parameters:\n * - n (int): The number of coin tosses.\n *\n * Returns:\n *     Number: The count of valid sequences.\n *\n * Examples:\n *     countValidCoinTossSequences(1)\n *     // returns 2\n */\nconst countValidCoinTossSequences = (n) =>", "canonical_solution": "{\n    const a = Array.from({ length: n + 1 }, () => Array(2).fill(0));\n    a[1][0] = a[1][1] = 1;\n    \n    for (let i = 2; i <= n; i++) {\n        a[i][0] = a[i - 1][1] + a[i - 1][0];\n        a[i][1] = a[i - 1][0];\n    }\n    \n    return a[n][0] + a[n][1];\n};", "test": "const testCountValidCoinTossSequences = () => {\n    console.assert(countValidCoinTossSequences(1) === 2);\n    console.assert(countValidCoinTossSequences(2) === 3);\n    console.assert(countValidCoinTossSequences(3) === 5);\n    console.assert(countValidCoinTossSequences(4) === 8);\n    console.assert(countValidCoinTossSequences(5) === 13);\n    // Additional tests\n    console.assert(countValidCoinTossSequences(40) === 267914296);\n    console.assert(countValidCoinTossSequences(39) === 165580141);\n    console.assert(countValidCoinTossSequences(38) === 102334155);\n    // console.log(\"All tests passed!\");\n};\n\ntestCountValidCoinTossSequences();", "entry_point": "countValidCoinTossSequences", "signature": "const countValidCoinTossSequences = (n)", "docstring": "Count the number of valid coin toss sequences with no consecutive heads in n tosses.\n\nParameters:\n- n (int): The number of coin tosses.\n\nReturns:\n    Number: The count of valid sequences.\n\nExamples:\n    countValidCoinTossSequences(1)\n    // returns 2\n", "instruction": "Write a JavaScript function `const countValidCoinTossSequences = (n)` to solve the following problem:\nCount the number of valid coin toss sequences with no consecutive heads in n tosses.\n\nParameters:\n- n (int): The number of coin tosses.\n\nReturns:\n    Number: The count of valid sequences.\n\nExamples:\n    countValidCoinTossSequences(1)\n    // returns 2\n", "level": "easy"}
{"task_id": "JavaScript/17", "prompt": "\n/**\n * Find the length of the longest consecutive sequence of 1s in the binary \n * representation of a non-negative integer.\n *\n * @param {number} n - A non-negative integer (0 \u2264 n \u2264 2^64 - 1).\n * @returns {number} The length of the longest consecutive sequence of 1s in \n *                   the binary representation of the given integer.\n * \n * Examples:\n * findLongestConsecutiveOnesLength(7) === 3\n * findLongestConsecutiveOnesLength(13) === 2\n */\nfunction findLongestConsecutiveOnesLength(n)", "canonical_solution": "{\n    let max = 0;\n    let ans = 0;\n    while (n) {\n        if (n & 1)\n            ans++;\n        else {\n            if (ans > max)\n                max = ans;\n            ans = 0;\n        }\n        n >>>= 1;\n    }\n    if (ans > max)\n        max = ans;\n    return max;\n}", "test": "const testFindLongestConsecutiveOnesLength = () => {\n    console.assert(findLongestConsecutiveOnesLength(7) === 3, \"Test with n = 7\");\n    console.assert(findLongestConsecutiveOnesLength(13) === 2, \"Test with n = 13\");\n    console.assert(findLongestConsecutiveOnesLength(12345) === 3, \"Test with n = 12345\");\n    console.assert(findLongestConsecutiveOnesLength(0b11011101111) === 4, \"Test with n = 0b11011101111\");\n    console.assert(findLongestConsecutiveOnesLength(0xFFFFFFFF) === 32, \"Test with n = 0xFFFFFFFF\");\n    console.assert(findLongestConsecutiveOnesLength(0) === 0, \"Test with n = 0\");\n\n    // console.log(\"All tests passed!\");\n}\n\ntestFindLongestConsecutiveOnesLength();", "entry_point": "findLongestConsecutiveOnesLength", "signature": "function findLongestConsecutiveOnesLength(n)", "docstring": "Find the length of the longest consecutive sequence of 1s in the binary representation of a non-negative integer.\n\nParameters:\n@param {number} n - A non-negative integer (0 \u2264 n \u2264 2^64 - 1).\n\nReturns:\n@returns {number} The length of the longest consecutive sequence of 1s in the binary representation of the given integer.\n\nExamples:\nfindLongestConsecutiveOnesLength(7) === 3\nfindLongestConsecutiveOnesLength(13) === 2\n", "instruction": "Write a JavaScript function `function findLongestConsecutiveOnesLength(n)` to solve the following problem:\nFind the length of the longest consecutive sequence of 1s in the binary representation of a non-negative integer.\n\nParameters:\n@param {number} n - A non-negative integer (0 \u2264 n \u2264 2^64 - 1).\n\nReturns:\n@returns {number} The length of the longest consecutive sequence of 1s in the binary representation of the given integer.\n\nExamples:\nfindLongestConsecutiveOnesLength(7) === 3\nfindLongestConsecutiveOnesLength(13) === 2\n", "level": "easy"}
{"task_id": "JavaScript/18", "prompt": "\n/**\n * Creates an ID by combining two strings in a specific manner.\n * Parameters:\n * - word1 (string): The first string to be used in the ID.\n * - word2 (string): The second string to be used in the ID.\n * Returns:\n * string: A divine ID formed by reversing every other character of the second \n *         string and combining it with the first string.\n * Example usage:\n *   createId('fish','cat') // returns 'ftiasch'\n *   createId('icpc','acm') // returns 'imccpac'\n */\nfunction createId(word1, word2)", "canonical_solution": "{\n    let id = '';\n    for (let i = 0, k = 0, j = word2.length - 1; i < word1.length + word2.length; i++) {\n        if (i % 2 === 0) {\n            id += word1.charAt(k++); // Take character from word1\n        } else {\n            id += word2.charAt(j--); // Take character from word2 in reverse\n        }\n    }\n    return id;\n}", "test": "function testCreateId() {\n    // console.log(createId(\"fish\", \"cat\"))\n    console.assert(createId(\"fish\", \"cat\") === \"ftiasch\", 'Test failed: createId(\"fish\", \"cat\") should be \"ftiasch\"');\n    console.assert(createId(\"icpc\", \"acm\") === \"imccpac\", 'Test failed: createId(\"icpc\", \"acm\") should be \"imccpac\"');\n    console.assert(createId(\"oo\", \"w\") === \"owo\", 'Test failed: createId(\"oo\", \"w\") should be \"owo\"');\n    console.assert(createId(\"hello\", \"world\") === \"hdellrloow\", 'Test failed: createId(\"hello\", \"world\") should be \"hdellrloow\"');\n    console.assert(createId(\"abc\", \"def\") === \"afbecd\", 'Test failed: createId(\"abc\", \"def\") should be \"afbecd\"');\n    console.assert(createId(\"buaanb\", \"nbbuaa\") === \"bauaauabnbbn\", 'Test failed: createId(\"buaanb\", \"nbbuaa\") should be \"bauaauabnbbn\"');\n    console.assert(createId(\"xtuisgood\", \"ilovextu\") === \"xuttuxiesvgooloid\", 'Test failed: createId(\"xtuisgood\", \"ilovextu\") should be \"xuttuxiesvgooloid\"');\n}\n\ntestCreateId();", "entry_point": "createId", "signature": "function createId(word1, word2)", "docstring": "Creates an ID by combining two strings in a specific manner.\nParameters:\n- word1 (string): The first string to be used in the ID.\n- word2 (string): The second string to be used in the ID.\nReturns:\nstring: A divine ID formed by reversing every other character of the second string and combining it with the first string.\nExample usage:\n  createId('fish','cat') // returns 'ftiasch'\n  createId('icpc','acm') // returns 'imccpac'\n", "instruction": "Write a JavaScript function `function createId(word1, word2)` to solve the following problem:\nCreates an ID by combining two strings in a specific manner.\nParameters:\n- word1 (string): The first string to be used in the ID.\n- word2 (string): The second string to be used in the ID.\nReturns:\nstring: A divine ID formed by reversing every other character of the second string and combining it with the first string.\nExample usage:\n  createId('fish','cat') // returns 'ftiasch'\n  createId('icpc','acm') // returns 'imccpac'\n", "level": "easy"}
{"task_id": "JavaScript/19", "prompt": "\n/**\n * Count the number of different permutation schemes for a binary string of length n,\n * where the number of '1's is m and the number of '0's is n - m.\n *\n * @param {number} n - Length of the binary string.\n * @param {number} m - Number of '1's in the binary string.\n *\n * @returns {number} The total number of different permutation schemes.\n */\nfunction countPermutationsOfBinaryString(n, m)", "canonical_solution": "{\n    let factorial = 1;\n    let i;\n\n    // Calculate n factorial (n!)\n    for (i = 2; i <= n; ++i) {\n        factorial *= i;\n    }\n\n    let numerator = factorial; // n!\n\n    // Calculate (n+m)/2 factorial\n    factorial = 1;\n    for (i = 2; i <= (n + m) / 2; ++i) {\n        factorial *= i;\n    }\n\n    let denominator1 = factorial; // ((n+m)/2)!\n\n    // Calculate (n-m)/2 factorial\n    factorial = 1;\n    for (i = 2; i <= (n - m) / 2; ++i) {\n        factorial *= i;\n    }\n\n    let denominator2 = factorial; // ((n-m)/2)!\n\n    // Check for edge cases\n    if ((n + m) % 2 === 1) {\n        return 0;\n    } else if (n === m) {\n        return 1;\n    } else {\n        // Calculating the number of permutations using the factorial values\n        return Math.round(numerator / denominator1 / denominator2);\n    }\n}", "test": "function testCountPermutationsOfBinaryString() {\n    console.assert(countPermutationsOfBinaryString(2, 0) === 2);\n    console.assert(countPermutationsOfBinaryString(2, 1) === 0);\n    console.assert(countPermutationsOfBinaryString(3, 0) === 0);\n    console.assert(countPermutationsOfBinaryString(3, 1) === 3);\n    console.assert(countPermutationsOfBinaryString(3, 2) === 0);\n    console.assert(countPermutationsOfBinaryString(30, 2) === 145422675);\n    console.assert(countPermutationsOfBinaryString(4, 2) === 4);\n    console.assert(countPermutationsOfBinaryString(5, 5) === 1);\n    console.assert(countPermutationsOfBinaryString(33, 17) === 13884156);\n    console.assert(countPermutationsOfBinaryString(1000, 1000) === 1);\n    // Add more test cases if necessary\n}\n\ntestCountPermutationsOfBinaryString();", "entry_point": "countPermutationsOfBinaryString", "signature": "function countPermutationsOfBinaryString(n, m)", "docstring": "Count the number of different permutation schemes for a binary string of length n, where the number of '1's is m and the number of '0's is n - m.\n\nParameters:\n@param {number} n - Length of the binary string.\n@param {number} m - Number of '1's in the binary string.\n\nReturns:\n@returns {number} The total number of different permutation schemes.", "instruction": "Write a JavaScript function `function countPermutationsOfBinaryString(n, m)` to solve the following problem:\nCount the number of different permutation schemes for a binary string of length n, where the number of '1's is m and the number of '0's is n - m.\n\nParameters:\n@param {number} n - Length of the binary string.\n@param {number} m - Number of '1's in the binary string.\n\nReturns:\n@returns {number} The total number of different permutation schemes.", "level": "hard"}
{"task_id": "JavaScript/20", "prompt": "\n/**\n * Answer a series of questions by providing choices A, B, C, or D for each question.\n * Question 1:\n * Constants like 1e6 belong to which data type?\n *     A. unsigned int\n *     B. int\n *     C. float\n *     D. double\n * Question 2:\n * Given 21! = 51,090,942,171,709,440,000, which data type can be used to store this value?\n *     A. int\n *     B. long long\n *     C. double\n *     D. None of the above\n * Question 3:\n * Which statement about left values in expressions is incorrect?\n *     A. Variable name expressions are left values.\n *     B. Increment operation requires the operand to be a left value.\n *     C. Pointer dereference expressions are left values.\n *     D. Prefix increment operation expressions are left values.\n * Question 4:\n * Which statement about functions is incorrect?\n *     A. Formal parameters of a function are local variables.\n *     B. Local variables are allocated space in the stack.\n *     C. The function type is the same as the return value type.\n *     D. A function can call itself from within its body.\n * Question 5:\n * Which statement about pointers is incorrect?\n *     A. Subtracting two pointers equals the difference in their address values.\n *     B. Pointer dereference involves resolving based on the pointer's type.\n *     C. int *p[4], p is an array of int pointers.\n *     D. Function names can be assigned to function pointers.\n *     >>> answer_questions()\n *     AAAAA\n * You're supposed to only return strings similar to \"AAAAA\", which stand for the choices of the question.\n */\nfunction answer_questions()", "canonical_solution": "{\n    return \"DDDBA\";\n}", "test": "function testAnswerQuestions() {\n    const expected_answers = \"DDDBA\";\n    console.assert(answer_questions() === expected_answers, \"The function should return DDDBA as the correct answer.\");\n}\n\n// Running the tests\ntestAnswerQuestions();", "entry_point": "answer_questions", "signature": "function answer_questions()", "docstring": "Answer a series of questions by providing choices A, B, C, or D for each question.\nQuestion 1:\nConstants like 1e6 belong to which data type?\n    A. unsigned int\n    B. int\n    C. float\n    D. double\nQuestion 2:\nGiven 21! = 51,090,942,171,709,440,000, which data type can be used to store this value?\n    A. int\n    B. long long\n    C. double\n    D. None of the above\nQuestion 3:\nWhich statement about left values in expressions is incorrect?\n    A. Variable name expressions are left values.\n    B. Increment operation requires the operand to be a left value.\n    C. Pointer dereference expressions are left values.\n    D. Prefix increment operation expressions are left values.\nQuestion 4:\nWhich statement about functions is incorrect?\n    A. Formal parameters of a function are local variables.\n    B. Local variables are allocated space in the stack.\n    C. The function type is the same as the return value type.\n    D. A function can call itself from within its body.\nQuestion 5:\nWhich statement about pointers is incorrect?\n    A. Subtracting two pointers equals the difference in their address values.\n    B. Pointer dereference involves resolving based on the pointer's type.\n    C. int *p[4], p is an array of int pointers.\n    D. Function names can be assigned to function pointers.\n    >>> answer_questions()\n    AAAAA\nYou're supposed to only return strings similar to \"AAAAA\", which stand for the choices of the question.", "instruction": "Write a JavaScript function `function answer_questions()` to solve the following problem:\nAnswer a series of questions by providing choices A, B, C, or D for each question.\nQuestion 1:\nConstants like 1e6 belong to which data type?\n    A. unsigned int\n    B. int\n    C. float\n    D. double\nQuestion 2:\nGiven 21! = 51,090,942,171,709,440,000, which data type can be used to store this value?\n    A. int\n    B. long long\n    C. double\n    D. None of the above\nQuestion 3:\nWhich statement about left values in expressions is incorrect?\n    A. Variable name expressions are left values.\n    B. Increment operation requires the operand to be a left value.\n    C. Pointer dereference expressions are left values.\n    D. Prefix increment operation expressions are left values.\nQuestion 4:\nWhich statement about functions is incorrect?\n    A. Formal parameters of a function are local variables.\n    B. Local variables are allocated space in the stack.\n    C. The function type is the same as the return value type.\n    D. A function can call itself from within its body.\nQuestion 5:\nWhich statement about pointers is incorrect?\n    A. Subtracting two pointers equals the difference in their address values.\n    B. Pointer dereference involves resolving based on the pointer's type.\n    C. int *p[4], p is an array of int pointers.\n    D. Function names can be assigned to function pointers.\n    >>> answer_questions()\n    AAAAA\nYou're supposed to only return strings similar to \"AAAAA\", which stand for the choices of the question.", "level": "easy"}
{"task_id": "JavaScript/21", "prompt": "\n/**\n * Determines if it is possible to assemble the wooden squares from n buckets,\n * where each bucket contains a_i squares with a side length of 1, into a single larger square.\n * Input: length of the list, array of numbers\n * @param {number} length - The number of buckets.\n * @param {number[]} squares - An array of numbers, where each number represents the count of squares in a bucket.\n * @returns {boolean} - Returns true if it's possible to form a perfect square, otherwise returns false.\n *\n * Examples:\n * Is_Square(1, [9]) // true\n */\nfunction Is_Square(length, squares)", "canonical_solution": "{\n    let sum = 0;\n    for (let i = 0; i < length; ++i) {\n        sum += squares[i]; // Summing the squares\n    }\n    let root = Math.sqrt(sum);\n    return Math.floor(root) === root; // Checking if sum is a perfect square\n}", "test": "const testIsSquare = () => {\n    console.assert(Is_Square(1, [9]) === true);\n    console.assert(Is_Square(2, [14, 2]) === true);\n    console.assert(Is_Square(2, [7, 7]) === false);\n    console.assert(Is_Square(7, [1, 2, 3, 4, 5, 6, 7]) === false);\n    console.assert(Is_Square(6, [1, 3, 5, 7, 9, 11]) === true);\n    console.assert(Is_Square(4, [2, 2, 2, 2]) === false);\n\n    // Additional test cases\n    console.assert(Is_Square(3, [4, 5, 6]) === false);\n    console.assert(Is_Square(4, [16, 9, 4, 1]) === false);\n    console.assert(Is_Square(5, [1, 1, 1, 1, 1]) === false);\n    console.assert(Is_Square(2, [25, 25]) === false);\n    console.assert(Is_Square(3, [10, 10, 5]) === true);\n\n    // console.log(\"All tests passed!\");\n}\n\ntestIsSquare();", "entry_point": "Is_Square", "signature": "function Is_Square(length, squares)", "docstring": "Determines if it is possible to assemble the wooden squares from n buckets,\nwhere each bucket contains a_i squares with a side length of 1, into a single larger square.\nInput: length of the list, array of numbers\nParameters:\n- length (number): The number of buckets.\n- squares (number[]): An array of numbers, where each number represents the count of squares in a bucket.\nReturns:\n- boolean: Returns true if it's possible to form a perfect square, otherwise returns false.\n\nExamples:\nIs_Square(1, [9]) // true\n", "instruction": "Write a JavaScript function `function Is_Square(length, squares)` to solve the following problem:\nDetermines if it is possible to assemble the wooden squares from n buckets,\nwhere each bucket contains a_i squares with a side length of 1, into a single larger square.\nInput: length of the list, array of numbers\nParameters:\n- length (number): The number of buckets.\n- squares (number[]): An array of numbers, where each number represents the count of squares in a bucket.\nReturns:\n- boolean: Returns true if it's possible to form a perfect square, otherwise returns false.\n\nExamples:\nIs_Square(1, [9]) // true\n", "level": "easy"}
{"task_id": "JavaScript/22", "prompt": "\n/**\n * Given integers c and d, where a + b = c and a * b = d, find and return the\n * possible value of a (a <= b). If there are multiple groups, output the group\n * with the smallest a.\n * \n * Parameters:\n *   - c (int): The sum of a and b.\n *   - d (int): The product of a and b.\n * \n * Returns:\n *   A possible value of a or -1 if valid values do not exist.\n * \n * Examples:\n *   findIntegers(7, 11) // returns -1\n *   findIntegers(5, 6)  // returns 2\n */\nfunction findIntegers(c, d)", "canonical_solution": "{\n    for (let i = 0; i <= c / 2; i++) {\n        if (i * (c - i) !== d) continue;\n        return i;\n    }\n    return -1; // Return -1 if no valid pairs (a, b) are found.\n}", "test": "const testFindIntegers = () => {\n    console.assert(findIntegers(5, 6) === 2, \"Expected 2\");\n    console.assert(findIntegers(6, 9) === 3, \"Expected 3\");\n    console.assert(findIntegers(7, 12) === 3, \"Expected 3\");\n    console.assert(findIntegers(7, 11) === -1, \"Expected -1\");\n    console.assert(findIntegers(9, 8) === 1, \"Expected 1\");\n    console.assert(findIntegers(10, 25) === 5, \"Expected 5\");\n    console.assert(findIntegers(10000, 8765) === -1, \"Expected -1\");\n    // console.log(\"All tests passed successfully.\");\n}\n\ntestFindIntegers();", "entry_point": "findIntegers", "signature": "function findIntegers(c, d)", "docstring": "Given integers c and d, where a + b = c and a * b = d, find and return the possible value of a (a <= b). If there are multiple groups, output the group with the smallest a.\n\nParameters:\n  - c (int): The sum of a and b.\n  - d (int): The product of a and b.\n\nReturns:\n  A possible value of a or -1 if valid values do not exist.\n\nExamples:\n  findIntegers(7, 11) // returns -1\n  findIntegers(5, 6)  // returns 2\n", "instruction": "Write a JavaScript function `function findIntegers(c, d)` to solve the following problem:\nGiven integers c and d, where a + b = c and a * b = d, find and return the possible value of a (a <= b). If there are multiple groups, output the group with the smallest a.\n\nParameters:\n  - c (int): The sum of a and b.\n  - d (int): The product of a and b.\n\nReturns:\n  A possible value of a or -1 if valid values do not exist.\n\nExamples:\n  findIntegers(7, 11) // returns -1\n  findIntegers(5, 6)  // returns 2\n", "level": "easy"}
{"task_id": "JavaScript/23", "prompt": "\n/**\n * Count the number of acute-angled triangles that can be formed by selecting any 3 edges out of a given set of edges.\n * \n * @param {number} edges_count - The number of edges.\n * @param {...number} edges - The lengths of the edges.\n * @returns {number} The count of distinct acute-angled triangles that can be formed.\n * \n * Examples:\n * count_acute_triangles(4, 1, 1, 1, 1) // returns 4\n */\nfunction count_acute_triangles(edges_count, ...edges)", "canonical_solution": "{\n    // Sort the edges array\n    edges.sort((a, b) => a - b);\n\n    let sum = 0;\n    // Check each combination of three edges for an acute triangle.\n    for (let i = 0; i < edges_count - 2; i++) {\n        for (let j = i + 1; j < edges_count - 1; j++) {\n            for (let k = j + 1; k < edges_count; k++) {\n                const x = edges[i], y = edges[j], z = edges[k];\n                // The sum of any two sides must be greater than the third, and\n                // it needs to meet the acute angle criteria via Pythagoras.\n                if (x + y > z && (x * x + y * y > z * z)) {\n                    sum++;\n                }\n            }\n        }\n    }\n    return sum;\n}", "test": "(function testAcuteTriangles() {\n    console.assert(count_acute_triangles(4, 1, 1, 1, 1) === 4, \"Test case 1 failed\");\n    console.assert(count_acute_triangles(3, 1, 2, 3) === 0, \"Test case 2 failed\");\n    // Additional tests to ensure correctness\n    console.assert(count_acute_triangles(5, 3, 4, 5, 7, 10) === 0, \"Test case 3 failed\");\n    console.assert(count_acute_triangles(6, 6, 8, 10, 5, 5, 5) === 4, \"Test case 4 failed\");\n})();", "entry_point": "count_acute_triangles", "signature": "function count_acute_triangles(edges_count, ...edges)", "docstring": "Count the number of acute-angled triangles that can be formed by selecting any 3 edges out of a given set of edges.\n\nParameters:\n- edges_count (number): The number of edges.\n- edges (...number): The lengths of the edges.\n\nReturns:\n- number: The count of distinct acute-angled triangles that can be formed.\n\nExamples:\n- count_acute_triangles(4, 1, 1, 1, 1) // returns 4\n", "instruction": "Write a JavaScript function `function count_acute_triangles(edges_count, ...edges)` to solve the following problem:\nCount the number of acute-angled triangles that can be formed by selecting any 3 edges out of a given set of edges.\n\nParameters:\n- edges_count (number): The number of edges.\n- edges (...number): The lengths of the edges.\n\nReturns:\n- number: The count of distinct acute-angled triangles that can be formed.\n\nExamples:\n- count_acute_triangles(4, 1, 1, 1, 1) // returns 4\n", "level": "hard"}
{"task_id": "JavaScript/24", "prompt": "\n/**\n * Reads an integer and a character, then returns them as a formatted string separated by a comma.\n * Parameters:\n * - integer_value (number): The input integer.\n * - char_value (string): The input character.\n * Returns:\n * - string: A string containing the integer and character separated by a comma.\n * Examples:\n * process_integer_and_char(234, 'H') returns '234,H'\n */\nfunction process_integer_and_char(integer_value, char_value)", "canonical_solution": "{\n    // Format the string\n    return `${integer_value},${char_value}`;\n}", "test": "const testProcessIntegerAndChar = () => {\n    console.assert(process_integer_and_char(234, 'H') === '234,H', 'Test 1 Failed');\n    console.assert(process_integer_and_char(123, 'A') === '123,A', 'Test 2 Failed');\n    console.assert(process_integer_and_char(0, 'Z') === '0,Z', 'Test 3 Failed');\n}\n\ntestProcessIntegerAndChar();", "entry_point": "process_integer_and_char", "signature": "function process_integer_and_char(integer_value, char_value)", "docstring": "Reads an integer and a character, then returns them as a formatted string separated by a comma.\nParameters:\n- integer_value (number): The input integer.\n- char_value (string): The input character.\nReturns:\n- string: A string containing the integer and character separated by a comma.\nExamples:\nprocess_integer_and_char(234, 'H') returns '234,H'\n", "instruction": "Write a JavaScript function `function process_integer_and_char(integer_value, char_value)` to solve the following problem:\nReads an integer and a character, then returns them as a formatted string separated by a comma.\nParameters:\n- integer_value (number): The input integer.\n- char_value (string): The input character.\nReturns:\n- string: A string containing the integer and character separated by a comma.\nExamples:\nprocess_integer_and_char(234, 'H') returns '234,H'\n", "level": "easy"}
{"task_id": "JavaScript/25", "prompt": "\n/**\n * Shifts all characters by 5 positions in alphabetical order.\n * Only letters are replaced, and all letters are in uppercase.\n *\n * @param {string} text The input text to be processed.\n * @returns {string} The transformed text with characters shifted by 5 positions.\n *\n * @example\n * shiftCharacters(\"NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX\")\n * // returns \"IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES\"\n */\nfunction shiftCharacters(text)", "canonical_solution": "{\n    let shiftedText = '';\n    for (let i = 0; i < text.length; ++i) {\n        if ('A' <= text[i] && text[i] <= 'E') {\n            shiftedText += String.fromCharCode(text.charCodeAt(i) + 21); // 'V' - 'A' = 21\n        } else if ('F' <= text[i] && text[i] <= 'Z') {\n            shiftedText += String.fromCharCode(text.charCodeAt(i) - 5); // 'A' - 'F' = -5\n        } else {\n            shiftedText += text[i];\n        }\n    }\n    return shiftedText;\n}", "test": "const testShiftCharacters = () => {\n    console.assert(shiftCharacters(\"NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX\") === \"IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES\", 'Test 1 failed');\n    console.assert(shiftCharacters(\"N BTZQI WFYMJW GJ KNWXY NS F QNYYQJ NGJWNFS ANQQFLJ YMFS XJHTSI NS WTRJ\") === \"I WOULD RATHER BE FIRST IN A LITTLE IBERIAN VILLAGE THAN SECOND IN ROME\", 'Test 2 failed');\n    console.assert(shiftCharacters(\"IFSLJW PSTBX KZQQ BJQQ YMFY HFJXFW NX RTWJ IFSLJWTZX YMFS MJ\") === \"DANGER KNOWS FULL WELL THAT CAESAR IS MORE DANGEROUS THAN HE\", 'Test 3 failed');\n};\n\ntestShiftCharacters();", "entry_point": "shiftCharacters", "signature": "function shiftCharacters(text)", "docstring": "Shifts all characters by 5 positions in alphabetical order.\nOnly letters are replaced, and all letters are in uppercase.\n\nParameters:\n- text (string): The input text to be processed.\n\nReturns:\n- string: The transformed text with characters shifted by 5 positions.\n\nExample:\n- shiftCharacters(\"NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX\")\n// returns \"IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES\"", "instruction": "Write a JavaScript function `function shiftCharacters(text)` to solve the following problem:\nShifts all characters by 5 positions in alphabetical order.\nOnly letters are replaced, and all letters are in uppercase.\n\nParameters:\n- text (string): The input text to be processed.\n\nReturns:\n- string: The transformed text with characters shifted by 5 positions.\n\nExample:\n- shiftCharacters(\"NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX\")\n// returns \"IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES\"", "level": "middle"}
{"task_id": "JavaScript/26", "prompt": "\n/*\nClassify the integer x based on the following method:\nIf x is a single-digit number, x belongs to its own class.\nOtherwise, sum the digits of x, get a new x, and iterate until \nthe class is determined.\n\nParameters:\n- x (string): The integer to be classified as a string.\n\nReturns:\nint: The class to which the integer x belongs.\n\nExamples:\nclassify_integer(\"24\") // returns 6\nclassify_integer(\"39\") // returns 3\nclassify_integer(\"123456789\") // returns 9\nclassify_integer(\"123456789012345678901234567890\") // returns 9\nclassify_integer(\"12345\") // returns 6\nclassify_integer(\"999999999\") // returns 9\n*/\nfunction classify_integer(x)", "canonical_solution": "{\n    let n = 0;\n    for (let i = 0; i < x.length; i++) {\n        n += parseInt(x[i], 10);\n    }\n    while (n > 9) {\n        let t = n;\n        let a = 0;\n        while (t) {\n            a += t % 10;\n            t = Math.floor(t / 10);\n        }\n        n = a;\n    }\n    return n;\n}", "test": "function testClassifyInteger() {\n    console.assert(classify_integer(\"24\") === 6, \"Test failed: classify_integer('24') should return 6.\");\n    console.assert(classify_integer(\"39\") === 3, \"Test failed: classify_integer('39') should return 3.\");\n    console.assert(classify_integer(\"123456789\") === 9, \"Test failed: classify_integer('123456789') should return 9.\");\n    console.assert(classify_integer(\"123456789012345678901234567890\") === 9, \"Test failed: classify_integer('123456789012345678901234567890') should return 9.\");\n    console.assert(classify_integer(\"12345\") === 6, \"Test failed: classify_integer('12345') should return 6.\");\n    console.assert(classify_integer(\"999999999\") === 9, \"Test failed: classify_integer('999999999') should return 9.\");\n}\n\ntestClassifyInteger();", "entry_point": "classify_integer", "signature": "function classify_integer(x)", "docstring": "Classify the integer x based on the following method:\nIf x is a single-digit number, x belongs to its own class.\nOtherwise, sum the digits of x, get a new x, and iterate until \nthe class is determined.\n\nParameters:\n- x (string): The integer to be classified as a string.\n\nReturns:\nint: The class to which the integer x belongs.\n\nExamples:\nclassify_integer(\"24\") // returns 6\nclassify_integer(\"39\") // returns 3\nclassify_integer(\"123456789\") // returns 9\nclassify_integer(\"123456789012345678901234567890\") // returns 9\nclassify_integer(\"12345\") // returns 6\nclassify_integer(\"999999999\") // returns 9", "instruction": "Write a JavaScript function `function classify_integer(x)` to solve the following problem:\nClassify the integer x based on the following method:\nIf x is a single-digit number, x belongs to its own class.\nOtherwise, sum the digits of x, get a new x, and iterate until \nthe class is determined.\n\nParameters:\n- x (string): The integer to be classified as a string.\n\nReturns:\nint: The class to which the integer x belongs.\n\nExamples:\nclassify_integer(\"24\") // returns 6\nclassify_integer(\"39\") // returns 3\nclassify_integer(\"123456789\") // returns 9\nclassify_integer(\"123456789012345678901234567890\") // returns 9\nclassify_integer(\"12345\") // returns 6\nclassify_integer(\"999999999\") // returns 9", "level": "easy"}
{"task_id": "JavaScript/27", "prompt": "\n/**\n * Transforms the case of a given letter.\n * - letter (char): The input letter to be transformed.\n * \n * Returns:\n * - char: The letter with its case reversed. If the input is lowercase,\n * returns uppercase, and if the input is uppercase, returns lowercase.\n * \n * Example:\n * transformLetterCase('b') returns 'B'\n * transformLetterCase('Z') returns 'z'\n */\nfunction transformLetterCase(letter)", "canonical_solution": "{\n    const charCode = letter.charCodeAt(0);\n    if (charCode >= 'A'.charCodeAt(0) && charCode <= 'Z'.charCodeAt(0)) {\n        // Convert uppercase to lowercase\n        return String.fromCharCode(charCode + ('a'.charCodeAt(0) - 'A'.charCodeAt(0)));\n    } else if (charCode >= 'a'.charCodeAt(0) && charCode <= 'z'.charCodeAt(0)) {\n        // Convert lowercase to uppercase\n        return String.fromCharCode(charCode - ('a'.charCodeAt(0) - 'A'.charCodeAt(0)));\n    } else {\n        // Non-alphabetic characters are returned unchanged\n        return letter;\n    }\n}", "test": "const testTransformLetterCase = () => {\n    console.assert(transformLetterCase('b') === 'B');\n    console.assert(transformLetterCase('B') === 'b');\n    // Additional test cases\n    console.assert(transformLetterCase('z') === 'Z');\n    console.assert(transformLetterCase('Z') === 'z');\n    console.assert(transformLetterCase('m') === 'M');\n    console.assert(transformLetterCase('M') === 'm');\n    console.assert(transformLetterCase('1') === '1'); // Non-alphabetic, should be unchanged\n    console.assert(transformLetterCase('!') === '!'); // Non-alphabetic, should be unchanged\n\n    // Uncomment the following line to log a message for passed tests\n    // console.log(\"All tests passed successfully.\");\n};\n\ntestTransformLetterCase();", "entry_point": "transformLetterCase", "signature": "function transformLetterCase(letter)", "docstring": "Transforms the case of a given letter.\n- letter (char): The input letter to be transformed.\n\nReturns:\n- char: The letter with its case reversed. If the input is lowercase, returns uppercase, and if the input is uppercase, returns lowercase.\n\nExample:\ntransformLetterCase('b') returns 'B'\ntransformLetterCase('Z') returns 'z'", "instruction": "Write a JavaScript function `function transformLetterCase(letter)` to solve the following problem:\nTransforms the case of a given letter.\n- letter (char): The input letter to be transformed.\n\nReturns:\n- char: The letter with its case reversed. If the input is lowercase, returns uppercase, and if the input is uppercase, returns lowercase.\n\nExample:\ntransformLetterCase('b') returns 'B'\ntransformLetterCase('Z') returns 'z'", "level": "hard"}
{"task_id": "JavaScript/28", "prompt": "\n/**\n * Display the ASCII information for a given character.\n *\n * @param {char} character - The input character for which ASCII information is to be displayed.\n * @returns {number} - The corresponding ASCII code.\n * \n * Examples:\n * display_ascii_info('A');\n * // => 65\n */\nfunction display_ascii_info(character)", "canonical_solution": "{\n    return character.charCodeAt(0);\n}", "test": "(() => {\n    console.assert(display_ascii_info('A') === 65, \"'A' should return 65\");\n    console.assert(display_ascii_info('B') === 66, \"'B' should return 66\"); // Additional test case\n    console.assert(display_ascii_info('0') === 48, \"'0' should return 48\"); // Additional test case\n    console.assert(display_ascii_info(' ') === 32, \"' ' should return 32\"); // Additional test case\n    // console.log(\"All tests passed.\");\n})();", "entry_point": "display_ascii_info", "signature": "function display_ascii_info(character)", "docstring": "Display the ASCII information for a given character.\n\nParameters:\n@param {char} character - The input character for which ASCII information is to be displayed.\n\nReturns:\n@returns {number} - The corresponding ASCII code.\n\nExamples:\ndisplay_ascii_info('A');\n// => 65\n", "instruction": "Write a JavaScript function `function display_ascii_info(character)` to solve the following problem:\nDisplay the ASCII information for a given character.\n\nParameters:\n@param {char} character - The input character for which ASCII information is to be displayed.\n\nReturns:\n@returns {number} - The corresponding ASCII code.\n\nExamples:\ndisplay_ascii_info('A');\n// => 65\n", "level": "easy"}
{"task_id": "JavaScript/29", "prompt": "\n/**\n * Evaluate the grade for an input integer.\n * \n * Parameters:\n * - score (int): The integer score to be evaluated.\n * \n * Returns:\n * \u200b\u200b    char: The grade corresponding to the input score.\n * \u200b\u200b         If the score is between 90 and 100 (inclusive), returns 'A'.\n * \u200b\u200b         Otherwise, returns 'B'.\n * \n * @example\n * evaluate_integer_grade(90) // returns 'A'\n */\nfunction evaluate_integer_grade(score)", "canonical_solution": "{\n    // Return 'A' or 'B' based on the condition\n    return ((90 <= score && score <= 100) ? 'A' : 'B');\n}", "test": "function testEvaluateIntegerGrade() {\n    console.assert(evaluate_integer_grade(90) === 'A', 'Score of 90 should yield an A');\n    console.assert(evaluate_integer_grade(89) === 'B', 'Score of 89 should yield a B');\n    console.assert(evaluate_integer_grade(95) === 'A', 'Score of 95 should yield an A');\n    console.assert(evaluate_integer_grade(100) === 'A', 'Score of 100 should yield an A');\n    console.assert(evaluate_integer_grade(101) === 'B', 'Score of 101 should yield a B');\n\n    // console.log(\"All tests passed!\");\n}\n\ntestEvaluateIntegerGrade();", "entry_point": "evaluate_integer_grade", "signature": "function evaluate_integer_grade(score)", "docstring": "Evaluate the grade for an input integer.\n\nParameters:\n- score (int): The integer score to be evaluated.\n\nReturns:\n    char: The grade corresponding to the input score.\n    If the score is between 90 and 100 (inclusive), returns 'A'.\n    Otherwise, returns 'B'.\n\n@example\nevaluate_integer_grade(90) // returns 'A'\n", "instruction": "Write a JavaScript function `function evaluate_integer_grade(score)` to solve the following problem:\nEvaluate the grade for an input integer.\n\nParameters:\n- score (int): The integer score to be evaluated.\n\nReturns:\n    char: The grade corresponding to the input score.\n    If the score is between 90 and 100 (inclusive), returns 'A'.\n    Otherwise, returns 'B'.\n\n@example\nevaluate_integer_grade(90) // returns 'A'\n", "level": "easy"}
{"task_id": "JavaScript/30", "prompt": "// Note: No import statement is required in JavaScript for this function\n/**\n * Checks if a string with exactly three characters has two characters that are the same.\n * \n * @param {string} str - The three-character string to be checked.\n * @return {string} - Returns 'Yes' if the input has exactly two equal characters, otherwise 'No'.\n * \n * Examples:\n * checkTwoEqualDigits('112') // 'Yes'\n * checkTwoEqualDigits('123') // 'No'\n */\nfunction checkTwoEqualDigits(str)", "canonical_solution": "{\n    if ((str[0] === str[1] && str[1] !== str[2]) ||\n        (str[0] === str[2] && str[0] !== str[1]) ||\n        (str[1] === str[2] && str[0] !== str[1])) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}", "test": "const testCheckTwoEqualDigits = () => {\n    console.assert(checkTwoEqualDigits(\"112\") === \"Yes\");\n    console.assert(checkTwoEqualDigits(\"123\") === \"No\");\n    console.assert(checkTwoEqualDigits(\"232\") === \"Yes\");\n    console.assert(checkTwoEqualDigits(\"444\") === \"No\"); // All three characters are equal, not two.\n    console.assert(checkTwoEqualDigits(\"121\") === \"Yes\");\n\n    // Additional test cases to cover more scenarios\n    console.assert(checkTwoEqualDigits(\"787\") === \"Yes\");\n    console.assert(checkTwoEqualDigits(\"999\") === \"No\"); // All three characters are equal\n    console.assert(checkTwoEqualDigits(\"890\") === \"No\");\n    console.assert(checkTwoEqualDigits(\"556\") === \"Yes\");\n    console.assert(checkTwoEqualDigits(\"353\") === \"Yes\"); // No two characters are equal\n    \n    // console.log(\"All tests passed successfully.\");\n};\n\ntestCheckTwoEqualDigits();", "entry_point": "checkTwoEqualDigits", "signature": "function checkTwoEqualDigits(str)", "docstring": "Checks if a string with exactly three characters has two characters that are the same.\n\nParameters:\n- str (string): The three-character string to be checked.\n\nReturns:\n- string: Returns 'Yes' if the input has exactly two equal characters, otherwise 'No'.\n\nExamples:\n checkTwoEqualDigits('112') // 'Yes'\n checkTwoEqualDigits('123') // 'No'", "instruction": "Write a JavaScript function `function checkTwoEqualDigits(str)` to solve the following problem:\nChecks if a string with exactly three characters has two characters that are the same.\n\nParameters:\n- str (string): The three-character string to be checked.\n\nReturns:\n- string: Returns 'Yes' if the input has exactly two equal characters, otherwise 'No'.\n\nExamples:\n checkTwoEqualDigits('112') // 'Yes'\n checkTwoEqualDigits('123') // 'No'", "level": "easy"}
{"task_id": "JavaScript/31", "prompt": "\n/**\n * Given a string consisting of lowercase English letters, you can change one character to another\n * in each round. This function calculates the minimum number of rounds needed to make the string\n * composed of the same character.\n * @param {string} s - The input string.\n * @returns {number} The minimum number of rounds to make all characters in the string the same.\n *\n * Examples:\n * minRoundsToSameChar(\"aab\") // returns 1\n * minRoundsToSameChar(\"abc\") // returns 2\n * minRoundsToSameChar(\"aaa\") // returns 0\n */\nfunction minRoundsToSameChar(s)", "canonical_solution": "{\n    const charCount = new Array(26).fill(0); // Assuming only lowercase letters\n    for (const char of s) {\n        charCount[char.charCodeAt(0) - 'a'.charCodeAt(0)]++;\n    }\n    let maxCount = 0;\n    for (const count of charCount) {\n        if (count !== 0) {\n            maxCount++;\n        }\n    }\n\n    return maxCount - 1;\n}", "test": "const testMinRoundsToSameChar = () => {\n    console.assert(minRoundsToSameChar(\"aab\") === 1, \"Expected 1 round for 'aab'\");\n    console.assert(minRoundsToSameChar(\"abc\") === 2, \"Expected 2 rounds for 'abc'\");\n    console.assert(minRoundsToSameChar(\"aaa\") === 0, \"Expected 0 rounds for 'aaa'\");\n    console.assert(minRoundsToSameChar(\"abab\") === 1, \"Expected 1 round for 'abab'\");\n    console.assert(minRoundsToSameChar(\"zzzzz\") === 0, \"Expected 0 rounds for 'zzzzz'\");\n};\n\ntestMinRoundsToSameChar();", "entry_point": "minRoundsToSameChar", "signature": "function minRoundsToSameChar(s)", "docstring": "Given a string consisting of lowercase English letters, you can change one character to another in each round. This function calculates the minimum number of rounds needed to make the string composed of the same character.\n@param {string} s - The input string.\n@returns {number} The minimum number of rounds to make all characters in the string the same.\n\nExamples:\nminRoundsToSameChar(\"aab\") // returns 1\nminRoundsToSameChar(\"abc\") // returns 2\nminRoundsToSameChar(\"aaa\") // returns 0", "instruction": "Write a JavaScript function `function minRoundsToSameChar(s)` to solve the following problem:\nGiven a string consisting of lowercase English letters, you can change one character to another in each round. This function calculates the minimum number of rounds needed to make the string composed of the same character.\n@param {string} s - The input string.\n@returns {number} The minimum number of rounds to make all characters in the string the same.\n\nExamples:\nminRoundsToSameChar(\"aab\") // returns 1\nminRoundsToSameChar(\"abc\") // returns 2\nminRoundsToSameChar(\"aaa\") // returns 0", "level": "middle"}
{"task_id": "JavaScript/32", "prompt": "\n/**\n * Calculates the year Y_n when the n-th event occurs, considering that each\n * event has a periodicity of a_i years. The countdown for event i+1 starts\n * the year after event i occurs.\n * @param {number} n - the total number of events\n * @param {number[]} signs - an array representing the periodicities of the events\n * @returns {number} The year when the n-th event occurs\n * \n * Example:\n * apocalypseYear(6, [3,2,4,5,9,18])\n * // returns 36\n */\nfunction apocalypseYear(n, signs)", "canonical_solution": "{\n    let year = 0;\n    for (let i = 0; i < n; ++i) {\n        let period = signs[i];\n        let nextOccurrence = Math.floor(year / period + 1) * period;\n        year = nextOccurrence;\n    }\n    return year;\n}", "test": "const testApocalypseYear = () => {\n    console.assert(apocalypseYear(6, [3, 2, 4, 5, 9, 18]) === 36);\n    console.assert(apocalypseYear(5, [1, 2, 3, 4, 5]) === 5);\n    console.assert(apocalypseYear(5, [1, 1, 1, 1, 1]) === 5);\n    console.assert(apocalypseYear(6, [50, 30, 711, 200, 503, 1006]) === 2012);\n    console.assert(apocalypseYear(2, [1, 2]) === 2);\n    console.assert(apocalypseYear(3, [3, 1, 2]) === 6);\n    console.assert(apocalypseYear(3, [2, 3, 4]) === 4);\n    console.assert(apocalypseYear(4, [1, 2, 3, 4]) === 4);\n    console.assert(apocalypseYear(4, [5, 7, 11, 13]) === 13);\n    console.assert(apocalypseYear(5, [2, 2, 2, 2, 2]) === 10);\n    console.assert(apocalypseYear(3, [6, 10, 15]) === 15);\n    console.assert(apocalypseYear(3, [4, 6, 14]) === 14);\n    console.assert(apocalypseYear(4, [50, 30, 711, 200]) === 800);\n    console.assert(apocalypseYear(6, [1, 1, 1, 1, 1, 1]) === 6);\n    console.assert(apocalypseYear(2, [1000000, 999999]) === 1999998);\n};\n\ntestApocalypseYear();", "entry_point": "apocalypseYear", "signature": "function apocalypseYear(n, signs)", "docstring": "Calculates the year Y_n when the n-th event occurs, considering that each event has a periodicity of a_i years. The countdown for event i+1 starts the year after event i occurs.\nParameters:\n- n (number): The total number of events\n- signs (number[]): An array representing the periodicities of the events\nReturns:\n- number: The year when the n-th event occurs\n\nExample:\napocalypseYear(6, [3,2,4,5,9,18])\n// returns 36", "instruction": "Write a JavaScript function `function apocalypseYear(n, signs)` to solve the following problem:\nCalculates the year Y_n when the n-th event occurs, considering that each event has a periodicity of a_i years. The countdown for event i+1 starts the year after event i occurs.\nParameters:\n- n (number): The total number of events\n- signs (number[]): An array representing the periodicities of the events\nReturns:\n- number: The year when the n-th event occurs\n\nExample:\napocalypseYear(6, [3,2,4,5,9,18])\n// returns 36", "level": "easy"}
{"task_id": "JavaScript/33", "prompt": "\n/**\n * This problem introduces a new modulo operation, denoted by the symbol \"\u2295\".\n * When calculating x \u2295 y, if x is not a multiple of y, the result is the remainder of x divided by y.\n * Otherwise, divide x by y repeatedly until x is no longer a multiple of y, denoting the final value as x'.\n * Then the result is the remainder of x' divided by y. \n * For example, 4\u22955=4, 20\u22955=4, 100\u22955=4.\n * Given a prime number p, there will be several queries. For each query, an integer n is given,\n * and you need to compute the value of n! \u2295 p, where n! is the factorial of n,\n * i.e. the product of all positive integers less than or equal to n.\n * \n * @example\n * newModuloFactorial(3, 7); // returns 6\n */\nfunction newModuloFactorial(n, p)", "canonical_solution": "{\n    const pj = new Array(p).fill(1);\n    for (let i = 2; i < p; i++) pj[i] = (i * pj[i - 1]) % p;\n    \n    let ans = 1;\n    while (n > 0) {\n        ans = (ans * pj[n % p]) % p;\n        ans = ((n / p) & 1) ? p - ans : ans;\n        n = Math.floor(n / p);\n    }\n    return ans;\n}", "test": "(function testNewModuloFactorial() {\n    console.assert(newModuloFactorial(3, 7) === 6, 'Test at n=3, p=7 failed');\n    console.assert(newModuloFactorial(10, 3) === 1, 'Test at n=10, p=3 failed');\n    console.assert(newModuloFactorial(11, 7) === 4, 'Test at n=11, p=7 failed');\n    console.assert(newModuloFactorial(45, 7) === 1, 'Test at n=45, p=7 failed');\n    console.assert(newModuloFactorial(14, 7) === 2, 'Test at n=14, p=7 failed');\n    console.assert(newModuloFactorial(1919, 10007) === 3152, 'Test at n=1919, p=10007 failed');\n    console.assert(newModuloFactorial(810, 10007) === 3679, 'Test at n=810, p=10007 failed');\n    console.assert(newModuloFactorial(1, 2) === 1, 'Test at n=1, p=2 failed');\n    console.assert(newModuloFactorial(5, 11) === 10, 'Test at n=5, p=11 failed');\n    console.assert(newModuloFactorial(6, 13) === 5, 'Test at n=6, p=13 failed');\n    console.assert(newModuloFactorial(8, 17) === 13, 'Test at n=8, p=17 failed');\n    console.assert(newModuloFactorial(15, 19) === 16, 'Test at n=15, p=19 failed');\n    console.assert(newModuloFactorial(21, 23) === 1, 'Test at n=21, p=23 failed');\n    console.assert(newModuloFactorial(30, 29) === 28, 'Test at n=30, p=29 failed');\n    console.assert(newModuloFactorial(100, 101) === 100, 'Test at n=100, p=101 failed');\n})();", "entry_point": "newModuloFactorial", "signature": "function newModuloFactorial(n, p)", "docstring": "This problem introduces a new modulo operation, denoted by the symbol \"\u2295\".\nWhen calculating x \u2295 y, if x is not a multiple of y, the result is the remainder of x divided by y.\nOtherwise, divide x by y repeatedly until x is no longer a multiple of y, denoting the final value as x'.\nThen the result is the remainder of x' divided by y. \nFor example, 4\u22955=4, 20\u22955=4, 100\u22955=4.\nGiven a prime number p, there will be several queries. For each query, an integer n is given,\nand you need to compute the value of n! \u2295 p, where n! is the factorial of n,\ni.e. the product of all positive integers less than or equal to n.\n\n@example\nnewModuloFactorial(3, 7); // returns 6\n", "instruction": "Write a JavaScript function `function newModuloFactorial(n, p)` to solve the following problem:\nThis problem introduces a new modulo operation, denoted by the symbol \"\u2295\".\nWhen calculating x \u2295 y, if x is not a multiple of y, the result is the remainder of x divided by y.\nOtherwise, divide x by y repeatedly until x is no longer a multiple of y, denoting the final value as x'.\nThen the result is the remainder of x' divided by y. \nFor example, 4\u22955=4, 20\u22955=4, 100\u22955=4.\nGiven a prime number p, there will be several queries. For each query, an integer n is given,\nand you need to compute the value of n! \u2295 p, where n! is the factorial of n,\ni.e. the product of all positive integers less than or equal to n.\n\n@example\nnewModuloFactorial(3, 7); // returns 6\n", "level": "easy"}
{"task_id": "JavaScript/34", "prompt": "\n/**\n * You are given an array a of n integers. You can perform at most one operation where\n * you select three integers i, j, x (1 <= i <= j <= n) and replace all elements from a[i] to a[j]\n * with x, at a cost of (j - i + 1).\n * Find the minimum cost to make all elements in the array equal.\n */\nfunction makeEqualAgain(n, a)", "canonical_solution": "{\n    let j = 0, p = 1, q = 0, c, d;\n    let k = n;\n    for (p = 1; p < k; p++) {\n        if (a[p] !== a[p - 1])\n            break;\n    }\n    for (q = k - 1; q > p; q--) {\n        if (a[q] !== a[p - 1])\n            break;\n    }\n    for (d = k - 2; d >= 0; d--) {\n        if (a[d] !== a[d + 1])\n            break;\n    }\n    for (c = 0; c < d; c++) {\n        if (a[c] !== a[c + 1])\n            break;\n    }\n    if (q - p + 1 < d - c + 1)\n        return q - p + 1;\n    else\n        return d - c + 1;\n}", "test": "function testMakeEqualAgain() {\n    console.assert(makeEqualAgain(6, [1, 2, 3, 4, 5, 1]) === 4);\n    console.assert(makeEqualAgain(7, [1, 1, 1, 1, 1, 1, 1]) === 0);\n    console.assert(makeEqualAgain(8, [8, 8, 8, 1, 2, 8, 8, 8]) === 2);\n    console.assert(makeEqualAgain(3, [1, 2, 3]) === 2);\n    console.assert(makeEqualAgain(7, [4, 3, 2, 7, 1, 1, 3]) === 6);\n    console.assert(makeEqualAgain(9, [9, 9, 2, 9, 2, 5, 5, 5, 3]) === 7);\n    \n    console.assert(makeEqualAgain(3, [1, 2, 1]) === 1);\n    console.assert(makeEqualAgain(5, [5, 5, 1, 5, 5]) === 1);\n    console.assert(makeEqualAgain(4, [1, 1, 1, 1]) === 0);\n    console.assert(makeEqualAgain(6, [2, 2, 2, 3, 2, 2]) === 1);\n    console.assert(makeEqualAgain(1, [1]) === 0);\n    console.assert(makeEqualAgain(2, [1, 2]) === 1);\n    console.assert(makeEqualAgain(4, [1, 2, 2, 1]) === 2);\n    console.assert(makeEqualAgain(7, [4, 4, 4, 3, 3, 4, 4]) === 2);\n    console.assert(makeEqualAgain(6, [5, 4, 4, 4, 5, 5]) === 3);\n    console.assert(makeEqualAgain(7, [1, 2, 1, 2, 1, 2, 1]) === 5);\n\n}\n\ntestMakeEqualAgain();", "entry_point": "makeEqualAgain", "signature": "function makeEqualAgain(n, a)", "docstring": "You are given an array a of n integers. You can perform at most one operation where\nyou select three integers i, j, x (1 <= i <= j <= n) and replace all elements from a[i] to a[j]\nwith x, at a cost of (j - i + 1).\nFind the minimum cost to make all elements in the array equal.", "instruction": "Write a JavaScript function `function makeEqualAgain(n, a)` to solve the following problem:\nYou are given an array a of n integers. You can perform at most one operation where\nyou select three integers i, j, x (1 <= i <= j <= n) and replace all elements from a[i] to a[j]\nwith x, at a cost of (j - i + 1).\nFind the minimum cost to make all elements in the array equal.", "level": "middle"}
{"task_id": "JavaScript/35", "prompt": "\n/**\n * Given a sequence of N piles of stones numbered from 1 to N, with each pile containing a positive number of stones,\n * determine the winner of a game played by Charlie and Dan. Charlie goes first, and they take turns moving a \n * positive number of stones from the leftmost non-empty pile to the adjacent right pile. The player who can \n * only move stones in the last pile loses. Assuming both players use the best possible strategy, find out \n * who will win the game.\n *\n * @example\n * gameWinner([3, 1, 2, 2]) // returns \"Dan\"\n */\nfunction gameWinner(piles)", "canonical_solution": "{\n    const n = piles.length;\n    const firstPileStones = piles[0];\n    \n    if (n === 2) { // With only two piles, Charlie always wins.\n        return \"Charlie\";\n    }\n    if (firstPileStones === 1) { // If the first pile has only one stone, Dan wins.\n        return \"Dan\";\n    }\n    return \"Charlie\"; // In all other cases, Charlie wins.\n}", "test": "(() => {\n    console.assert(gameWinner([1, 2, 2]) === \"Dan\", \"Test 1 failed\");\n    console.assert(gameWinner([5, 5, 5, 5, 5]) === \"Charlie\", \"Test 2 failed\");\n    console.assert(gameWinner([2, 1, 2]) === \"Charlie\", \"Test 3 failed\");\n    console.assert(gameWinner([3, 3, 3, 3]) === \"Charlie\", \"Test 4 failed\");\n    console.assert(gameWinner([1, 1]) === \"Charlie\", \"Test 5 failed\");\n    console.assert(gameWinner([2, 1]) === \"Charlie\", \"Test 6 failed\");\n    console.assert(gameWinner([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) === \"Dan\", \"Test 7 failed\");\n    console.assert(gameWinner([2, 2, 2, 2, 2, 2, 2, 2, 2, 1]) === \"Charlie\", \"Test 8 failed\");\n    console.assert(gameWinner([10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) === \"Charlie\", \"Test 9 failed\");\n    console.assert(gameWinner([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) === \"Dan\", \"Test 10 failed\");\n})();", "entry_point": "gameWinner", "signature": "function gameWinner(piles)", "docstring": "Given a sequence of N piles of stones numbered from 1 to N, with each pile containing a positive number of stones,\n determine the winner of a game played by Charlie and Dan. Charlie goes first, and they take turns moving a\n positive number of stones from the leftmost non-empty pile to the adjacent right pile. The player who can\n only move stones in the last pile loses. Assuming both players use the best possible strategy, find out\n who will win the game.\n\n@example\ngameWinner([3, 1, 2, 2]) // returns \"Dan\"", "instruction": "Write a JavaScript function `function gameWinner(piles)` to solve the following problem:\nGiven a sequence of N piles of stones numbered from 1 to N, with each pile containing a positive number of stones,\n determine the winner of a game played by Charlie and Dan. Charlie goes first, and they take turns moving a\n positive number of stones from the leftmost non-empty pile to the adjacent right pile. The player who can\n only move stones in the last pile loses. Assuming both players use the best possible strategy, find out\n who will win the game.\n\n@example\ngameWinner([3, 1, 2, 2]) // returns \"Dan\"", "level": "middle"}
{"task_id": "JavaScript/36", "prompt": "\n/**\n * Given n doors arranged in a circle, the player starts in front of door 1.\n * Each turn, the player can choose a number i and pay a cost C_i to move i steps\n * to the right and then open the door at that position. It is guaranteed that\n * C_i >= C_{i+1} for 1 <= i < n.\n * The task is to determine the minimum total cost required to open all doors.\n * \n * Example:\n *     > minTotalCost(3, [1, 1, 1])\n *     3\n */\nfunction minTotalCost(n, C)", "canonical_solution": "{\n   return C[n-2] * (n - 1) + C[n-1];\n}", "test": "function testMinTotalCost() {\n    console.assert(minTotalCost(5, [4, 3, 3, 3, 3]) === 15);\n    console.assert(minTotalCost(3, [1, 1, 1]) === 3);\n    console.assert(minTotalCost(4, [5, 4, 3, 2]) === 11);\n    console.assert(minTotalCost(4, [100, 99, 98, 97]) === 391);\n    console.assert(minTotalCost(6, [10, 9, 8, 7, 6, 5]) === 35);\n    console.assert(minTotalCost(7, [2, 2, 2, 2, 2, 2, 2]) === 14);\n    console.assert(minTotalCost(8, [9, 7, 7, 7, 7, 7, 7, 7]) === 56);\n    console.assert(minTotalCost(9, [3, 2, 2, 2, 2, 2, 2, 2, 2]) === 18);\n    console.assert(minTotalCost(10, [6, 5, 5, 5, 5, 5, 5, 5, 5, 5]) === 50);\n    console.assert(minTotalCost(11, [8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) === 11);\n\n}\n\ntestMinTotalCost();", "entry_point": "minTotalCost", "signature": "function minTotalCost(n, C)", "docstring": "Given n doors arranged in a circle, the player starts in front of door 1.\nEach turn, the player can choose a number i and pay a cost C_i to move i steps\nto the right and then open the door at that position. It is guaranteed that\nC_i >= C_{i+1} for 1 <= i < n.\nThe task is to determine the minimum total cost required to open all doors.\n\nExample:\n    > minTotalCost(3, [1, 1, 1])\n    3\n", "instruction": "Write a JavaScript function `function minTotalCost(n, C)` to solve the following problem:\nGiven n doors arranged in a circle, the player starts in front of door 1.\nEach turn, the player can choose a number i and pay a cost C_i to move i steps\nto the right and then open the door at that position. It is guaranteed that\nC_i >= C_{i+1} for 1 <= i < n.\nThe task is to determine the minimum total cost required to open all doors.\n\nExample:\n    > minTotalCost(3, [1, 1, 1])\n    3\n", "level": "easy"}
{"task_id": "JavaScript/37", "prompt": "\n/**\n * Given a sequence of student IDs entering a classroom, where the IDs range from 0 to N-1,\n * calculate the total number of handshakes that occur. Each student will shake hands with \n * every student already in the classroom who has a smaller ID number. The sequence represents \n * the order in which students enter the classroom.\n *\n * Examples:\n *    countHandshakes(3, [2, 1, 0])  // returns 0\n */\nfunction countHandshakes(n, order)", "canonical_solution": "{\n    let ans = 0;\n    const tr = new Array(n + 1).fill(0); // Increase the size to accommodate 1-indexed values.\n    for (let i = 0; i < n; ++i) {\n        let x = order[i] + 1; // Convert 0-indexed to 1-indexed\n        for (let j = x - 1; j > 0; j -= j & (-j)) {\n            ans += tr[j];\n        }\n        for (let j = x; j <= n; j += j & (-j)) {\n            tr[j]++;\n        }\n    }\n    return ans;\n}", "test": "(() => {\n    console.assert(countHandshakes(4, [2, 1, 3, 0]) === 2, \"Test 1 failed\");\n    console.assert(countHandshakes(6, [0, 1, 2, 3, 4, 5]) === 15, \"Test 2 failed\");\n    console.assert(countHandshakes(3, [1, 2, 0]) === 1, \"Test 3 failed\");\n    console.assert(countHandshakes(4, [3, 2, 1, 0]) === 0, \"Test 4 failed\");\n    console.assert(countHandshakes(4, [0, 1, 2, 3]) === 6, \"Test 5 failed\");\n    console.assert(countHandshakes(6, [5, 4, 3, 2, 1, 0]) === 0, \"Test 6 failed\");\n    console.assert(countHandshakes(4, [0, 2, 1, 3]) === 5, \"Test 7 failed\");\n    console.assert(countHandshakes(5, [3, 1, 4, 2, 0]) === 3, \"Test 8 failed\");\n    console.assert(countHandshakes(4, [1, 0, 3, 2]) === 4, \"Test 9 failed\");\n    console.assert(countHandshakes(3, [2, 0, 1]) === 1, \"Test 10 failed\");\n    console.assert(countHandshakes(5, [1, 3, 0, 2, 4]) === 7, \"Test 11 failed\");\n    console.assert(countHandshakes(5, [4, 3, 2, 1, 0]) === 0, \"Test 12 failed\");\n})();", "entry_point": "countHandshakes", "signature": "function countHandshakes(n, order)", "docstring": "Given a sequence of student IDs entering a classroom, where the IDs range from 0 to N-1,\ncalculate the total number of handshakes that occur. Each student will shake hands with\nevery student already in the classroom who has a smaller ID number. The sequence represents\nthe order in which students enter the classroom.\n\nExamples:\ncountHandshakes(3, [2, 1, 0])  // returns 0", "instruction": "Write a JavaScript function `function countHandshakes(n, order)` to solve the following problem:\nGiven a sequence of student IDs entering a classroom, where the IDs range from 0 to N-1,\ncalculate the total number of handshakes that occur. Each student will shake hands with\nevery student already in the classroom who has a smaller ID number. The sequence represents\nthe order in which students enter the classroom.\n\nExamples:\ncountHandshakes(3, [2, 1, 0])  // returns 0", "level": "middle"}
{"task_id": "JavaScript/38", "prompt": "\n/**\n * Given n positive integers representing the count of each number from 1 to n, \n * find the maximum sum of the mode (most frequent element) for all prefixes of \n * a sequence constructed from these numbers. The mode is the largest number \n * among the most frequent elements in a sequence.\n * For example:\n *   maxModeSum(3, [1, 2, 3])\n *   A sequence that reaches its maximum value is [3, 2, 3, 1, 2, 2], and the sum is 17.\n */\nfunction maxModeSum(n, counts)", "canonical_solution": "{\n  let ans = 0;\n  let mx = 0;\n  let f = new Array(100000).fill(0); // Initialize the array with zeroes\n\n  for (let i = 0; i <= n; ++i) {\n    f[i] = 0;\n  }\n\n  for (let i = n; i > 0; --i) {\n    while (mx < counts[i - 1]) {\n      mx++;\n      f[mx] = f[mx - 1] + i;\n    }\n    ans += f[counts[i - 1]];\n  }\n  return ans;\n}", "test": "(function testMaxModeSum() {\n  console.assert(maxModeSum(3, [1, 3, 2]) === 17, 'Test case 1 failed');\n  console.assert(maxModeSum(4, [4, 1, 2, 3]) === 37, 'Test case 2 failed');\n  console.assert(maxModeSum(2, [1, 1]) === 4, 'Test case 3 failed');\n  console.assert(maxModeSum(5, [1, 2, 3, 4, 5]) === 75, 'Test case 4 failed');\n  console.assert(maxModeSum(1, [100000]) === 100000, 'Test case 5 failed');\n  console.assert(maxModeSum(5, [5, 3, 2, 4, 1]) === 62, 'Test case 6 failed');\n  console.assert(maxModeSum(3, [100000, 100000, 100000]) === 900000, 'Test case 7 failed');\n  console.assert(maxModeSum(3, [2, 2, 5]) === 27, 'Test case 8 failed');\n  console.assert(maxModeSum(4, [4, 4, 4, 4]) === 64, 'Test case 9 failed');\n  console.assert(maxModeSum(6, [1, 2, 3, 4, 5, 6]) === 126, 'Test case 10 failed');\n  console.assert(maxModeSum(3, [3, 1, 2]) === 16, 'Test case 11 failed');\n})();", "entry_point": "maxModeSum", "signature": "function maxModeSum(n, counts)", "docstring": "Given n positive integers representing the count of each number from 1 to n, find the maximum sum of the mode (most frequent element) for all prefixes of a sequence constructed from these numbers. The mode is the largest number among the most frequent elements in a sequence. For example:   maxModeSum(3, [1, 2, 3]) A sequence that reaches its maximum value is [3, 2, 3, 1, 2, 2], and the sum is 17.", "instruction": "Write a JavaScript function `function maxModeSum(n, counts)` to solve the following problem:\nGiven n positive integers representing the count of each number from 1 to n, find the maximum sum of the mode (most frequent element) for all prefixes of a sequence constructed from these numbers. The mode is the largest number among the most frequent elements in a sequence. For example:   maxModeSum(3, [1, 2, 3]) A sequence that reaches its maximum value is [3, 2, 3, 1, 2, 2], and the sum is 17.", "level": "easy"}
{"task_id": "JavaScript/39", "prompt": "\n/**\n * Given an array A of integers, the task is to calculate the sum of the XOR of all subarrays.\n * A subarray is defined by a pair of indices (L, R) such that 1 <= L <= R <= the length of the array.\n * The XOR sum of a subarray is the result of XORing all elements from L to R.\n * The final result is the sum of the XOR sums for all possible subarrays.\n *\n * Example:\n * sumOfXorSubarrays([1, 2, 3, 4, 5])  // returns 39\n */\nfunction sumOfXorSubarrays(A)", "canonical_solution": "{\n    const n = A.length;\n    let q = new Array(n + 1).fill(0);\n    let w = Array.from({ length: 21 }, () => [0, 0]);\n    let ans = 0;\n\n    for (let i = 1; i <= n; i++) {\n        q[i] = q[i - 1] ^ A[i - 1];\n    }\n\n    for (let i = 0; i <= n; i++) {\n        for (let j = 20; j >= 0; j--) {\n            w[j][(q[i] >> j) & 1]++;\n        }\n    }\n\n    for (let i = 0; i <= 20; i++) {\n        ans += w[i][0] * w[i][1] * (1 << i);\n    }\n\n    return ans;\n}", "test": "const testSumOfXorSubarrays = () => {\n    console.assert(sumOfXorSubarrays([1, 2, 3, 4, 5]) === 39);\n    console.assert(sumOfXorSubarrays([1, 1, 1]) === 4);\n    console.assert(sumOfXorSubarrays([2, 3, 1]) === 9);\n    console.assert(sumOfXorSubarrays([4, 5, 7, 9]) === 74);\n    console.assert(sumOfXorSubarrays([0, 0, 0, 0]) === 0);\n    console.assert(sumOfXorSubarrays([8, 8, 8, 8, 8]) === 72);\n    console.assert(sumOfXorSubarrays([3, 6, 9, 12, 15]) === 125);\n    console.assert(sumOfXorSubarrays([10, 20, 30, 40, 50]) === 390);\n    console.assert(sumOfXorSubarrays([16, 16, 16, 16, 16, 16]) === 192);\n    console.assert(sumOfXorSubarrays([1, 3, 5, 7, 9, 11, 13]) === 192);\n    console.assert(sumOfXorSubarrays([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) === 218);\n}\n\ntestSumOfXorSubarrays();", "entry_point": "sumOfXorSubarrays", "signature": "function sumOfXorSubarrays(A)", "docstring": "Given an array A of integers, the task is to calculate the sum of the XOR of all subarrays.\nA subarray is defined by a pair of indices (L, R) such that 1 <= L <= R <= the length of the array.\nThe XOR sum of a subarray is the result of XORing all elements from L to R.\nThe final result is the sum of the XOR sums for all possible subarrays.\n\nExample:\nsumOfXorSubarrays([1, 2, 3, 4, 5])  // returns 39\n", "instruction": "Write a JavaScript function `function sumOfXorSubarrays(A)` to solve the following problem:\nGiven an array A of integers, the task is to calculate the sum of the XOR of all subarrays.\nA subarray is defined by a pair of indices (L, R) such that 1 <= L <= R <= the length of the array.\nThe XOR sum of a subarray is the result of XORing all elements from L to R.\nThe final result is the sum of the XOR sums for all possible subarrays.\n\nExample:\nsumOfXorSubarrays([1, 2, 3, 4, 5])  // returns 39\n", "level": "middle"}
{"task_id": "JavaScript/40", "prompt": "\n/**\n * Given two positive integers n and k, find the number of positive integers x,\n * where 1 <= x <= n, that can be expressed as x = a^b with a and b being positive integers\n * and b >= k. Different legal representations of the same number are counted only once.\n * Example:\n *   countPowerNumbers(99, 1) returns 99\n */\nfunction countPowerNumbers(n, k) {", "canonical_solution": "let count = 0;\n    let x = 0;\n    let mp = new Array(n + 1).fill(false);\n    \n    for (let i = 2; i <= Math.cbrt(n); ++i) {\n        let t = i * i;\n        let m = 2;\n        while (t <= n / i) {\n            t *= i;\n            m++;\n            if (m < k || mp[t]) continue;\n            if (Math.pow(Math.floor(Math.sqrt(t)), 2) === t) x++;\n            mp[t] = true;\n            count++;\n        }\n    }\n    if (k === 1) {\n        count = n;\n    } else if (k >= 3) {\n        count += 1;\n    } else {\n        count += Math.floor(Math.sqrt(n)) - x;\n    }\n    return count;\n}", "test": "const testCountPowerNumbers = () => {\n    console.assert(countPowerNumbers(99, 1) === 99, 'Expected 99, got ' + countPowerNumbers(99, 1));\n    console.assert(countPowerNumbers(99, 3) === 7, 'Expected 7, got ' + countPowerNumbers(99, 3));\n    console.assert(countPowerNumbers(99, 2) === 12, 'Expected 12, got ' + countPowerNumbers(99, 2));\n    console.assert(countPowerNumbers(10, 1) === 10, 'Expected 10, got ' + countPowerNumbers(10, 1));\n    console.assert(countPowerNumbers(10, 2) === 4, 'Expected 4, got ' + countPowerNumbers(10, 2));\n    console.assert(countPowerNumbers(500, 1) === 500, 'Expected 500, got ' + countPowerNumbers(500, 1));\n    console.assert(countPowerNumbers(500, 2) === 30, 'Expected 30, got ' + countPowerNumbers(500, 2));\n    console.assert(countPowerNumbers(500, 3) === 13, 'Expected 13, got ' + countPowerNumbers(500, 3));\n    console.assert(countPowerNumbers(1000, 1) === 1000, 'Expected 1000, got ' + countPowerNumbers(1000, 1));\n    console.assert(countPowerNumbers(1000, 2) === 41, 'Expected 41, got ' + countPowerNumbers(1000, 2));\n    console.assert(countPowerNumbers(1000, 3) === 17, 'Expected 17, got ' + countPowerNumbers(1000, 3));\n    console.assert(countPowerNumbers(1000, 93) === 1, 'Expected 1, got ' + countPowerNumbers(1000, 93));\n    console.assert(countPowerNumbers(50, 2) === 10, 'Expected 10, got ' + countPowerNumbers(50, 2));\n    console.assert(countPowerNumbers(50, 3) === 5, 'Expected 5, got ' + countPowerNumbers(50, 3));\n    console.assert(countPowerNumbers(2, 3) === 1, 'Expected 1, got ' + countPowerNumbers(2, 3));\n};\ntestCountPowerNumbers();", "entry_point": "countPowerNumbers", "signature": "function countPowerNumbers(n, k)", "docstring": "Given two positive integers n and k, find the number of positive integers x,\nwhere 1 <= x <= n, that can be expressed as x = a^b with a and b being positive integers\nand b >= k. Different legal representations of the same number are counted only once.\nExample:\n  countPowerNumbers(99, 1) returns 99\n", "instruction": "Write a JavaScript function `function countPowerNumbers(n, k)` to solve the following problem:\nGiven two positive integers n and k, find the number of positive integers x,\nwhere 1 <= x <= n, that can be expressed as x = a^b with a and b being positive integers\nand b >= k. Different legal representations of the same number are counted only once.\nExample:\n  countPowerNumbers(99, 1) returns 99\n", "level": "hard"}
{"task_id": "JavaScript/41", "prompt": "\n/**\n * Given three integers n, m, and k, find the number of sequences consisting of n '(' and m ')', \n * such that the longest balanced subsequence is of length 2 * k. The result should be calculated \n * modulo 1,000,000,007 (10^9 + 7).\n * \n * For example:\n *     countBalancedSubsequences(2, 2, 2)\n *     // returns 2\n */\nfunction countBalancedSubsequences(n, m, k)", "canonical_solution": "{\n    const P = 1e9 + 7;\n    const C = Array.from({ length: 4003 }, () => Array(4003).fill(0));\n\n    // Compute binomial coefficients only once.\n    if (C[0][0] === 0) {\n        for (let i = 0; i <= 4002; i++) C[i][0] = 1;\n        for (let i = 1; i <= 4002; i++)\n            for (let j = 1; j <= i; j++)\n                C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % P;\n    }\n\n    // Calculate the number of balanced subsequences.\n    if (k > n || k > m) return 0;\n    \n    return (C[n + m][k] - C[n + m][k - 1] + P) % P;\n}", "test": "(() => {\n    console.assert(countBalancedSubsequences(2, 2, 2) === 2, 'Test case 1 failed');\n    console.assert(countBalancedSubsequences(3, 2, 3) === 0, 'Test case 2 failed');\n    console.assert(countBalancedSubsequences(3, 2, 1) === 4, 'Test case 3 failed');\n    console.assert(countBalancedSubsequences(4, 3, 2) === 14, 'Test case 4 failed');\n    console.assert(countBalancedSubsequences(5, 5, 2) === 35, 'Test case 5 failed');\n    console.assert(countBalancedSubsequences(6, 1, 1) === 6, 'Test case 6 failed');\n    console.assert(countBalancedSubsequences(1, 6, 1) === 6, 'Test case 7 failed');\n    console.assert(countBalancedSubsequences(7, 2, 2) === 27, 'Test case 8 failed');\n    console.assert(countBalancedSubsequences(8, 3, 3) === 110, 'Test case 9 failed');\n    console.assert(countBalancedSubsequences(10, 10, 5) === 10659, 'Test case 10 failed');\n    console.assert(countBalancedSubsequences(20, 20, 10) === 574221648, 'Test case 11 failed');\n    console.assert(countBalancedSubsequences(2000, 2000, 1000) === 854104531, 'Test case 12 failed');\n    console.assert(countBalancedSubsequences(2000, 1999, 1000) === 334874485, 'Test case 13 failed');\n    console.assert(countBalancedSubsequences(2000, 2000, 1999) === 259428024, 'Test case 14 failed');\n})();", "entry_point": "countBalancedSubsequences", "signature": "function countBalancedSubsequences(n, m, k)", "docstring": "Given three integers n, m, and k, find the number of sequences consisting of n '(' and m ')', such that the longest balanced subsequence is of length 2 * k. The result should be calculated modulo 1,000,000,007 (10^9 + 7).\n\nFor example:\n    countBalancedSubsequences(2, 2, 2)\n    // returns 2", "instruction": "Write a JavaScript function `function countBalancedSubsequences(n, m, k)` to solve the following problem:\nGiven three integers n, m, and k, find the number of sequences consisting of n '(' and m ')', such that the longest balanced subsequence is of length 2 * k. The result should be calculated modulo 1,000,000,007 (10^9 + 7).\n\nFor example:\n    countBalancedSubsequences(2, 2, 2)\n    // returns 2", "level": "hard"}
{"task_id": "JavaScript/42", "prompt": "\n/**\n * Given a rectangle paper of size n x m placed on a plane Cartesian coordinate system with its bottom-left \n * corner at (0,0) and top-right corner at (n,m), you need to calculate the expected number of operations\n * to cut the paper such that the remaining area is less than k.\n * In each operation, a line is randomly chosen that is parallel to the axes, passes through points with\n * integer coordinates, and cuts through (not just touching the edge) the paper. The bottom or right part\n * of the paper along this line is then discarded.\n * The answer should be modulo 10^9+7.\n *\n * For example:\n *    expectedCuts(3, 3, 4) // returns 3\n *    expectedCuts(5, 5, 12) // returns 2\n */\nfunction expectedCuts(n, m, k)", "canonical_solution": "{\n    const MD = 1000000007;\n    const N = 1000000;\n    let vv = new Array(N * 2 + 2).fill(0);\n    let ans = 1;\n\n    vv[1] = 1;\n    for (let i = 2; i <= N * 2; i++)\n        vv[i] = vv[i - MD % i] * (Math.floor(MD / i) + 1) % MD;\n    if (k > n * m) {\n        return 0;\n    }\n\n    for (let i = Math.floor((k + m - 1) / m); i < n; i++) {\n        ans = (ans + vv[i + Math.floor((k + i - 1) / i) - 1]) % MD;\n    }\n    for (let j = Math.floor((k + n - 1) / n); j < m; j++)\n        ans = (ans + vv[Math.floor((k + j - 1) / j) + j - 1]) % MD;\n\n    return ans;\n}", "test": "function testExpectedCuts() {\n    console.assert(expectedCuts(2, 4, 10) === 0, 'Test 1 failed');\n    console.assert(expectedCuts(2, 4, 8) === 1, 'Test 2 failed');\n    console.assert(expectedCuts(2, 4, 2) === 833333342, 'Test 3 failed');\n    console.assert(expectedCuts(2, 4, 6) === 250000003, 'Test 4 failed');\n    console.assert(expectedCuts(3, 3, 4) === 666666673, 'Test 5 failed');\n    console.assert(expectedCuts(5, 5, 12) === 666666673, 'Test 6 failed');\n    console.assert(expectedCuts(6, 7, 20) === 722222229, 'Test 7 failed');\n    console.assert(expectedCuts(10, 10, 50) === 714285721, 'Test 9 failed');\n    console.assert(expectedCuts(1, 10, 5) === 945634929, 'Test 10 failed');\n    console.assert(expectedCuts(10, 1, 5) === 945634929, 'Test 11 failed');\n}\n\ntestExpectedCuts();", "entry_point": "expectedCuts", "signature": "function expectedCuts(n, m, k)", "docstring": "Given a rectangle paper of size n x m placed on a plane Cartesian coordinate system with its bottom-left corner at (0,0) and top-right corner at (n,m), you need to calculate the expected number of operations to cut the paper such that the remaining area is less than k. In each operation, a line is randomly chosen that is parallel to the axes, passes through points with integer coordinates, and cuts through (not just touching the edge) the paper. The bottom or right part of the paper along this line is then discarded. The answer should be modulo 10^9+7.\n\nFor example:\n    expectedCuts(3, 3, 4) // returns 3\n    expectedCuts(5, 5, 12) // returns 2\n", "instruction": "Write a JavaScript function `function expectedCuts(n, m, k)` to solve the following problem:\nGiven a rectangle paper of size n x m placed on a plane Cartesian coordinate system with its bottom-left corner at (0,0) and top-right corner at (n,m), you need to calculate the expected number of operations to cut the paper such that the remaining area is less than k. In each operation, a line is randomly chosen that is parallel to the axes, passes through points with integer coordinates, and cuts through (not just touching the edge) the paper. The bottom or right part of the paper along this line is then discarded. The answer should be modulo 10^9+7.\n\nFor example:\n    expectedCuts(3, 3, 4) // returns 3\n    expectedCuts(5, 5, 12) // returns 2\n", "level": "hard"}
{"task_id": "JavaScript/43", "prompt": "\n/**\n * Given a permutation q of n elements and an integer k, find the number of permutations p of n elements\n * such that f(p) = q, where f(p) is the lexicographically smallest permutation that can be obtained by\n * dividing p into exactly k non-empty contiguous segments and sorting each segment (i.e., choose k-1\n * breakpoints 1 <= x1 < x2 < ... < x(k-1) < n, and divide it into [1, x1], (x1, x2], ..., (x(k-1), n]).\n * The result should be modulo 998244353.\n * \n * @example\n * countPermutations(2, 1, [1, 2])\n * // returns 2\n */\nconst countPermutations = (n, k, q) => {", "canonical_solution": "const P = 998244353;\n    let dp = Array.from({length: n + 1}, () => new Array(n + 1).fill(0));\n    let jc = new Array(n + 1).fill(0);\n    let f = new Array(n + 1).fill(0);\n    \n    dp[0][0] = f[0] = jc[0] = 1;\n    \n    for (let i = 1; i <= n; i++) {\n        jc[i] = (jc[i - 1] * i) % P;\n    }\n    \n    for (let i = 1; i <= n; i++) {\n        f[i] = jc[i];\n        for (let j = 1; j < i; j++) {\n            f[i] = (f[i] + P - (f[j] * jc[i - j]) % P) % P;\n        }\n    }\n    \n    for (let i = 1; i <= n; i++) {\n        for (let j = 0; j < i; j++) {\n            for (let kk = 1; kk <= n; kk++) {\n                dp[i][kk] = (dp[i][kk] + dp[j][kk - 1] * f[i - j]) % P;\n            }\n        }\n    }\n    \n    let m = 0;\n    for (let i = 1; i < n; i++) {\n        if (q[i - 1] > q[i]) {\n            m = i;\n            break;\n        }\n    }\n    \n    let ans = 0;\n    if (m === n || m === 0) {\n        for (let i = k; i <= n; i++) {\n            ans = (ans + dp[n][i]) % P;\n        }\n    } else {\n        for (let i = m + 1; i <= n; i++) {\n            if (i !== m + 1 && (q[i - 2] > q[i - 1] || q[i - 1] < q[m - 1])) {\n                break;\n            }\n            let c = k - 1 + i - n;\n            if (c >= 0) {\n                ans = (ans + dp[m][c] * jc[i - m - 1]) % P;\n            }\n        }\n    }\n    \n    return ans;\n};", "test": "console.assert(countPermutations(2, 1, [1, 2]) === 2, 'Test failed for input ([1, 2])');\nconsole.assert(countPermutations(3, 3, [3, 1, 2]) === 1, 'Test failed for input ([3, 1, 2])');\nconsole.assert(countPermutations(6, 3, [1, 2, 3, 6, 5, 4]) === 13, 'Test failed for input ([1, 2, 3, 6, 5, 4])');\nconsole.assert(countPermutations(6, 1, [1, 2, 3, 4, 5, 6]) === 720, 'Test failed for input ([1, 2, 3, 4, 5, 6])');\nconsole.assert(countPermutations(6, 3, [1, 2, 5, 3, 4, 5]) === 0, 'Test failed for input ([1, 2, 5, 3, 4, 5])');\nconsole.assert(countPermutations(9, 9, [1, 2, 3, 4, 5, 6, 7, 8, 9]) === 1, 'Test failed for input ([1, 2, 3, 4, 5, 6, 7, 8, 9])');\nconsole.assert(countPermutations(9, 2, [1, 2, 3, 4, 5, 6, 7, 9, 8]) === 29093);", "entry_point": "countPermutations", "signature": "const countPermutations = (n, k, q) =>", "docstring": "Given a permutation q of n elements and an integer k, find the number of permutations p of n elements\n such that f(p) = q, where f(p) is the lexicographically smallest permutation that can be obtained by\n dividing p into exactly k non-empty contiguous segments and sorting each segment (i.e., choose k-1\n breakpoints 1 <= x1 < x2 < ... < x(k-1) < n, and divide it into [1, x1], (x1, x2], ..., (x(k-1), n]).\n The result should be modulo 998244353.\n\n @example\n countPermutations(2, 1, [1, 2])\n // returns 2\n", "instruction": "Write a JavaScript function `const countPermutations = (n, k, q) =>` to solve the following problem:\nGiven a permutation q of n elements and an integer k, find the number of permutations p of n elements\n such that f(p) = q, where f(p) is the lexicographically smallest permutation that can be obtained by\n dividing p into exactly k non-empty contiguous segments and sorting each segment (i.e., choose k-1\n breakpoints 1 <= x1 < x2 < ... < x(k-1) < n, and divide it into [1, x1], (x1, x2], ..., (x(k-1), n]).\n The result should be modulo 998244353.\n\n @example\n countPermutations(2, 1, [1, 2])\n // returns 2\n", "level": "hard"}
{"task_id": "JavaScript/44", "prompt": "\n/**\n * Determines the number of ways to choose a triplet (a, b, c) \n * from an array of distinct integers representing heights such that the \n * greatest common divisor (GCD) of the maximum and minimum values \n * of the triplet is 1.\n * \n * @example\n * countTriplets([1, 5, 7])\n * // Returns: 1\n */\nfunction countTriplets(heights)", "canonical_solution": "{\n    let count = 0;\n    const n = heights.length;\n    for (let i = 0; i < n; ++i) {\n        for (let j = i + 1; j < n; ++j) {\n            for (let k = j + 1; k < n; ++k) {\n                const minVal = Math.min(heights[i], heights[j], heights[k]);\n                const maxVal = Math.max(heights[i], heights[j], heights[k]);\n                if (gcd(minVal, maxVal) === 1) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n// Helper function to find the greatest common divisor\nfunction gcd(a, b) {\n    while (b !== 0) {\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}", "test": "const main = () => {\n    console.assert(countTriplets([1, 5, 7]) === 1);\n    console.assert(countTriplets([1, 6, 2, 3]) === 3);\n    console.assert(countTriplets([16, 4, 8, 2]) === 0);\n    console.assert(countTriplets([10, 1, 6, 7, 9, 8, 4, 3, 5, 2]) === 77);\n    console.assert(countTriplets([4, 5, 9, 11, 14]) === 7);\n    console.assert(countTriplets([15, 10, 6, 9, 7, 3, 12, 8, 11, 1, 2]) === 104);\n    console.assert(countTriplets([3, 7, 11, 13]) === 4);\n    console.assert(countTriplets([5, 12, 13, 17, 19]) === 10);\n    console.assert(countTriplets([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) === 87);\n    console.assert(countTriplets([1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) === 122);\n}\n\nmain();", "entry_point": "countTriplets", "signature": "function countTriplets(heights)", "docstring": "Determines the number of ways to choose a triplet (a, b, c) from an array of distinct integers representing heights such that the greatest common divisor (GCD) of the maximum and minimum values of the triplet is 1.\n\n@example\ncountTriplets([1, 5, 7])\n// Returns: 1\n", "instruction": "Write a JavaScript function `function countTriplets(heights)` to solve the following problem:\nDetermines the number of ways to choose a triplet (a, b, c) from an array of distinct integers representing heights such that the greatest common divisor (GCD) of the maximum and minimum values of the triplet is 1.\n\n@example\ncountTriplets([1, 5, 7])\n// Returns: 1\n", "level": "hard"}
{"task_id": "JavaScript/45", "prompt": "\n/**\n * Given a 1 by n pixel image, each pixel has a color represented by an integer. You can change all \n * connected pixels of the same color to a chosen color, where two pixels are connected if they are \n * adjacent and have the same color. The goal is to find the minimum number of operations required \n * to make all pixels the same color.\n * Note: For each color, there are at most 20 pixels of that color.\n * \n * Examples:\n *    extraNumber(5, [1, 2, 3, 2, 1]) returns 2\n */\nfunction minOperations(n, pixels)", "canonical_solution": "{\n    let pre = new Array(n+1).fill(0),\n        u = new Array(n+1).fill(0),\n        f = Array.from({length: n+1}, () => new Array(n+1).fill(Infinity));\n\n    for (let i = 1; i <= n; i++) {\n        pre[i] = u[pixels[i-1]];\n        u[pixels[i-1]] = i;\n    }\n    \n    for (let i = 1; i <= n; i++) {\n        f[i][i] = 0;\n    }\n    \n    for (let len = 2; len <= n; len++) {\n        for (let i = 1; i <= n - len + 1; i++) {\n            let j = i + len - 1;\n            f[i][j] = f[i][j - 1] + 1;\n            for (let l = pre[j]; l >= i; l = pre[l]) {\n                f[i][j] = Math.min(f[i][j], f[i][l] + f[l + 1][j]);\n            }\n        }\n    }\n    \n    return f[1][n];\n}", "test": "(() => {\n    console.assert(minOperations(5, [1, 2, 3, 2, 1]) === 2);\n    console.assert(minOperations(4, [1, 1, 2, 2]) === 1);\n    console.assert(minOperations(5, [1, 2, 1, 4, 2]) === 3);\n    console.assert(minOperations(5, [5, 5, 5, 5, 5]) === 0);\n    console.assert(minOperations(6, [1, 1, 1, 2, 2, 2]) === 1);\n    console.assert(minOperations(7, [1, 3, 3, 3, 2, 2, 2]) === 2);\n    console.assert(minOperations(8, [4, 4, 4, 4, 3, 3, 3, 3]) === 1);\n    console.assert(minOperations(9, [1, 2, 3, 4, 5, 6, 7, 8, 9]) === 8);\n    console.assert(minOperations(10, [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) === 5);\n    console.assert(minOperations(3, [3, 3, 3]) === 0);\n    console.assert(minOperations(4, [2, 1, 1, 2]) === 1);\n})();", "entry_point": "minOperations", "signature": "function minOperations(n, pixels)", "docstring": "Given a 1 by n pixel image, each pixel has a color represented by an integer. You can change all connected pixels of the same color to a chosen color, where two pixels are connected if they are adjacent and have the same color. The goal is to find the minimum number of operations required to make all pixels the same color.\nNote: For each color, there are at most 20 pixels of that color.\n\nExamples:\nextraNumber(5, [1, 2, 3, 2, 1]) returns 2", "instruction": "Write a JavaScript function `function minOperations(n, pixels)` to solve the following problem:\nGiven a 1 by n pixel image, each pixel has a color represented by an integer. You can change all connected pixels of the same color to a chosen color, where two pixels are connected if they are adjacent and have the same color. The goal is to find the minimum number of operations required to make all pixels the same color.\nNote: For each color, there are at most 20 pixels of that color.\n\nExamples:\nextraNumber(5, [1, 2, 3, 2, 1]) returns 2", "level": "hard"}
{"task_id": "JavaScript/46", "prompt": "\n/**\n * Given an integer n, write a function to compute the sum of all numbers from 1 to n\n * that are multiples of either 3 or 5. If a number is a multiple of both 3 and 5,\n * it should only be counted once.\n * For example:\n *     sumOfMultiples(10); // returns 33 (3 + 5 + 6 + 9 + 10)\n */\nfunction sumOfMultiples(n)", "canonical_solution": "{\n    let sum = 0;\n    for (let i = 1; i <= n; ++i) {\n        if (i % 3 === 0 || i % 5 === 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}", "test": "const testSumOfMultiples = () => {\n    console.assert(sumOfMultiples(10) === 33, 'Test case n=10 failed');\n    console.assert(sumOfMultiples(15) === 60, 'Test case n=15 failed');\n    console.assert(sumOfMultiples(20) === 98, 'Test case n=20 failed');\n    console.assert(sumOfMultiples(5) === 8, 'Test case n=5 failed');\n    console.assert(sumOfMultiples(3) === 3, 'Test case n=3 failed');\n    console.assert(sumOfMultiples(6) === 14, 'Test case n=6 failed');\n    console.assert(sumOfMultiples(9) === 23, 'Test case n=9 failed');\n    console.assert(sumOfMultiples(12) === 45, 'Test case n=12 failed');\n    console.assert(sumOfMultiples(17) === 60, 'Test case n=17 failed');\n    console.assert(sumOfMultiples(21) === 119, 'Test case n=21 failed');\n    console.assert(sumOfMultiples(25) === 168, 'Test case n=25 failed');\n};\n\ntestSumOfMultiples();", "entry_point": "sumOfMultiples", "signature": "function sumOfMultiples(n)", "docstring": "Given an integer n, write a function to compute the sum of all numbers from 1 to n that are multiples of either 3 or 5. If a number is a multiple of both 3 and 5, it should only be counted once.\nFor example:\n    sumOfMultiples(10); // returns 33 (3 + 5 + 6 + 9 + 10)", "instruction": "Write a JavaScript function `function sumOfMultiples(n)` to solve the following problem:\nGiven an integer n, write a function to compute the sum of all numbers from 1 to n that are multiples of either 3 or 5. If a number is a multiple of both 3 and 5, it should only be counted once.\nFor example:\n    sumOfMultiples(10); // returns 33 (3 + 5 + 6 + 9 + 10)", "level": "easy"}
{"task_id": "JavaScript/47", "prompt": "\n/**\n * Determine if a given string is a palindrome.\n * A palindrome is a word, phrase, number, or other sequence of characters\n * that reads the same forward and backward (ignoring spaces, punctuation,\n * and capitalization).\n * \n * Examples:\n * isPalindrome(\"racecar\") // returns true\n * isPalindrome(\"hello\") // returns false\n */\nfunction isPalindrome(str)", "canonical_solution": "{\n  let start = 0;\n  let end = str.length - 1;\n\n  while (start < end) {\n    // Skip non-alphanumeric characters and handle case insensitivity\n    while (!isalnum(str[start]) && start < end) start++;\n    while (!isalnum(str[end]) && start < end) end--;\n    if (str[start].toLowerCase() !== str[end].toLowerCase())\n      return false;\n    start++;\n    end--;\n  }\n  return true;\n}\n\n// Helper function to check if a character is alphanumeric\nfunction isalnum(char) {\n  let code = char.charCodeAt(0);\n  return (code > 47 && code < 58) || // numeric (0-9)\n         (code > 64 && code < 91) || // upper alpha (A-Z)\n         (code > 96 && code < 123);  // lower alpha (a-z)\n}", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome(\"A man a plan a canal Panama\") === true, \"Test 1 failed\");\n  console.assert(isPalindrome(\"No lemon, no melon\") === true, \"Test 2 failed\");\n  console.assert(isPalindrome(\"Was it a car or a cat I saw\") === true, \"Test 3 failed\");\n  console.assert(isPalindrome(\"Madam, in Eden, I'm Adam\") === true, \"Test 4 failed\");\n  console.assert(isPalindrome(\"Never odd or even\") === true, \"Test 5 failed\");\n  console.assert(isPalindrome(\"Eva, can I see bees in a cave\") === true, \"Test 6 failed\");\n  console.assert(isPalindrome(\"hello\") === false, \"Test 7 failed\");\n  console.assert(isPalindrome(\"GitHub\") === false, \"Test 8 failed\");\n  console.assert(isPalindrome(\"programming\") === false, \"Test 9 failed\");\n};\n\ntestIsPalindrome();", "entry_point": "isPalindrome", "signature": "function isPalindrome(str)", "docstring": "Determine if a given string is a palindrome.\nA palindrome is a word, phrase, number, or other sequence of characters\nthat reads the same forward and backward (ignoring spaces, punctuation,\nand capitalization).\n\nExamples:\nisPalindrome(\"racecar\") // returns true\nisPalindrome(\"hello\") // returns false", "instruction": "Write a JavaScript function `function isPalindrome(str)` to solve the following problem:\nDetermine if a given string is a palindrome.\nA palindrome is a word, phrase, number, or other sequence of characters\nthat reads the same forward and backward (ignoring spaces, punctuation,\nand capitalization).\n\nExamples:\nisPalindrome(\"racecar\") // returns true\nisPalindrome(\"hello\") // returns false", "level": "hard"}
{"task_id": "JavaScript/48", "prompt": "\n/**\n * Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n * For example:\n *   addDigits(38)  // returns 2\n *   Explanation: 3 + 8 = 11, and 1 + 1 = 2. Since 2 has only one digit, 2 is the result.\n */\nfunction addDigits(num)", "canonical_solution": "{\n    while (num >= 10) {\n        let sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        num = sum;\n    }\n    return num;\n}", "test": "const testAddDigits = () => {\n    console.assert(addDigits(38) === 2, 'Test 1 failed');\n    console.assert(addDigits(0) === 0, 'Test 2 failed');\n    console.assert(addDigits(9) === 9, 'Test 3 failed');\n    console.assert(addDigits(123) === 6, 'Test 4 failed');\n    console.assert(addDigits(456) === 6, 'Test 5 failed');\n    console.assert(addDigits(9999) === 9, 'Test 6 failed');\n    console.assert(addDigits(100) === 1, 'Test 7 failed');\n    console.assert(addDigits(1010) === 2, 'Test 8 failed');\n    console.assert(addDigits(1234) === 1, 'Test 9 failed');\n    console.assert(addDigits(9876) === 3, 'Test 10 failed');\n    console.assert(addDigits(199) === 1, 'Test 11 failed');\n};\n\ntestAddDigits();", "entry_point": "addDigits", "signature": "function addDigits(num)", "docstring": "Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.\nFor example:\n  addDigits(38)  // returns 2\n  Explanation: 3 + 8 = 11, and 1 + 1 = 2. Since 2 has only one digit, 2 is the result.", "instruction": "Write a JavaScript function `function addDigits(num)` to solve the following problem:\nGiven a non-negative integer num, repeatedly add all its digits until the result has only one digit.\nFor example:\n  addDigits(38)  // returns 2\n  Explanation: 3 + 8 = 11, and 1 + 1 = 2. Since 2 has only one digit, 2 is the result.", "level": "easy"}
{"task_id": "JavaScript/49", "prompt": "\n/**\n * You are playing a game called Nim. In this game, you start with a pile\n * of n stones, and you and your opponent take turns to remove 1 to 3\n * stones from the pile. The one who removes the last stone wins the game.\n * Given the number of stones n, determine if you can win the game if both\n * you and your opponent play optimally.\n * Note: You always take the first turn.\n *\n * Here are some cases:\n *   canWinNim(1) // returns true\n */\nfunction canWinNim(n)", "canonical_solution": "{\n    return n % 4 !== 0;\n}", "test": "function testCanWinNim() {\n    console.assert(canWinNim(1) === true, \"Test case 1 failed\");\n    console.assert(canWinNim(2) === true, \"Test case 2 failed\");\n    console.assert(canWinNim(3) === true, \"Test case 3 failed\");\n    console.assert(canWinNim(4) === false, \"Test case 4 failed\");\n    console.assert(canWinNim(5) === true, \"Test case 5 failed\");\n    console.assert(canWinNim(6) === true, \"Test case 6 failed\");\n    console.assert(canWinNim(7) === true, \"Test case 7 failed\");\n    console.assert(canWinNim(8) === false, \"Test case 8 failed\");\n    console.assert(canWinNim(9) === true, \"Test case 9 failed\");\n    console.assert(canWinNim(10) === true, \"Test case 10 failed\");\n    console.assert(canWinNim(11) === true, \"Test case 11 failed\");\n    console.assert(canWinNim(12) === false, \"Test case 12 failed\");\n    console.assert(canWinNim(13) === true, \"Test case 13 failed\");\n    console.assert(canWinNim(14) === true, \"Test case 14 failed\");\n    console.assert(canWinNim(15) === true, \"Test case 15 failed\");\n    console.assert(canWinNim(16) === false, \"Test case 16 failed\");\n    console.assert(canWinNim(17) === true, \"Test case 17 failed\");\n    console.assert(canWinNim(18) === true, \"Test case 18 failed\");\n    console.assert(canWinNim(19) === true, \"Test case 19 failed\");\n    console.assert(canWinNim(20) === false, \"Test case 20 failed\");\n}\ntestCanWinNim();", "entry_point": "canWinNim", "signature": "function canWinNim(n)", "docstring": "You are playing a game called Nim. In this game, you start with a pile of n stones, and you and your opponent take turns to remove 1 to 3 stones from the pile. The one who removes the last stone wins the game. Given the number of stones n, determine if you can win the game if both you and your opponent play optimally. Note: You always take the first turn.\n\nHere are some cases:\n  canWinNim(1) // returns true", "instruction": "Write a JavaScript function `function canWinNim(n)` to solve the following problem:\nYou are playing a game called Nim. In this game, you start with a pile of n stones, and you and your opponent take turns to remove 1 to 3 stones from the pile. The one who removes the last stone wins the game. Given the number of stones n, determine if you can win the game if both you and your opponent play optimally. Note: You always take the first turn.\n\nHere are some cases:\n  canWinNim(1) // returns true", "level": "easy"}
{"task_id": "JavaScript/50", "prompt": "\n/**\n * Given two integers a and b, return the sum if the sum is even,\n * or return the product of a and b if the sum is odd.\n * Examples:\n *   evenSumOrOddProduct(2, 3) returns 6\n */\nfunction evenSumOrOddProduct(a, b)", "canonical_solution": "{\n    let sum = a + b;\n    if (sum % 2 === 0) {\n        return sum;\n    } else {\n        return a * b;\n    }\n}", "test": "const testEvenSumOrOddProduct = () => {\n    console.assert(evenSumOrOddProduct(2, 3) === 6, 'Test Case 1 Failed');\n    console.assert(evenSumOrOddProduct(5, 5) === 10, 'Test Case 2 Failed');\n    console.assert(evenSumOrOddProduct(1, 1) === 2, 'Test Case 3 Failed');\n    console.assert(evenSumOrOddProduct(0, 0) === 0, 'Test Case 4 Failed');\n    console.assert(evenSumOrOddProduct(-1, -1) === -2, 'Test Case 5 Failed');\n    console.assert(evenSumOrOddProduct(100, 200) === 300, 'Test Case 6 Failed');\n    console.assert(evenSumOrOddProduct(3, 4) === 12, 'Test Case 7 Failed');\n    console.assert(evenSumOrOddProduct(-5, 5) === 0, 'Test Case 8 Failed');\n    console.assert(evenSumOrOddProduct(7, 8) === 56, 'Test Case 9 Failed');\n    console.assert(evenSumOrOddProduct(9, 10) === 90, 'Test Case 10 Failed');\n    console.assert(evenSumOrOddProduct(11, 14) === 154, 'Test Case 11 Failed');\n}\n\ntestEvenSumOrOddProduct();", "entry_point": "evenSumOrOddProduct", "signature": "function evenSumOrOddProduct(a, b)", "docstring": "Given two integers a and b, return the sum if the sum is even,\n or return the product of a and b if the sum is odd.\n Examples:\n   evenSumOrOddProduct(2, 3) returns 6\n", "instruction": "Write a JavaScript function `function evenSumOrOddProduct(a, b)` to solve the following problem:\nGiven two integers a and b, return the sum if the sum is even,\n or return the product of a and b if the sum is odd.\n Examples:\n   evenSumOrOddProduct(2, 3) returns 6\n", "level": "easy"}
